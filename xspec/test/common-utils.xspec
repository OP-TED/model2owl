<?xml version="1.0" encoding="UTF-8"?>
<x:description query="x-urn:test:do-nothing" query-at="do-nothing.xqm" stylesheet="do-nothing.xsl"
	xmlns:x="http://www.jenitennison.com/xslt/xspec" xmlns:xs="http://www.w3.org/2001/XMLSchema">

	<!--
		The test target (../src/common/common-utils.xsl or common-utils.xqm) is included implicitly
		by the XSpec compiler. You don't need to specify it in /x:description/@stylesheet or
		@query-at.
	-->

	<x:scenario label="Scenario for testing variable xspec-namespace">
		<x:call function="false" />
		<x:expect label="xs:anyURI of XSpec namespace URI"
			select="doc($x:xspec-uri)/element() => namespace-uri()"
			test="$x:xspec-namespace treat as xs:anyURI" />
	</x:scenario>

	<x:scenario label="Scenario for testing variable apos">
		<x:call function="false" />
		<x:expect label="xs:string of one apostrophe character" select="string()"
			test="$x:apos treat as xs:string">'</x:expect>
	</x:scenario>

	<x:scenario label="Scenario for testing function decimal-string">
		<x:call function="x:decimal-string" />

		<x:scenario label="xs:integer">
			<x:call>
				<x:param select="xs:integer(1)" />
			</x:call>
			<x:expect label="Numeric literal of xs:decimal" select="'1.0'" />
		</x:scenario>

		<x:scenario label="xs:decimal (no decimal point)">
			<x:call>
				<x:param select="xs:decimal(1)" />
			</x:call>
			<x:expect label="Numeric literal of xs:decimal" select="'1.0'" />
		</x:scenario>

		<x:scenario label="xs:decimal (with decimal point)">
			<x:call>
				<x:param select="xs:decimal(1.2)" />
			</x:call>
			<x:expect label="Numeric literal of xs:decimal" select="'1.2'" />
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function QName-expression">
		<x:call function="x:QName-expression" />

		<x:scenario label="With URI">
			<x:variable as="xs:string" name="ridiculous-uri" select="string()"
				>'">&lt;#,|%7D&#x20;%7B][$^</x:variable>

			<x:scenario label="With prefix">
				<x:call>
					<x:param select="QName($ridiculous-uri, 'prefix:foo')" />
				</x:call>
				<x:expect label="Converted with apostrophe escaped" select="string()">
					<x:text xml:space="preserve">QName('''">&lt;#,|%7D&#x20;%7B][$^', 'prefix:foo')</x:text>
				</x:expect>
			</x:scenario>

			<x:scenario label="Without prefix">
				<x:call>
					<x:param select="QName($ridiculous-uri, 'foo')" />
				</x:call>
				<x:expect label="Converted with apostrophe escaped" select="string()">
					<x:text xml:space="preserve">QName('''">&lt;#,|%7D&#x20;%7B][$^', 'foo')</x:text>
				</x:expect>
			</x:scenario>
		</x:scenario>

		<x:scenario label="Without URI">
			<x:call>
				<x:param select="QName('', 'foo')" />
			</x:call>
			<x:expect label="Converted" select="string()">
				<x:text xml:space="preserve">QName('', 'foo')</x:text>
			</x:expect>
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function quote-with-apos">
		<x:call function="x:quote-with-apos" />

		<x:scenario label="One">
			<x:call>
				<x:param>foo'bar</x:param>
			</x:call>
			<x:expect label="Duplicated and quoted" select="string()">'foo''bar'</x:expect>
		</x:scenario>

		<x:scenario label="Three">
			<x:scenario label="Consecutive">
				<x:call>
					<x:param>foo'''bar</x:param>
				</x:call>
				<x:expect label="Duplicated and quoted" select="string()">'foo''''''bar'</x:expect>
			</x:scenario>

			<x:scenario label="Sparse">
				<x:call>
					<x:param>foo'bar'baz'qux</x:param>
				</x:call>
				<x:expect label="Duplicated and quoted" select="string()"
					>'foo''bar''baz''qux'</x:expect>
			</x:scenario>
		</x:scenario>

		<x:scenario label="No apos">
			<x:call>
				<x:param> foo bar </x:param>
			</x:call>
			<x:expect label="Just quoted" select="string()">' foo bar '</x:expect>
		</x:scenario>

		<x:scenario label="Zero-length string">
			<x:call>
				<x:param select="''" />
			</x:call>
			<x:expect label="Just quoted" select="string()">''</x:expect>
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function copy-of-namespaces"
		xml:base="common-utils/copy-of-namespaces/">
		<x:call function="x:copy-of-namespaces" />

		<x:scenario label="None">
			<x:call>
				<x:param as="element()" href="none.xml" select="element()" />
			</x:call>
			<x:expect as="empty-sequence()" label="Empty sequence" />
		</x:scenario>

		<x:scenario label="Complex">
			<x:call>
				<x:param as="element()" href="complex.xml" select="//*:input-element" />
			</x:call>
			<x:expect label="Namespace nodes" test="$x:result instance of namespace-node()+" />
			<x:expect label="Default namespace is copied" select="'default-ns'"
				test="$x:result[name() eq '']/string()" />
			<x:expect label="Prefixed namespace is copied" select="'prefixed-ns'"
				test="$x:result[name() eq 'prefix']/string()" />
			<x:expect label="Inherited prefixed namespace is copied" select="'wrapper-prefixed-ns'"
				test="$x:result[name() eq 'wrapper-prefix']/string()" />
			<x:expect label="No more" select="3" test="count($x:result)" />
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function copy-of-additional-namespaces"
		xml:base="common-utils/copy-of-additional-namespaces/">
		<x:call function="x:copy-of-additional-namespaces" />

		<x:scenario label="No namespace declarations">
			<x:call>
				<x:param as="element()" href="none.xml" select="element()" />
			</x:call>
			<x:expect as="empty-sequence()" label="Empty sequence" />
		</x:scenario>

		<x:scenario label="1 namespace declaration">
			<x:scenario label="Element name does not have a prefix">
				<x:call>
					<x:param as="element()" href="one-without-prefix.xml" select="element()" />
				</x:call>
				<x:expect as="empty-sequence()" label="Empty sequence" />
			</x:scenario>

			<x:scenario label="Element name has a prefix">
				<x:call>
					<x:param as="element()" href="one-with-prefix.xml" select="element()" />
				</x:call>
				<x:expect as="empty-sequence()" label="Empty sequence" />
			</x:scenario>
		</x:scenario>

		<x:scenario label="3+ namespace declarations">
			<!--
				Use parse-xml()
				- To prevent XML editors from reordering namespace declarations.
				- Not to inherit outer namespace declarations.
			-->

			<x:scenario label="The default namespace is not declared">
				<x:scenario label="Element name does not have a prefix">
					<x:call>
						<x:param as="element()" select="parse-xml(.)/element()"><![CDATA[
							<e xmlns:prefix3="three"
							   xmlns:prefix2="two"
							   xmlns:prefix1="one" />
						]]></x:param>
					</x:call>
					<x:expect label="Namespace nodes" test="$x:result instance of namespace-node()+" />
					<x:expect label="1st item" select="'prefix1', 'one'"
						test="$x:result[1] ! (name(), string())" />
					<x:expect label="2nd item" select="'prefix2', 'two'"
						test="$x:result[2] ! (name(), string())" />
					<x:expect label="3rd item" select="'prefix3', 'three'"
						test="$x:result[3] ! (name(), string())" />
					<x:expect label="No more" select="3" test="count($x:result)" />
				</x:scenario>

				<x:scenario label="Element name has a prefix">
					<x:call>
						<x:param as="element()" select="parse-xml(.)/element()"><![CDATA[
							<prefix1:e xmlns:prefix3="three"
							           xmlns:prefix2="two"
							           xmlns:prefix1="one" />
						]]></x:param>
					</x:call>
					<x:expect label="Namespace nodes" test="$x:result instance of namespace-node()+" />
					<x:expect label="1st item" select="'prefix2', 'two'"
						test="$x:result[1] ! (name(), string())" />
					<x:expect label="2nd item" select="'prefix3', 'three'"
						test="$x:result[2] ! (name(), string())" />
					<x:expect label="No more" select="2" test="count($x:result)" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="The default namespace is declared">
				<x:scenario label="Element name does not have a prefix">
					<x:call>
						<x:param as="element()" select="parse-xml(.)/element()"><![CDATA[
							<e xmlns:prefix3="three"
							   xmlns="default"
							   xmlns:prefix2="two"
							   xmlns:prefix1="one" />
						]]></x:param>
					</x:call>
					<x:expect label="Namespace nodes" test="$x:result instance of namespace-node()+" />
					<x:expect label="1st item" select="'prefix1', 'one'"
						test="$x:result[1] ! (name(), string())" />
					<x:expect label="2nd item" select="'prefix2', 'two'"
						test="$x:result[2] ! (name(), string())" />
					<x:expect label="3rd item" select="'prefix3', 'three'"
						test="$x:result[3] ! (name(), string())" />
					<x:expect label="No more" select="3" test="count($x:result)" />
				</x:scenario>

				<x:scenario label="Element name has a prefix">
					<x:call>
						<x:param as="element()" select="parse-xml(.)/element()"><![CDATA[
							<prefix1:e xmlns:prefix3="three"
							           xmlns="default"
							           xmlns:prefix2="two"
							           xmlns:prefix1="one" />
						]]></x:param>
					</x:call>
					<x:expect label="Namespace nodes" test="$x:result instance of namespace-node()+" />
					<x:expect label="1st item" select="'', 'default'"
						test="$x:result[1] ! (name(), string())" />
					<x:expect label="2nd item" select="'prefix2', 'two'"
						test="$x:result[2] ! (name(), string())" />
					<x:expect label="3rd item" select="'prefix3', 'three'"
						test="$x:result[3] ! (name(), string())" />
					<x:expect label="No more" select="3" test="count($x:result)" />
				</x:scenario>
			</x:scenario>
		</x:scenario>
	</x:scenario>

</x:description>
