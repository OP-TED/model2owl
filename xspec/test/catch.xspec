<?xml version="1.0" encoding="UTF-8"?>
<x:description query="x-urn:test:do-nothing" query-at="do-nothing.xqm" stylesheet="do-nothing.xsl"
	xmlns:x="http://www.jenitennison.com/xslt/xspec" xmlns:xs="http://www.w3.org/2001/XMLSchema">

	<!-- @catch attribute of this shared scenario is just to see how the current
		implementation behaves. At the moment, setting @catch on a scenario has
		no effect on the scenario where the corresponding x:like occurs. -->
	<x:scenario catch="no" label="call-error" shared="yes">
		<x:call function="error">
			<x:param select="xs:QName('my-error-code')" />
			<x:param select="'my error description'" />
			<x:param select="'my', 'error', 'object'" />
		</x:call>
	</x:scenario>

	<x:scenario catch="no" label="Disable @catch explicitly">
		<x:scenario catch="yes" label="Enable @catch by overriding inheritance">

			<x:scenario label="function-scenario">
				<x:scenario label="Error in SUT">
					<x:like label="call-error" />
					<x:expect label="err:code and its type" select="xs:QName('my-error-code')"
						test="$x:result?err?code treat as xs:QName" />
					<x:expect label="err:description and its type" select="'my error description'"
						test="$x:result?err?description treat as xs:string" />
					<x:expect label="err:value and its type" select="'my', 'error', 'object'"
						test="$x:result?err?value treat as xs:string+" />

					<!-- The error is raised by fn:error() at a line in the compiled stylsheet/query -->
					<x:expect label="err:module and its type"
						test="matches($x:result?err?module treat as xs:string, '.+/catch-compiled\.(xq|xsl)$')" />
					<x:expect label="err:line-number and its type"
						test="($x:result?err?line-number treat as xs:integer) ge 1" />
					<x:expect label="err:column-number and its type"
						test="($x:result?err?column-number treat as xs:integer) ge 1" />

					<!-- err:additional is only for XQuery and Saxon sets it empty:
						https://saxonica.plan.io/issues/4133#note-1 -->
					<x:expect label="err:additional is defined (XQuery)"
						select="if ($x:result?err?module => ends-with('.xq')) then [()] else []"
						test="$x:result?err => Q{http://www.w3.org/2005/xpath-functions/map}find('additional')"
					 />
				</x:scenario>

				<x:scenario label="No error in SUT">
					<x:call function="exactly-one">
						<x:param select="'string returned from function'" />
					</x:call>
					<x:expect label="Returned item intact" select="'string returned from function'"
					 />
				</x:scenario>
			</x:scenario>

		</x:scenario>
	</x:scenario>

</x:description>
