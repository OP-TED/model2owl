<?xml version="1.0" encoding="UTF-8"?>
<t:description xmlns:deq="urn:x-xspec:common:deep-equal"
               xmlns:items="x-urn:test:xspec-items"
               xmlns:t="http://www.jenitennison.com/xslt/xspec"
               xmlns:xs="http://www.w3.org/2001/XMLSchema"
               query="x-urn:test:xspec-items"
               query-at="items.xqm"
               stylesheet="items.xsl">

   <!--
       Test the source files deep-equal.xsl and deep-equal.xqm.

       The test target is included implicitly by the XSpec compiler. You don't need
       to specify it in /t:description/@stylesheet or @query-at.
   -->

   <!--
       Function deq:deep-equal($seq1, $seq2, '').
   -->
   <t:scenario label="deq:deep-equal($seq1, $seq2, '')">
      <t:call function="deq:deep-equal">
         <t:param position="3" select="''" />
      </t:call>

      <t:scenario label="Identical Sequences">
         <t:call>
            <t:param select="1, 2"/>
            <t:param select="1, 2"/>
         </t:call>
         <t:expect label="the result" select="true()"/>
      </t:scenario>

      <t:scenario label="Non-Identical Sequences">
         <t:call>
            <t:param select="1, 2"/>
            <t:param select="1, 3"/>
         </t:call>
         <t:expect label="the result" select="false()"/>
      </t:scenario>

      <t:scenario label="Sequences with Same Items in Different Orders">
         <t:call>
            <t:param select="1, 2"/>
            <t:param select="2, 1"/>
         </t:call>
         <t:expect label="the result" select="false()"/>
      </t:scenario>

      <t:scenario label="Empty Sequences">
         <t:call>
            <t:param select="()"/>
            <t:param select="()"/>
         </t:call>
         <t:expect label="the result" select="true()"/>
      </t:scenario>

      <t:scenario label="One empty sequence">
         <t:call>
            <t:param select="()"/>
            <t:param select="1"/>
         </t:call>
         <t:expect label="the result" select="false()"/>
      </t:scenario>

      <t:scenario label="A text node and several text nodes">
         <t:variable name="elems" as="element()+">
            <e>foo</e>
            <e>bar</e>
         </t:variable>
         <t:call>
            <t:param as="text()">foobar</t:param>
            <t:param select="$elems/text()" as="text()+"/>
         </t:call>
         <t:expect label="the result" select="true()"/>
      </t:scenario>

      <t:scenario label="Identical text nodes">
         <t:call>
            <t:param as="text()">foobar</t:param>
            <t:param as="text()">foobar</t:param>
         </t:call>
         <t:expect label="the result" select="true()"/>
      </t:scenario>

      <t:scenario label="Identical Element Sequences">
         <t:call>
            <t:param as="element()+"><foo/><bar/></t:param>
            <t:param as="element()+"><foo/><bar/></t:param>
         </t:call>
         <t:expect label="the result" select="true()"/>
      </t:scenario>

   </t:scenario>

   <!--
       Function deq:deep-equal($seq1, $seq2, version).
   -->
   <t:scenario label="deq:deep-equal($seq1, $seq2, version)">
      <t:call function="deq:deep-equal" />

      <t:scenario label="In version 1.0">
         <t:call>
            <t:param position="3" select="'1'" />
         </t:call>

         <t:scenario label="comparing text nodes with analogous">

            <t:scenario label="string">
               <t:call>
                  <t:param select="'12'"/>
                  <t:param select="descendant::text()" as="text()+">
                     <wrap>1</wrap>
                     <wrap>2</wrap>
                  </t:param>
               </t:call>
               <t:expect label="returns true" select="true()"/>
            </t:scenario>

            <t:scenario label="double">
               <t:call>
                  <t:param select="xs:double('12')"/>
                  <t:param select="descendant::text()" as="text()+">
                     <wrap>1</wrap>
                     <wrap>2</wrap>
                  </t:param>
               </t:call>
               <t:expect label="returns true" select="true()"/>
            </t:scenario>

            <t:scenario label="decimal">
               <t:call>
                  <t:param select="xs:decimal('12')"/>
                  <t:param select="descendant::text()" as="text()+">
                     <wrap>1</wrap>
                     <wrap>2</wrap>
                  </t:param>
               </t:call>
               <t:expect label="returns true" select="true()"/>
            </t:scenario>

            <t:scenario label="integer">
               <t:call>
                  <t:param select="xs:integer('12')"/>
                  <t:param select="descendant::text()" as="text()+">
                     <wrap>1</wrap>
                     <wrap>2</wrap>
                  </t:param>
               </t:call>
               <t:expect label="returns true" select="true()"/>
            </t:scenario>

         </t:scenario>

         <t:scenario label="comparing the same strings">
            <t:call>
               <t:param select="'foo'"/>
               <t:param select="'foo'"/>
            </t:call>
            <t:expect label="returns true" select="true()"/>
         </t:scenario>

         <t:scenario label="comparing different strings">
            <t:call>
               <t:param select="'foo'"/>
               <t:param select="'bar'"/>
            </t:call>
            <t:expect label="returns false" select="false()"/>
         </t:scenario>

      </t:scenario>

      <t:scenario label="In version 2.0">
         <t:call>
            <t:param position="3" select="''" />
         </t:call>

         <t:scenario label="comparing text nodes with analogous">

            <t:scenario label="string">
               <t:call>
                  <t:param select="'12'"/>
                  <t:param select="descendant::text()" as="text()+">
                     <wrap>1</wrap>
                     <wrap>2</wrap>
                  </t:param>
               </t:call>
               <t:expect label="returns false" select="false()"/>
            </t:scenario>

            <t:scenario label="double">
               <t:call>
                  <t:param select="xs:double('12')"/>
                  <t:param select="descendant::text()" as="text()+">
                     <wrap>1</wrap>
                     <wrap>2</wrap>
                  </t:param>
               </t:call>
               <t:expect label="returns false" select="false()"/>
            </t:scenario>

            <t:scenario label="decimal">
               <t:call>
                  <t:param select="xs:decimal('12')"/>
                  <t:param select="descendant::text()" as="text()+">
                     <wrap>1</wrap>
                     <wrap>2</wrap>
                  </t:param>
               </t:call>
               <t:expect label="returns false" select="false()"/>
            </t:scenario>

            <t:scenario label="integer">
               <t:call>
                  <t:param select="xs:integer('12')"/>
                  <t:param select="descendant::text()" as="text()+">
                     <wrap>1</wrap>
                     <wrap>2</wrap>
                  </t:param>
               </t:call>
               <t:expect label="returns false" select="false()"/>
            </t:scenario>

         </t:scenario>

         <t:scenario label="comparing the same strings">
            <t:call>
               <t:param select="'foo'"/>
               <t:param select="'foo'"/>
            </t:call>
            <t:expect label="returns true" select="true()"/>
         </t:scenario>

         <t:scenario label="comparing different strings">
            <t:call>
               <t:param select="'foo'"/>
               <t:param select="'bar'"/>
            </t:call>
            <t:expect label="returns false" select="false()"/>
         </t:scenario>

      </t:scenario>

   </t:scenario>

   <!--
       Function deq:deep-equal($seq1, $seq2, 'w').
   -->
   <t:scenario label="deq:deep-equal($seq1, $seq2, 'w')" xml:base="deep-equal/">
      <t:call function="deq:deep-equal" />

      <t:scenario label="Identical whitespace-only text nodes">
         <t:scenario label="In ordinal element">
            <t:scenario label="No flag">
               <t:call>
                  <t:param href="09.xml" />
                  <t:param href="09.xml" />
                  <t:param select="''" />
               </t:call>
               <t:expect label="True" select="true()" />
            </t:scenario>

            <t:scenario label="w">
               <t:call>
                  <t:param href="09.xml" />
                  <t:param href="09.xml" />
                  <t:param select="'w'" />
               </t:call>
               <t:expect label="True" select="true()" />
            </t:scenario>
         </t:scenario>

         <t:scenario label="In x:ws">
            <t:scenario label="No flag">
               <t:call>
                  <t:param href="ws-09.xml" />
                  <t:param href="ws-09.xml" />
                  <t:param select="''" />
               </t:call>
               <t:expect label="True" select="true()" />
            </t:scenario>

            <t:scenario label="w">
               <t:call>
                  <t:param href="ws-09.xml" />
                  <t:param href="ws-09.xml" />
                  <t:param select="'w'" />
               </t:call>
               <t:expect label="True" select="true()" />
            </t:scenario>
         </t:scenario>
      </t:scenario>

      <t:scenario label="Different whitespace-only text nodes">
         <t:scenario label="In ordinal element">
            <t:scenario label="No flag">
               <t:call>
                  <t:param href="09.xml" />
                  <t:param href="20.xml" />
                  <t:param select="''" />
               </t:call>
               <t:expect label="False" select="false()" />
            </t:scenario>

            <t:scenario label="w">
               <t:call>
                  <t:param href="09.xml" />
                  <t:param href="20.xml" />
                  <t:param select="'w'" />
               </t:call>
               <t:expect label="True (Whitespace-only text nodes are ignored)" select="true()" />
            </t:scenario>
         </t:scenario>

         <t:scenario label="In x:ws">
            <t:scenario label="No flag">
               <t:call>
                  <t:param href="ws-09.xml" />
                  <t:param href="ws-20.xml" />
                  <t:param select="''" />
               </t:call>
               <t:expect label="False" select="false()" />
            </t:scenario>

            <t:scenario label="w">
               <t:call>
                  <t:param href="ws-09.xml" />
                  <t:param href="ws-20.xml" />
                  <t:param select="'w'" />
               </t:call>
               <t:expect label="False (Whitespace-only text nodes are compared)" select="false()" />
            </t:scenario>
         </t:scenario>
      </t:scenario>
   </t:scenario>

   <!--
       Function deq:item-deep-equal
   -->
   <t:scenario label="deq:item-deep-equal">
      <t:call function="deq:item-deep-equal" />

      <t:scenario label="Copy of https://github.com/xspec/xspec/blob/120b3316aef2c1106287dc7c5270f3ed49062c68/src/compiler/generate-tests-utils.xsl#L207-L227">
         <t:call>
            <t:param position="3" select="''" />
         </t:call>

         <t:scenario label="Identical Integers">
            <t:call>
               <t:param name="item1" select="1" />
               <t:param name="item2" select="1" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Non-Identical Strings">
            <t:call>
               <t:param name="item1" select="'abc'" />
               <t:param name="item2" select="'def'" />
            </t:call>
            <t:expect label="False" select="false()" />
         </t:scenario>

         <t:scenario label="String and Integer">
            <t:call>
               <t:param name="item1" select="'1'" as="xs:string"/>
               <t:param name="item2" select="1" as="xs:integer"/>
            </t:call>
            <t:expect label="False" select="false()" />
         </t:scenario>

      </t:scenario>

   </t:scenario>

   <!--
       Function deq:node-deep-equal($seq1, $seq2, '').
   -->
   <t:scenario label="deq:node-deep-equal($seq1, $seq2, '')">
      <t:call function="deq:node-deep-equal">
         <t:param position="3" select="''" />
      </t:call>

      <t:scenario label="Identical Attribute Sequences">
         <t:call>
            <t:param name="node1" select="/node/@attribute" as="attribute(attribute)">
               <node attribute="foobar"/>
            </t:param>
            <t:param name="node2" select="/node/@attribute" as="attribute(attribute)">
               <node attribute="foobar"/>
            </t:param>
         </t:call>
         <t:expect label="the result" select="true()"/>
      </t:scenario>

      <t:scenario label="Copy of https://github.com/xspec/xspec/blob/120b3316aef2c1106287dc7c5270f3ed49062c68/src/compiler/generate-tests-utils.xsl#L246-L372">

         <t:scenario label="Identical Elements">
            <t:call>
               <t:param name="node1" select="/*" as="element(result)">
                  <result/>
               </t:param>
               <t:param name="node2" select="/*" as="element(result)">
                  <result/>
               </t:param>
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Elements with Identical Attributes in Different Orders">
            <t:call>
               <t:param name="node1" select="/*" as="element(result)">
                  <result a="1" b="2" />
               </t:param>
               <t:param name="node2" select="/*" as="element(result)">
                  <result b="2" a="1" />
               </t:param>
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Elements with Identical Children">
            <t:call>
               <t:param name="node1" select="/*" as="element(result)">
                  <result><child1/><child2/></result>
               </t:param>
               <t:param name="node2" select="/*" as="element(result)">
                  <result><child1/><child2/></result>
               </t:param>
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Identical Attributes">
            <t:call>
               <t:param name="node1" select="/*/@a" as="attribute(a)">
                  <result a="1" />
               </t:param>
               <t:param name="node2" select="/*/@a" as="attribute(a)">
                  <result a="1" />
               </t:param>
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Identical Document Nodes">
            <t:call>
               <t:param name="node1" select="/" as="document-node(element(result))">
                  <result />
               </t:param>
               <t:param name="node2" select="/" as="document-node(element(result))">
                  <result />
               </t:param>
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Identical Text Nodes">
            <t:call>
               <t:param name="node1" select="/*/text()" as="text()">
                  <result>Test</result>
               </t:param>
               <t:param name="node2" select="/*/text()" as="text()">
                  <result>Test</result>
               </t:param>
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Identical Comments">
            <t:call>
               <t:param name="node1" select="/comment()" as="comment()">
                  <!-- Comment -->
                  <doc />
               </t:param>
               <t:param name="node2" select="/comment()" as="comment()">
                  <!-- Comment -->
                  <doc />
               </t:param>
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Identical Processing Instructions">
            <t:call>
               <t:param name="node1" select="/processing-instruction()" as="processing-instruction(pi)">
                  <?pi data?>
                  <doc />
               </t:param>
               <t:param name="node2" select="/processing-instruction()" as="processing-instruction(pi)">
                  <?pi data?>
                  <doc />
               </t:param>
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario>
            <t:label>Using "..." to indicate missing text</t:label>
            <t:call>
               <t:param name="node1" as="element(foo)">
                  <foo>...</foo>
               </t:param>
               <t:param name="node2" as="element(foo)">
                  <foo>foo</foo>
               </t:param>
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario>
            <t:label>Using "..." to indicate missing mixed content</t:label>
            <t:call>
               <t:param name="node1" as="element(foo)">
                  <foo>...</foo>
               </t:param>
               <t:param name="node2" as="element(foo)">
                  <foo>foo<bar />foo</foo>
               </t:param>
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario>
            <t:label>Using "..." to indicate missing attribute values</t:label>
            <t:call>
               <t:param name="node1" select="/foo/@bar" as="attribute(bar)">
                  <foo bar="..." />
               </t:param>
               <t:param name="node2" select="/foo/@bar" as="attribute(bar)">
                  <foo bar="bar" />
               </t:param>
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario>
            <t:label>Using "..." to indicate missing empty content</t:label>
            <t:call>
               <t:param name="node1" select="/foo" as="element(foo)">
                  <foo>...</foo>
               </t:param>
               <t:param name="node2" select="/foo" as="element(foo)">
                  <foo />
               </t:param>
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

      </t:scenario>

      <t:scenario label="Namespace Nodes">

         <t:scenario label="Identical">
            <t:call>
               <t:param select="$items:namespace" />
               <t:param select="$items:namespace" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Identical default namespace">
            <t:call>
               <t:param select="$items:default-namespace" />
               <t:param select="$items:default-namespace" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Different">
            <t:call>
               <t:param select="$items:namespace" />
               <t:param select="$items:another-namespace" />
            </t:call>
            <t:expect label="False" select="false()" />
         </t:scenario>

      </t:scenario>

   </t:scenario>

   <!--
       Function deq:sorted-children
   -->
   <t:scenario label="deq:sorted-children">
      <t:call function="deq:sorted-children" />

      <t:scenario label="Copy of https://github.com/xspec/xspec/blob/120b3316aef2c1106287dc7c5270f3ed49062c68/src/compiler/generate-tests-utils.xsl#L466-L477">

         <t:scenario label="Original order preserved">
            <t:call>
               <t:param name="node" as="element(foo)">
                  <foo><bar /><baz /></foo>
               </t:param>
               <t:param select="''" />
            </t:call>
            <t:expect label="bar baz">
               <bar /><baz />
            </t:expect>
         </t:scenario>

      </t:scenario>

   </t:scenario>

</t:description>
