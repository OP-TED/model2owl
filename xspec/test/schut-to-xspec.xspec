<?xml version="1.0" encoding="UTF-8"?>
<x:description xmlns:helper="x-urn:test:schut-to-xspec_helper"
    xmlns:x="http://www.jenitennison.com/xslt/xspec"
    stylesheet="../src/schematron/schut-to-xspec.xsl">

    <x:param name="stylesheet-uri" select="'schut-to-xspec-test.sch.xsl'"/>

    <x:helper stylesheet="schematron/schut-to-xspec_helper.xsl" />

    <x:scenario label="templates">
        <x:scenario label="identity">
            <x:context href="schematron/schut-to-xspec-014-in.xspec" />
            <x:expect label="copied, with significant text nodes wrapped in x:text"
                href="schematron/schut-to-xspec-014-out.xspec"
                select="helper:expect(.)" />
        </x:scenario>
    </x:scenario>

    <x:scenario label="parameters">
        <x:scenario label="no phase">
            <x:context href="schematron/schut-to-xspec-001-in.xspec"/>
            <x:expect label="xspec description" href="schematron/schut-to-xspec-001-out.xspec"
                select="helper:expect(.)" />
        </x:scenario>

        <x:scenario label="with phase in user-content">
            <x:context href="schematron/schut-to-xspec-011-in.xspec"/>
            <x:expect label="xspec description" href="schematron/schut-to-xspec-011-out.xspec"
                select="helper:expect(.)" />
        </x:scenario>

        <x:scenario label="with phase in @select">
            <x:context href="schematron/schut-to-xspec-013-in.xspec"/>
            <x:expect label="xspec description" href="schematron/schut-to-xspec-013-out.xspec"
                select="helper:expect(.)" />
        </x:scenario>
    </x:scenario>

    <x:scenario label="namespaces defined in Schematron">
        <x:context href="schematron/schut-to-xspec-002-in.xspec"/>
        <x:expect label="transformed"
            href="schematron/schut-to-xspec-002-out.xspec"
            select="helper:expect(.)" />
        <x:expect label="namespaces not copied from sch:ns to x:description"
            test="
                x:copy-of-namespaces(x:description)
                ! ((name() eq '') and (. eq $x:xspec-namespace))" />
    </x:scenario>

    <x:scenario label="scenario">
        <x:scenario label="nested">
            <x:context href="schematron/schut-to-xspec-003-in.xspec"/>
            <x:expect label="nested scenarios" href="schematron/schut-to-xspec-003-out.xspec"
                select="helper:expect(.)" />
        </x:scenario>

        <x:scenario label="pending">
            <x:context href="schematron/schut-to-xspec-004-in.xspec"/>
            <x:expect label="pending scenarios" href="schematron/schut-to-xspec-004-out.xspec"
                select="helper:expect(.)" />
        </x:scenario>

        <x:scenario label="focus">
            <x:context href="schematron/schut-to-xspec-005-in.xspec"/>
            <x:expect label="focused scenario" href="schematron/schut-to-xspec-005-out.xspec"
                select="helper:expect(.)" />
        </x:scenario>

        <x:scenario label="shared">
            <x:context href="schematron/schut-to-xspec-006-in.xspec"/>
            <x:expect label="shared scenarios" href="schematron/schut-to-xspec-006-out.xspec"
                select="helper:expect(.)" />
        </x:scenario>
    </x:scenario>

    <x:scenario label="context">
        <x:scenario label="file">
            <x:context href="schematron/schut-to-xspec-007-in.xspec"/>
            <x:expect label="context href" href="schematron/schut-to-xspec-007-out.xspec"
                select="helper:expect(.)" />
        </x:scenario>

        <x:scenario label="inline">
            <x:context href="schematron/schut-to-xspec-008-in.xspec"/>
            <x:expect label="wrapper document node" href="schematron/schut-to-xspec-008-out.xspec"
                select="helper:expect(.)" />
        </x:scenario>
    </x:scenario>

    <x:scenario label="import">
        <x:scenario label="type schut (default)">
            <x:context href="schematron/schut-to-xspec-009-in.xspec"/>
            <x:expect label="resolve contents of imported file" href="schematron/schut-to-xspec-009-out.xspec"
                select="helper:expect(.)" />
        </x:scenario>

        <x:scenario label="type xspec">
            <x:context href="schematron/schut-to-xspec-010-in.xspec"/>
            <x:expect label="resolve contents of imported file" href="schematron/schut-to-xspec-010-out.xspec"
                select="helper:expect(.)" />
        </x:scenario>
    </x:scenario>

    <x:scenario label="assertions">
        <x:context href="schematron-012.xspec" />
        <x:expect label="expect elements with correct label and test" href="schematron/schut-to-xspec-012-out.xspec"
            select="helper:expect(.)" />
    </x:scenario>

</x:description>
