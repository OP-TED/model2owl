<?xml version="1.0" encoding="UTF-8"?>
<collection xmlns="x-urn:xspec:test:xspec-bat" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="x-urn:xspec:test:xspec-bat collection.xsd">

	<!--
		Usage (CLI)
	-->

	<case name="invoking xspec without arguments prints usage">
    call :run ..\bin\xspec.bat
    call :verify_retval 1
    call :verify_line 3 x "Usage: xspec [-t|-q|-s|-c|-j|-catalog file|-e|-h] file"
	</case>

	<case name="invoking xspec without arguments prints usage even if Saxon environment variables are not defined">
    set SAXON_CP=
    call :run ..\bin\xspec.bat
    call :verify_retval 1
    call :verify_line 1 x "SAXON_CP and SAXON_HOME both not set!"
    call :verify_line 4 r "Usage: xspec "
	</case>

	<case name="invoking xspec with -h prints usage and does so even when it is 11th argument">
    call :run ..\bin\xspec.bat -t -t -t -t -t -t -t -t -t -t -h
    call :verify_retval 0
    call :verify_line 1 r "Usage: xspec "
	</case>

	<case name="invoking xspec with unknown option prints usage">
    call :run ..\bin\xspec.bat -bogus ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 1 x "Error: Unknown option: -bogus"
    call :verify_line 3 r "Usage: xspec "
	</case>

	<case name="invoking xspec with extra arguments prints usage">
    call :run ..\bin\xspec.bat ..\tutorial\escape-for-regex.xspec bogus
    call :verify_retval 1
    call :verify_line 1 x "Error: Extra option: bogus"
    call :verify_line 3 r "Usage: xspec "
	</case>

	<!--
		Mutually exclusive test types (CLI)
	-->

	<case name="invoking xspec with -s and -t prints error message">
    call :run ..\bin\xspec.bat -s -t
    call :verify_retval 1
    call :verify_line 1 x "-s and -t are mutually exclusive"
	</case>

	<case name="invoking xspec with -s and -q prints error message">
    call :run ..\bin\xspec.bat -s -q
    call :verify_retval 1
    call :verify_line 1 x "-s and -q are mutually exclusive"
	</case>

	<case name="invoking xspec with -t and -q prints error message">
    call :run ..\bin\xspec.bat -t -q
    call :verify_retval 1
    call :verify_line 1 x "-t and -q are mutually exclusive"
	</case>

	<!--
		XSPEC_HOME
	-->

	<case name="XSPEC_HOME">
    set "XSPEC_HOME=%PARENT_DIR_ABS%"

    cd /d "%WORK_DIR%"

    call :copy "%XSPEC_HOME%\bin\xspec.bat" my-xspec.bat

    call :run my-xspec.bat "%XSPEC_HOME%\tutorial\escape-for-regex.xspec"
    call :verify_retval 0
    call :verify_line 22 x "passed: 5 / pending: 0 / failed: 1 / total: 6"
    call :verify_line 23 x "Report available at %TEST_DIR%\escape-for-regex-result.html"
	</case>

	<case name="XSPEC_HOME is not a directory">
    set "XSPEC_HOME=%WORK_DIR%\file %RANDOM%"
    call :copy NUL "%XSPEC_HOME%"

    call :run ..\bin\xspec.bat ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 1 x "ERROR: XSPEC_HOME is not a directory: %XSPEC_HOME%"
	</case>

	<case name="XSPEC_HOME seems to be corrupted">
    set "XSPEC_HOME=%WORK_DIR%"

    call :run ..\bin\xspec.bat ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 1 x "ERROR: XSPEC_HOME seems to be corrupted: %XSPEC_HOME%"
	</case>

	<case name="cd to bin dir and run CLI from there using implicit XSPEC_HOME #1568">
    cd ..\bin
    call :run xspec.bat ..\tutorial\escape-for-regex.xspec
    call :verify_retval 0
    call :verify_line 22 x "passed: 5 / pending: 0 / failed: 1 / total: 6"
    call :verify_line 23 x "Report available at %TEST_DIR%\escape-for-regex-result.html"
	</case>

	<!--
		SAXON_CP has precedence over SAXON_HOME
	-->

	<case name="SAXON_CP has precedence over SAXON_HOME">
    set "SAXON_HOME=%WORK_DIR%\empty-saxon-home %RANDOM%"
    call :mkdir "%SAXON_HOME%"

    call :run ..\bin\xspec.bat ..\tutorial\escape-for-regex.xspec
    call :verify_retval 0
	</case>

	<!--
		Coverage (CLI)
	-->

	<case ifdef="XSLT_SUPPORTS_COVERAGE" name="invoking xspec -c creates report files">
    rem Other stderr #204
    set JAVA_TOOL_OPTIONS=-Dfoo

    rem Non alphanumeric path #208
    set "SPECIAL_CHARS_DIR=%WORK_DIR%\up &amp; down %RANDOM%"
    call :mkdir "%SPECIAL_CHARS_DIR%"

    call :copy ..\tutorial\coverage\demo* "%SPECIAL_CHARS_DIR%"
    set TEST_DIR=

    call :run ..\bin\xspec.bat -c "%SPECIAL_CHARS_DIR%\demo.xspec"
    call :verify_retval 0

    rem XML and HTML report file
    call :verify_exist "%SPECIAL_CHARS_DIR%\xspec\demo-result.xml"
    call :verify_exist "%SPECIAL_CHARS_DIR%\xspec\demo-result.html"

    rem Check the coverage trace XML file contents
    call :run java -jar "%SAXON_JAR%" ^
        -s:"%SPECIAL_CHARS_DIR%\xspec\demo-coverage.xml" ^
        -xsl:check-coverage-xml.xsl
    call :verify_retval 0
    call :verify_line 1 x "true"

    rem Coverage report HTML file is created and contains CSS inline #194
    call :run java -jar "%SAXON_JAR%" -s:"%SPECIAL_CHARS_DIR%\xspec\demo-coverage.html" -xsl:check-html-css.xsl
    call :verify_retval 0
    call :verify_line 1 x "true"
	</case>

	<case name="invoking xspec -c -q prints error message">
    call :run ..\bin\xspec.bat -c -q ..\tutorial\xquery-tutorial.xspec
    call :verify_retval 1
    call :verify_line 1 x "Coverage is supported only for XSLT"
	</case>

	<case name="invoking xspec -c -s prints error message">
    call :run ..\bin\xspec.bat -c -s ..\tutorial\schematron\demo-01.xspec
    call :verify_retval 1
    call :verify_line 1 x "Coverage is supported only for XSLT"
	</case>

	<!--
		CLI without TEST_DIR
	-->

	<case name="invoking xspec without TEST_DIR set externally (XSLT)">
    set TEST_DIR=

    rem Use a fresh dir, to make the message line numbers predictable
    rem and to avoid a residue of output files
    set "TEST_COPY=%WORK_DIR%\some-failures %RANDOM%"
    call :mkdir "%TEST_COPY%"
    call :copy some-failures\function.* "%TEST_COPY%"

    rem Run
    call :run ..\bin\xspec.bat "%TEST_COPY%\function.xspec"

    rem By default, failure is not error
    call :verify_retval 0

    rem Verify message
    call :verify_line 16 x "passed: 1 / pending: 0 / failed: 2 / total: 3"
    call :verify_line 17 x "Report available at %TEST_COPY%\xspec\function-result.html"
    call :verify_line 18 x "Done."

    rem Verify report files
    rem * XML report file is created
    rem * HTML report file is created
    rem * Coverage is disabled by default
    rem * JUnit is disabled by default
    call :run dir /b /o:n "%TEST_COPY%\xspec"
    call :verify_line_count 3
    call :verify_line 1 x function-compiled.xsl
    call :verify_line 2 x function-result.html
    call :verify_line 3 x function-result.xml

    rem HTML report file contains CSS inline #135
    call :run java -jar "%SAXON_JAR%" ^
        -s:"%TEST_COPY%\xspec\function-result.html" ^
        -xsl:check-html-css.xsl
    call :verify_retval 0
    call :verify_line 1 x "true"
	</case>

	<case ifdef="XSLT_SUPPORTS_COVERAGE" name="invoking xspec -c without TEST_DIR set externally">
    set TEST_DIR=

    rem Use a fresh dir, to make the message line numbers predictable
    rem and to avoid a residue of output files
    set "TEST_COPY=%WORK_DIR%\some-failures %RANDOM%"
    call :mkdir "%TEST_COPY%"
    call :copy some-failures\function.* "%TEST_COPY%"

    rem Run
    call :run ..\bin\xspec.bat -c "%TEST_COPY%\function.xspec"

    rem By default, failure is not error
    call :verify_retval 0

    rem Verify message
    call :verify_line 19 x "passed: 1 / pending: 0 / failed: 2 / total: 3"
    call :verify_line 22 x "Report available at %TEST_COPY%\xspec\function-coverage.html"
    call :verify_line 23 x "Done."

    rem Verify report files
    rem * XML report file is created
    rem * HTML report file is created
    rem * Coverage XML report is created
    rem * Coverage HTML report is created
    rem * JUnit is disabled by default
    call :run dir /b /o:n "%TEST_COPY%\xspec"
    call :verify_line_count 5
    call :verify_line 1 x function-compiled.xsl
    call :verify_line 2 x function-coverage.html
    call :verify_line 3 x function-coverage.xml
    call :verify_line 4 x function-result.html
    call :verify_line 5 x function-result.xml
	</case>

	<case name="invoking xspec without TEST_DIR set externally (XQuery)">
    set TEST_DIR=

    rem Use a fresh dir, to make the message line numbers predictable
    rem and to avoid a residue of output files
    set "TEST_COPY=%WORK_DIR%\some-failures %RANDOM%"
    call :mkdir "%TEST_COPY%"
    call :copy some-failures\function.* "%TEST_COPY%"

    rem Run
    call :run ..\bin\xspec.bat -q "%TEST_COPY%\function.xspec"

    rem By default, failure is not error
    call :verify_retval 0

    rem Verify message
    call :verify_line  9 x "passed: 1 / pending: 0 / failed: 2 / total: 3"
    call :verify_line 10 x "Report available at %TEST_COPY%\xspec\function-result.html"
    call :verify_line 11 x "Done."

    rem Verify report files
    rem * XML report file is created
    rem * HTML report file is created
    rem * JUnit is disabled by default
    call :run dir /b /o:n "%TEST_COPY%\xspec"
    call :verify_line_count 3
    call :verify_line 1 x function-compiled.xq
    call :verify_line 2 x function-result.html
    call :verify_line 3 x function-result.xml
	</case>

	<case name="invoking xspec without TEST_DIR set externally (Schematron)">
    set TEST_DIR=

    rem Use a fresh dir, to make the message line numbers predictable
    rem and to avoid a residue of output files
    set "TEST_COPY=%WORK_DIR%\some-failures %RANDOM%"
    call :mkdir "%TEST_COPY%"
    call :copy some-failures\schematron.* "%TEST_COPY%"

    rem Run
    call :run ..\bin\xspec.bat -s "%TEST_COPY%\schematron.xspec"

    rem By default, failure is not error
    call :verify_retval 0

    rem Verify message
    rem * No Schematron warnings #129 #131
    call :verify_line  6 x "Converting Schematron XSpec into XSLT XSpec..."
    call :verify_line 21 x "passed: 1 / pending: 0 / failed: 2 / total: 3"
    call :verify_line 22 x "Report available at %TEST_COPY%\xspec\schematron-result.html"
    call :verify_line 23 x "Done."

    rem Verify report files
    rem * XML report file is created
    rem * HTML report file is created
    rem * JUnit is disabled by default
    call :run dir /b /o:n "%TEST_COPY%\xspec"
    call :verify_line_count 5
    call :verify_line 1 x schematron-compiled.xsl
    call :verify_line 2 x schematron-result.html
    call :verify_line 3 x schematron-result.xml
    call :verify_line 4 x schematron-sch-preprocessed.xsl
    call :verify_line 5 x schematron-sch-preprocessed.xspec
	</case>

	<!--
		CLI -e with some failures
	-->

	<case name="CLI -e with some failures (XSLT)">
    call :run ..\bin\xspec.bat -e some-failures\function.xspec
    call :verify_retval 2
    call :verify_line 16 x "passed: 1 / pending: 0 / failed: 2 / total: 3"
    call :verify_line 17 x "Report available at %TEST_DIR%\function-result.html"
    call :verify_line 19 x "*** Found a test failure"
	</case>

	<case name="CLI -e with some failures (XQuery)">
    call :run ..\bin\xspec.bat -e -q some-failures\function.xspec
    call :verify_retval 2
    call :verify_line  9 x "passed: 1 / pending: 0 / failed: 2 / total: 3"
    call :verify_line 10 x "Report available at %TEST_DIR%\function-result.html"
    call :verify_line 12 x "*** Found a test failure"
	</case>

	<case name="CLI -e with some failures (Schematron)">
    call :run ..\bin\xspec.bat -e -s some-failures\schematron.xspec
    call :verify_retval 2
    call :verify_line 21 x "passed: 1 / pending: 0 / failed: 2 / total: 3"
    call :verify_line 22 x "Report available at %TEST_DIR%\schematron-result.html"
    call :verify_line 24 x "*** Found a test failure"
	</case>

	<!--
		CLI -e with no failures
	-->

	<case name="CLI -e with no failures (XSLT)">
    call :run ..\bin\xspec.bat -e xslt3.xspec
    call :verify_retval 0
    call :verify_line 13 x "passed: 2 / pending: 0 / failed: 0 / total: 2"
    call :verify_line 14 x "Report available at %TEST_DIR%\xslt3-result.html"
    call :verify_line 15 x "Done."
	</case>

	<case name="CLI -e with no failures (XQuery)">
    call :run ..\bin\xspec.bat -e -q ..\tutorial\xquery-tutorial.xspec
    call :verify_retval 0
    call :verify_line  9 x "passed: 1 / pending: 0 / failed: 0 / total: 1"
    call :verify_line 10 x "Report available at %TEST_DIR%\xquery-tutorial-result.html"
    call :verify_line 11 x "Done."
	</case>

	<case name="CLI -e with no failures (Schematron)">
    call :run ..\bin\xspec.bat -e -s ..\tutorial\schematron\demo-01.xspec
    call :verify_retval 0
    call :verify_line 21 x "passed: 3 / pending: 0 / failed: 0 / total: 3"
    call :verify_line 22 x "Report available at %TEST_DIR%\demo-01-result.html"
    call :verify_line 23 x "Done."
	</case>

	<!--
		JUnit (CLI)
	-->

	<case name="invoking xspec with -j option generates message with JUnit report location and creates report files">
    call :run ..\bin\xspec.bat -j ..\tutorial\escape-for-regex.xspec
    call :verify_retval 0
    call :verify_line 25 x "Report available at %TEST_DIR%\escape-for-regex-junit.xml"

    rem XML report file
    call :verify_exist "%TEST_DIR%\escape-for-regex-result.xml"

    rem HTML report file
    call :verify_exist "%TEST_DIR%\escape-for-regex-result.html"

    rem JUnit report file
    call :verify_exist "%TEST_DIR%\escape-for-regex-junit.xml"
	</case>

	<!--
		Runtime warning
	-->

	<case name="invoking xspec that passes a non xs:boolean does not raise a warning #46">
    call :run ..\bin\xspec.bat issue-46.xspec
    call :verify_retval 0
    call :verify_line 7 r "Testing with "
	</case>

	<case name="x:resolve-EQName-ignoring-default-ns() with non-empty prefix does not raise a warning #826">
    call :run ..\bin\xspec.bat issue-826.xspec
    call :verify_retval 0
    call :verify_line 7 r "Testing with "
	</case>

	<!--
		XProc (Saxon)
	-->

	<case ifdef="XMLCALABASH_CP" name="XProc harness for Saxon (XSLT)">
    rem HTML report file
    set "ACTUAL_REPORT_DIR=%CD%\end-to-end\cases\actual__\stylesheet"
    call :mkdir-if-not-exist "%ACTUAL_REPORT_DIR%"
    set "ACTUAL_REPORT=%ACTUAL_REPORT_DIR%\serialize-result.html"

    rem Run
    call :run java -cp "%XMLCALABASH_CP%" com.xmlcalabash.drivers.Main ^
        -i source=end-to-end/cases/serialize.xspec ^
        -o result="file:///%ACTUAL_REPORT:\=/%" ^
        -p xspec-home="file:///%PARENT_DIR_ABS:\=/%/" ^
        ..\src\harnesses\saxon\saxon-xslt-harness.xproc
    call :verify_retval 0

    rem Verify HTML report including #72
    call :run java -jar "%SAXON_JAR%" ^
        -s:"%ACTUAL_REPORT%" ^
        -xsl:end-to-end\processor\html\compare.xsl ^
        EXPECTED-DOC-URI="file:///%ACTUAL_REPORT_DIR:\=/%/../../expected/stylesheet/serialize-result.html" ^
        NORMALIZE-HTML-DATETIME="2000-01-01T00:00:00Z"
    call :verify_retval 0
	</case>

	<case ifdef="XMLCALABASH_CP" name="XProc harness for Saxon (XQuery)">
    rem HTML report file
    set "ACTUAL_REPORT_DIR=%CD%\end-to-end\cases\actual__\query"
    call :mkdir-if-not-exist "%ACTUAL_REPORT_DIR%"
    set "ACTUAL_REPORT=%ACTUAL_REPORT_DIR%\serialize-result.html"

    rem Run
    call :run java -cp "%XMLCALABASH_CP%" com.xmlcalabash.drivers.Main ^
        -i source=end-to-end/cases/serialize.xspec ^
        -o result="file:///%ACTUAL_REPORT:\=/%" ^
        -p xspec-home="file:///%PARENT_DIR_ABS:\=/%/" ^
        ..\src\harnesses\saxon\saxon-xquery-harness.xproc
    call :verify_retval 0

    rem Verify HTML report including #72
    call :run java -jar "%SAXON_JAR%" ^
        -s:"%ACTUAL_REPORT%" ^
        -xsl:end-to-end\processor\html\compare.xsl ^
        EXPECTED-DOC-URI="file:///%ACTUAL_REPORT_DIR:\=/%/../../expected/query/serialize-result.html" ^
        NORMALIZE-HTML-DATETIME="2000-01-01T00:00:00Z"
    call :verify_retval 0

    rem Run again (ndw/xmlcalabash1#322)
    call :run java -cp "%XMLCALABASH_CP%" com.xmlcalabash.drivers.Main ^
        -i source=end-to-end/cases/serialize.xspec ^
        -o result="file:///%ACTUAL_REPORT:\=/%" ^
        -p xspec-home="file:///%PARENT_DIR_ABS:\=/%/" ^
        ..\src\harnesses\saxon\saxon-xquery-harness.xproc
    call :verify_retval 0
	</case>

	<case ifdef="XMLCALABASH_CP" name="XProc harness for Saxon (XQuery with special characters in expression #1020)">
    call :run java -cp "%XMLCALABASH_CP%" com.xmlcalabash.drivers.Main ^
        -i source=issue-1020.xspec ^
        -o result="file:///%WORK_DIR:\=/%/issue-1020-result_%RANDOM%.html" ^
        -p xspec-home="file:///%PARENT_DIR_ABS:\=/%/" ^
        ..\src\harnesses\saxon\saxon-xquery-harness.xproc
    call :verify_retval 0
    call :verify_line_count 2
    call :verify_line 2 r "..*:passed: 12 / pending: 0 / failed: 0 / total: 12"
	</case>

	<!--
		Path containing special chars (CLI)
	-->

	<case name="invoking xspec with path containing special chars (#84 #119 #202 #716) runs and loads doc (#610) successfully and generates HTML report file (XSLT)">
    set "SPECIAL_CHARS_DIR=%WORK_DIR%\some'path (84) here &amp; there %RANDOM%"
    call :mkdir "%SPECIAL_CHARS_DIR%"
    call :copy mirror.xsl       "%SPECIAL_CHARS_DIR%"
    call :copy node-selection.* "%SPECIAL_CHARS_DIR%"

    set TEST_DIR=
    set "EXPECTED_REPORT=%SPECIAL_CHARS_DIR%\xspec\node-selection-result.html"

    call :run ..\bin\xspec.bat "%SPECIAL_CHARS_DIR%\node-selection.xspec"
    call :verify_retval 0
    call :verify_line 29 x "Report available at %EXPECTED_REPORT%"
    call :verify_exist "%EXPECTED_REPORT%"
	</case>

	<case name="invoking xspec with path containing special chars (#84 #119 #202 #716) runs and loads doc (#610) successfully and generates HTML report file (XQuery)">
    set "SPECIAL_CHARS_DIR=%WORK_DIR%\some'path (84) here &amp; there %RANDOM%"
    call :mkdir "%SPECIAL_CHARS_DIR%"
    call :copy mirror.xqm       "%SPECIAL_CHARS_DIR%"
    call :copy node-selection.* "%SPECIAL_CHARS_DIR%"

    set TEST_DIR=
    set "EXPECTED_REPORT=%SPECIAL_CHARS_DIR%\xspec\node-selection-result.html"

    call :run ..\bin\xspec.bat -q "%SPECIAL_CHARS_DIR%\node-selection.xspec"
    call :verify_retval 0
    call :verify_line 10 x "Report available at %EXPECTED_REPORT%"
    call :verify_exist "%EXPECTED_REPORT%"
	</case>

	<case ifdef="SAXON_BUG_4696_FIXED" name="invoking xspec with path containing special chars (#84 #119 #202 #716) runs and loads doc (#610) successfully and generates HTML report file (Schematron)">
    set "SPECIAL_CHARS_DIR=%WORK_DIR%\some'path (84) here &amp; there %RANDOM%"
    call :mkdir "%SPECIAL_CHARS_DIR%"
    call :copy ..\tutorial\schematron\demo-03* "%SPECIAL_CHARS_DIR%"

    set TEST_DIR=
    set "EXPECTED_REPORT=%SPECIAL_CHARS_DIR%\xspec\demo-03-result.html"

    call :run ..\bin\xspec.bat -s "%SPECIAL_CHARS_DIR%\demo-03.xspec"
    call :verify_retval 0
    call :verify_line 37 x "Report available at %EXPECTED_REPORT%"
    call :verify_exist "%EXPECTED_REPORT%"
	</case>

	<!--
		saxon script
	-->

	<!-- bin\xspec.bat does not support saxon script -->
	<case ifdef="NEVER" name="invoking xspec with saxon script uses the saxon script #121 #122">
    (echo @echo Saxon script with EXPath Packaging System) > "%WORK_DIR%\saxon.bat"
    set "PATH=%PATH%;%WORK_DIR%"
    call :run ..\bin\xspec.bat ..\tutorial\escape-for-regex.xspec
    call :verify_retval 0
    call :verify_line 1 x "Saxon script found, use it."
	</case>

	<!--
		Schematron XSLTs provided externally (CLI)
		
			Ant is tested by run-xspec-tests-ant.cmd
	-->

	<case ifdef="SAXON_BUG_4696_FIXED" name="invoking xspec with Schematron XSLTs provided externally uses provided XSLTs for Schematron compile (CLI)">
    set SCHEMATRON_XSLT_INCLUDE=schematron\schematron-xslt_include.xsl
    set SCHEMATRON_XSLT_EXPAND=schematron\schematron-xslt_expand.xsl
    set SCHEMATRON_XSLT_COMPILE=schematron\schematron-xslt_compile.xsl

    call :run ..\bin\xspec.bat -s schematron-xslt.xspec
    call :verify_retval 0
    call :verify_line 17 x "passed: 1 / pending: 0 / failed: 0 / total: 1"
	</case>

	<!--
		Skip Schematron Step (CLI)
	-->

	<!-- Ant is tested by schematron-xslt_skip-1.xspec -->
	<case name="Skip Schematron Step 1 (CLI)">
    set SCHEMATRON_XSLT_INCLUDE=#none
    set SCHEMATRON_XSLT_EXPAND=schematron\schematron-xslt_include-expand.xsl
    set SCHEMATRON_XSLT_COMPILE=schematron\schematron-xslt_compile.xsl

    call :run ..\bin\xspec.bat -s schematron-xslt.xspec
    call :verify_retval 0
    call :verify_line 17 x "passed: 1 / pending: 0 / failed: 0 / total: 1"
	</case>

	<!-- Ant is tested by schematron-xslt_skip-2.xspec -->
	<case name="Skip Schematron Step 2 (CLI)">
    set SCHEMATRON_XSLT_INCLUDE=schematron\schematron-xslt_include.xsl
    set SCHEMATRON_XSLT_EXPAND=#none
    set SCHEMATRON_XSLT_COMPILE=schematron\schematron-xslt_expand-compile.xsl

    call :run ..\bin\xspec.bat -s schematron-xslt.xspec
    call :verify_retval 0
    call :verify_line 17 x "passed: 1 / pending: 0 / failed: 0 / total: 1"
	</case>

	<!-- Ant is tested by schematron-xslt_skip-1-2.xspec -->
	<case name="Skip Schematron Step 1 and 2 (CLI)">
    set SCHEMATRON_XSLT_INCLUDE=#none
    set SCHEMATRON_XSLT_EXPAND=#none
    set SCHEMATRON_XSLT_COMPILE=schematron\schematron-xslt_include-expand-compile.xsl

    call :run ..\bin\xspec.bat -s schematron-xslt.xspec
    call :verify_retval 0
    call :verify_line 17 x "passed: 1 / pending: 0 / failed: 0 / total: 1"
	</case>

	<!--
		CLI with TEST_DIR
	-->

	<case name="invoking xspec with TEST_DIR creates files in TEST_DIR (XSLT)">
    rem Use a fresh dir, to avoid a residue of default output dir
    set "TUTORIAL_COPY=%WORK_DIR%\tutorial %RANDOM%"
    call :mkdir "%TUTORIAL_COPY%"
    call :copy ..\tutorial\escape-for-regex.* "%TUTORIAL_COPY%"

    rem Run with absolute TEST_DIR
    call :run ..\bin\xspec.bat "%TUTORIAL_COPY%\escape-for-regex.xspec"
    call :verify_retval 0
    call :verify_line 23 x "Report available at %TEST_DIR%\escape-for-regex-result.html"

    rem Verify files in specified TEST_DIR
    call :run dir /b /o:n "%TEST_DIR%"
    call :verify_line_count 3
    call :verify_line 1 x escape-for-regex-compiled.xsl
    call :verify_line 2 x escape-for-regex-result.html
    call :verify_line 3 x escape-for-regex-result.xml

    rem Default output dir should not be created
    call :verify_leaf_dir_not_exist "%TUTORIAL_COPY%\xspec"

    rem Run with relative TEST_DIR
    cd /d "%WORK_DIR%"
    set "TEST_DIR=relative-test-dir %RANDOM%"
    call :run ""%PARENT_DIR_ABS%\bin\xspec.bat" "%TUTORIAL_COPY%\escape-for-regex.xspec""
    call :verify_retval 0
    call :verify_line 23 x "Report available at %TEST_DIR%\escape-for-regex-result.html"

    rem Verify files in specified TEST_DIR
    call :run dir /b /o:n "%TEST_DIR%"
    call :verify_line_count 3
    call :verify_line 1 x escape-for-regex-compiled.xsl
    call :verify_line 2 x escape-for-regex-result.html
    call :verify_line 3 x escape-for-regex-result.xml
	</case>

	<case ifdef="XSLT_SUPPORTS_COVERAGE" name="invoking xspec -c with TEST_DIR creates files in TEST_DIR">
    rem Use a fresh dir, to avoid a residue of default output dir
    set "TUTORIAL_COPY=%WORK_DIR%\tutorial %RANDOM%"
    call :mkdir "%TUTORIAL_COPY%"
    call :copy ..\tutorial\coverage\demo* "%TUTORIAL_COPY%"

    rem Run with absolute TEST_DIR
    call :run ..\bin\xspec.bat -c "%TUTORIAL_COPY%\demo.xspec"
    call :verify_retval 0
    call :verify_line 18 x "Report available at %TEST_DIR%\demo-coverage.html"

    rem Verify files in specified TEST_DIR
    call :run dir /b /o:n "%TEST_DIR%"
    call :verify_line_count 5
    call :verify_line 1 x demo-compiled.xsl
    call :verify_line 2 x demo-coverage.html
    call :verify_line 3 x demo-coverage.xml
    call :verify_line 4 x demo-result.html
    call :verify_line 5 x demo-result.xml

    rem Default output dir should not be created
    call :verify_leaf_dir_not_exist "%TUTORIAL_COPY%\xspec"

    rem Run with relative TEST_DIR
    cd /d "%WORK_DIR%"
    set "TEST_DIR=relative-test-dir %RANDOM%"
    call :run ""%PARENT_DIR_ABS%\bin\xspec.bat" -c "%TUTORIAL_COPY%\demo.xspec""
    call :verify_retval 0
    call :verify_line 18 x "Report available at %TEST_DIR%\demo-coverage.html"

    rem Verify files in specified TEST_DIR
    call :run dir /b /o:n "%TEST_DIR%"
    call :verify_line_count 5
    call :verify_line 1 x demo-compiled.xsl
    call :verify_line 2 x demo-coverage.html
    call :verify_line 3 x demo-coverage.xml
    call :verify_line 4 x demo-result.html
    call :verify_line 5 x demo-result.xml
	</case>

	<case name="invoking xspec with TEST_DIR creates files in TEST_DIR (XQuery)">
    rem Use a fresh dir, to avoid a residue of default output dir
    set "TUTORIAL_COPY=%WORK_DIR%\tutorial %RANDOM%"
    call :mkdir "%TUTORIAL_COPY%"
    call :copy ..\tutorial\xquery-tutorial.* "%TUTORIAL_COPY%"

    rem Run with absolute TEST_DIR
    call :run ..\bin\xspec.bat -q "%TUTORIAL_COPY%\xquery-tutorial.xspec"
    call :verify_retval 0
    call :verify_line 10 x "Report available at %TEST_DIR%\xquery-tutorial-result.html"

    rem Verify files in specified TEST_DIR
    call :run dir /b /o:n "%TEST_DIR%"
    call :verify_line_count 3
    call :verify_line 1 x xquery-tutorial-compiled.xq
    call :verify_line 2 x xquery-tutorial-result.html
    call :verify_line 3 x xquery-tutorial-result.xml

    rem Default output dir should not be created
    call :verify_leaf_dir_not_exist "%TUTORIAL_COPY%\xspec"

    rem Run with relative TEST_DIR
    cd /d "%WORK_DIR%"
    set "TEST_DIR=relative-test-dir %RANDOM%"
    call :run ""%PARENT_DIR_ABS%\bin\xspec.bat" -q "%TUTORIAL_COPY%\xquery-tutorial.xspec""
    call :verify_retval 0
    call :verify_line 10 x "Report available at %TEST_DIR%\xquery-tutorial-result.html"

    rem Verify files in specified TEST_DIR
    call :run dir /b /o:n "%TEST_DIR%"
    call :verify_line_count 3
    call :verify_line 1 x xquery-tutorial-compiled.xq
    call :verify_line 2 x xquery-tutorial-result.html
    call :verify_line 3 x xquery-tutorial-result.xml
	</case>

	<case ifdef="SAXON_BUG_4696_FIXED" name="invoking xspec with TEST_DIR creates files in TEST_DIR (Schematron)">
    rem Test with x:context[node()] #322

    rem Use a fresh dir, to avoid a residue of default output dir
    set "TUTORIAL_COPY=%WORK_DIR%\tutorial %RANDOM%"
    call :mkdir "%TUTORIAL_COPY%"
    call :copy ..\tutorial\schematron\demo-03* "%TUTORIAL_COPY%"

    rem Run with absolute TEST_DIR
    call :run ..\bin\xspec.bat -s "%TUTORIAL_COPY%\demo-03.xspec"
    call :verify_retval 0
    call :verify_line 37 x "Report available at %TEST_DIR%\demo-03-result.html"

    rem Verify files in specified TEST_DIR
    call :run dir /b /o:n "%TEST_DIR%"
    call :verify_line_count 5
    call :verify_line 1 x demo-03-compiled.xsl
    call :verify_line 2 x demo-03-result.html
    call :verify_line 3 x demo-03-result.xml
    call :verify_line 4 x demo-03-sch-preprocessed.xsl
    call :verify_line 5 x demo-03-sch-preprocessed.xspec

    rem Default output dir should not be created
    call :verify_leaf_dir_not_exist "%TUTORIAL_COPY%\xspec"

    rem Run with relative TEST_DIR
    cd /d "%WORK_DIR%"
    set "TEST_DIR=relative-test-dir %RANDOM%"
    call :run ""%PARENT_DIR_ABS%\bin\xspec.bat" -s "%TUTORIAL_COPY%\demo-03.xspec""
    call :verify_retval 0
    call :verify_line 37 x "Report available at %TEST_DIR%\demo-03-result.html"

    rem Verify files in specified TEST_DIR
    call :run dir /b /o:n "%TEST_DIR%"
    call :verify_line_count 5
    call :verify_line 1 x demo-03-compiled.xsl
    call :verify_line 2 x demo-03-result.html
    call :verify_line 3 x demo-03-result.xml
    call :verify_line 4 x demo-03-sch-preprocessed.xsl
    call :verify_line 5 x demo-03-sch-preprocessed.xspec
	</case>

	<!--
		XProc (BaseX)
	-->

	<case ifdef="BASEX_JAR XMLCALABASH_CP" name="XProc harness for BaseX (standalone)">
    rem Output files
    set "COMPILED_FILE=%WORK_DIR%\compiled_%RANDOM%.xq"
    set "EXPECTED_REPORT=%WORK_DIR%\issue-1020-result_%RANDOM%.html"

    rem Run (also test with special characters in expression #1020)
    call :run java -cp "%XMLCALABASH_CP%" com.xmlcalabash.drivers.Main ^
        -i source=issue-1020.xspec ^
        -o result="file:///%EXPECTED_REPORT:\=/%" ^
        -p basex-jar="%BASEX_JAR%" ^
        -p compiled-file="file:///%COMPILED_FILE:\=/%" ^
        -p xspec-home="file:///%PARENT_DIR_ABS:\=/%/" ^
        ..\src\harnesses\basex\basex-standalone-xquery-harness.xproc
    call :verify_retval 0
    call :verify_line -1 r "..*:passed: 12 / pending: 0 / failed: 0 / total: 12"

    rem Compiled file
    call :verify_exist "%COMPILED_FILE%"

    rem HTML report file should be created and its charset should be UTF-8 #72
    call :run java -jar "%SAXON_JAR%" -s:"%EXPECTED_REPORT%" -xsl:check-html-charset.xsl
    call :verify_retval 0
    call :verify_line 1 x "true"
	</case>

	<case ifdef="BASEX_JAR XMLCALABASH_CP" name="XProc harness for BaseX (server)">
    rem BaseX dir
    set "BASEX_HOME=%BASEX_JAR%\.."

    rem Start BaseX server
    rem Run the batch file in a child process in order to localize various environment changes
    call :run "%BASEX_HOME%\bin\basexhttp.bat" -S
    call :verify_retval 0

    rem HTML report file
    set "EXPECTED_REPORT=%WORK_DIR%\report-sequence-result_%RANDOM%.html"

    rem Run (also test with various types in report)
    call :run java -cp "%XMLCALABASH_CP%" com.xmlcalabash.drivers.Main ^
        -i source=report-sequence.xspec ^
        -o result="file:///%EXPECTED_REPORT:\=/%" ^
        -p auth-method=Basic ^
        -p endpoint=http://localhost:8984/rest ^
        -p password=admin ^
        -p username=admin ^
        -p xspec-home="file:///%PARENT_DIR_ABS:\=/%/" ^
        ..\src\harnesses\basex\basex-server-xquery-harness.xproc
    call :verify_retval 0
    call :verify_line_count 2
    call :verify_line 2 r "..*:passed: 132 / pending: 0 / failed: 0 / total: 132"

    rem HTML report file should be created and its charset should be UTF-8 #72
    call :run java -jar "%SAXON_JAR%" -s:"%EXPECTED_REPORT%" -xsl:check-html-charset.xsl
    call :verify_retval 0
    call :verify_line 1 x "true"

    rem Stop BaseX server
    rem Run the batch file in a child process in order to localize various environment changes
    call :run "%BASEX_HOME%\bin\basexhttpstop.bat"
    call :verify_retval 0
	</case>

	<case ifdef="BASEX_JAR XMLCALABASH_CP" name="BaseX with no-prefix.xspec">
    call :run java -cp "%XMLCALABASH_CP%" com.xmlcalabash.drivers.Main ^
        -i source=no-prefix.xspec ^
        -o result="file:///%WORK_DIR:\=/%/no-prefix-result_%RANDOM%.html" ^
        -p basex-jar="%BASEX_JAR%" ^
        -p compiled-file="file:///%WORK_DIR:\=/%/compiled_%RANDOM%.xq" ^
        -p xspec-home="file:///%PARENT_DIR_ABS:\=/%/" ^
        ..\src\harnesses\basex\basex-standalone-xquery-harness.xproc
    call :verify_retval 0
    call :verify_line_count 2
    call :verify_line 2 r "..*:passed: 10 / pending: 0 / failed: 0 / total: 10"
	</case>

	<!--
		Ant with minimum properties
	-->

	<case name="Ant with minimum properties (XSLT)">
    rem Unset any preset args
    set ANT_ARGS=

    rem Use a fresh dir, to avoid a residue of default output dir
    set "TUTORIAL_COPY=%WORK_DIR%\tutorial %RANDOM%"
    call :mkdir "%TUTORIAL_COPY%"
    call :copy ..\tutorial\escape-for-regex.* "%TUTORIAL_COPY%"

    rem Run
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dxspec.xml="%TUTORIAL_COPY%\escape-for-regex.xspec"

    rem Default xspec.fail is true
    call :verify_retval 1
    call :verify_line  * x "     [xslt] passed: 5 / pending: 0 / failed: 1 / total: 6"
    call :verify_line -4 x "BUILD FAILED"

    rem Verify default output dir
    rem * Default clean.output.dir is false
    rem * Default xspec.coverage.enabled is false
    rem * Default xspec.junit.enabled is false
    call :run dir /b /o:n "%TUTORIAL_COPY%\xspec"
    call :verify_line_count 4
    call :verify_line 1 x escape-for-regex_xml-to-properties.xml
    call :verify_line 2 x escape-for-regex-compiled.xsl
    call :verify_line 3 x escape-for-regex-result.html
    call :verify_line 4 x escape-for-regex-result.xml

    rem HTML report file contains CSS inline
    call :run java -jar "%SAXON_JAR%" ^
        -s:"%TUTORIAL_COPY%\xspec\escape-for-regex-result.html" ^
        -xsl:check-html-css.xsl
    call :verify_retval 0
    call :verify_line 1 x "true"
	</case>

	<case name="Ant with minimum properties (XQuery)">
    rem Unset any preset args
    set ANT_ARGS=

    rem Use a fresh dir, to avoid a residue of default output dir
    set "TUTORIAL_COPY=%WORK_DIR%\tutorial %RANDOM%"
    call :mkdir "%TUTORIAL_COPY%"
    call :copy ..\tutorial\xquery-tutorial.* "%TUTORIAL_COPY%"

    rem Run
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dtest.type=q ^
        -Dxspec.xml="%TUTORIAL_COPY%\xquery-tutorial.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 1 / pending: 0 / failed: 0 / total: 1"
    call :verify_line -2 x "BUILD SUCCESSFUL"

    rem Verify default output dir
    rem * Default clean.output.dir is false
    rem * Default xspec.junit.enabled is false
    call :run dir /b /o:n "%TUTORIAL_COPY%\xspec"
    call :verify_line_count 4
    call :verify_line 1 x xquery-tutorial_xml-to-properties.xml
    call :verify_line 2 x xquery-tutorial-compiled.xq
    call :verify_line 3 x xquery-tutorial-result.html
    call :verify_line 4 x xquery-tutorial-result.xml
	</case>

	<case ifdef="SAXON_BUG_4696_FIXED" name="Ant with minimum properties (Schematron)">
    rem Unset any preset args
    set ANT_ARGS=

    rem Use a fresh dir, to avoid a residue of default output dir
    set "TUTORIAL_COPY=%WORK_DIR%\tutorial %RANDOM%"
    call :mkdir "%TUTORIAL_COPY%"
    call :copy ..\tutorial\schematron\demo-03* "%TUTORIAL_COPY%"

    rem Run
    rem * Should work without phase #168
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dtest.type=s ^
        -Dxspec.xml="%TUTORIAL_COPY%\demo-03.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 10 / pending: 1 / failed: 0 / total: 11"
    call :verify_line -2 x "BUILD SUCCESSFUL"

    rem Verify default output dir
    rem * Default clean.output.dir is false
    rem * Default xspec.junit.enabled is false
    call :run dir /b /o:n "%TUTORIAL_COPY%\xspec"
    call :verify_line_count 6
    call :verify_line 1 x demo-03_xml-to-properties.xml
    call :verify_line 2 x demo-03-compiled.xsl
    call :verify_line 3 x demo-03-result.html
    call :verify_line 4 x demo-03-result.xml
    call :verify_line 5 x demo-03-sch-preprocessed.xsl
    call :verify_line 6 x demo-03-sch-preprocessed.xspec
	</case>

	<!--
		Catalog file path (Ant)
		
			Test 'catalog' property containing multiple file paths (relative and absolute)
	-->

	<case name="Ant with catalog file path (XSLT)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -lib "%XML_RESOLVER_JAR%" ^
        -Dcatalog="test\catalog\01\catalog-public.xml;%CD%\catalog\01\catalog-rewriteURI.xml" ^
        -Dxspec.xml="%CD%\catalog\catalog-01_stylesheet.xspec"
    call :verify_retval 0
    call :verify_line -16 x "     [xslt] passed: 4 / pending: 0 / failed: 0 / total: 4"
    call :verify_line -2  x "BUILD SUCCESSFUL"
	</case>

	<case name="Ant with catalog file path (XQuery)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -lib "%XML_RESOLVER_JAR%" ^
        -Dcatalog="test\catalog\01\catalog-public.xml;%CD%\catalog\01\catalog-rewriteURI.xml" ^
        -Dtest.type=q ^
        -Dxspec.xml="%CD%\catalog\catalog-01_query.xspec"
    call :verify_retval 0
    call :verify_line -16 x "     [xslt] passed: 2 / pending: 0 / failed: 0 / total: 2"
    call :verify_line -2  x "BUILD SUCCESSFUL"
	</case>

	<case name="Ant with catalog file path (Schematron)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -lib "%XML_RESOLVER_JAR%" ^
        -Dcatalog="test\catalog\01\catalog-public.xml;%CD%\catalog\01\catalog-rewriteURI.xml" ^
        -Dtest.type=s ^
        -Dxspec.xml="%CD%\catalog\catalog-01_schematron.xspec"
    call :verify_retval 0
    call :verify_line -16 x "     [xslt] passed: 4 / pending: 0 / failed: 0 / total: 4"
    call :verify_line -2  x "BUILD SUCCESSFUL"
	</case>

	<!--
		Catalog file URI (Ant)
		
			Test 'catalog' property containing multiple URIs (relative and absolute)
	-->

	<case name="Ant with catalog file URI (XSLT)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -lib "%XML_RESOLVER_JAR%" ^
        -Dcatalog="test/catalog/01/catalog-public.xml;file:///%CD:\=/%/catalog/01/catalog-rewriteURI.xml" ^
        -Dcatalog.is.uri=true ^
        -Dxspec.xml="%CD%\catalog\catalog-01_stylesheet.xspec"
    call :verify_retval 0
    call :verify_line -16 x "     [xslt] passed: 4 / pending: 0 / failed: 0 / total: 4"
    call :verify_line -2  x "BUILD SUCCESSFUL"
	</case>

	<case name="Ant with catalog file URI (XQuery)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -lib "%XML_RESOLVER_JAR%" ^
        -Dcatalog="test/catalog/01/catalog-public.xml;file:///%CD:\=/%/catalog/01/catalog-rewriteURI.xml" ^
        -Dcatalog.is.uri=true ^
        -Dtest.type=q ^
        -Dxspec.xml="%CD%\catalog\catalog-01_query.xspec"
    call :verify_retval 0
    call :verify_line -16 x "     [xslt] passed: 2 / pending: 0 / failed: 0 / total: 2"
    call :verify_line -2  x "BUILD SUCCESSFUL"
	</case>

	<case name="Ant with catalog file URI (Schematron)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -lib "%XML_RESOLVER_JAR%" ^
        -Dcatalog="test/catalog/01/catalog-public.xml;file:///%CD:\=/%/catalog/01/catalog-rewriteURI.xml" ^
        -Dcatalog.is.uri=true ^
        -Dtest.type=s ^
        -Dxspec.xml="%CD%\catalog\catalog-01_schematron.xspec"
    call :verify_retval 0
    call :verify_line -16 x "     [xslt] passed: 4 / pending: 0 / failed: 0 / total: 4"
    call :verify_line -2  x "BUILD SUCCESSFUL"
	</case>

	<!--
		Ant catalog.is.uri=true without setting catalog
	-->

	<case name="Ant catalog.is.uri=true without setting catalog">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dcatalog.is.uri=true ^
        -Dxspec.fail=false ^
        -Dxspec.xml="tutorial\escape-for-regex.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 5 / pending: 0 / failed: 1 / total: 6"
    call :verify_line -2 x "BUILD SUCCESSFUL"

    rem Temporary catalog should not be created
    call :run dir /b /o:n "%TEST_DIR%"
    call :verify_line_count 3
    call :verify_line 1 x escape-for-regex-compiled.xsl
    call :verify_line 2 x escape-for-regex-result.html
    call :verify_line 3 x escape-for-regex-result.xml
	</case>

	<!--
		xspec.fail (Ant)
	-->

	<case name="Ant with xspec.fail=false continues on test failure (XSLT)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dxspec.fail=false ^
        -Dxspec.xml="%CD%\..\tutorial\escape-for-regex.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 5 / pending: 0 / failed: 1 / total: 6"
    call :verify_line -2 x "BUILD SUCCESSFUL"
	</case>

	<case name="Ant with xspec.fail=true makes the build fail on test failure before cleanup (XSLT)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dclean.output.dir=true ^
        -Dxspec.fail=true ^
        -Dxspec.xml="%CD%\..\tutorial\escape-for-regex.xspec"
    call :verify_retval 1
    call :verify_line  * x "     [xslt] passed: 5 / pending: 0 / failed: 1 / total: 6"
    call :verify_line -4 x "BUILD FAILED"

    rem Verify the build fails before cleanup
    call :run dir /b /o:n "%TEST_DIR%"
    call :verify_line_count 4
	</case>

	<!--
		Ant verbose test.type
			Last char is capitalized to verify case-insensitiveness
	-->

	<case name="Ant verbose test.type (XSLT)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dtest.type=xslT ^
        -Dxspec.xml="%CD%\..\tutorial\escape-for-regex.xspec"
    call :verify_line * x "     [xslt] passed: 5 / pending: 0 / failed: 1 / total: 6"
	</case>

	<case name="Ant verbose test.type (XQuery)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dtest.type=xquerY ^
        -Dxspec.xml="%CD%\..\tutorial\xquery-tutorial.xspec"
    call :verify_line * x "     [xslt] passed: 1 / pending: 0 / failed: 0 / total: 1"
	</case>

	<case name="Ant verbose test.type (Schematron)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dclean.output.dir=true ^
        -Dtest.type=schematroN ^
        -Dxspec.xml="%CD%\..\tutorial\schematron\demo-01.xspec"
    call :verify_line * x "     [xslt] passed: 3 / pending: 0 / failed: 0 / total: 3"
	</case>

	<!--
		Ant various properties
	-->

	<case ifdef="SAXON_BUG_4696_FIXED" name="Ant for Schematron with various properties except catalog and xspec.fail">
    set "BUILD_XML=%WORK_DIR%\build %RANDOM%.xml"

    rem For testing -Dxspec.project.dir
    call :copy ..\build.xml "%BUILD_XML%"

    rem Use a fresh dir, to avoid a residue of default output dir
    set "TUTORIAL_COPY=%WORK_DIR%\tutorial %RANDOM%"
    call :mkdir "%TUTORIAL_COPY%"
    call :copy ..\tutorial\schematron\demo-03* "%TUTORIAL_COPY%"

    rem Run
    call :run ant ^
        -buildfile "%BUILD_XML%" ^
        -lib "%SAXON_JAR%" ^
        -Dclean.output.dir=true ^
        -Dxspec.project.dir="%CD%\.." ^
        -Dxspec.properties="%CD%\schematron\schematron.properties" ^
        -Dxspec.xml="%TUTORIAL_COPY%\demo-03.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 10 / pending: 1 / failed: 0 / total: 11"
    call :verify_line -2 x "BUILD SUCCESSFUL"

    rem Verify that -Dxspec.dir was honored and the default output dir was not created
    call :verify_leaf_dir_not_exist "%TUTORIAL_COPY%\xspec"

    rem Verify clean.output.dir=true
    call :verify_leaf_dir_not_exist "%TEST_DIR%"
	</case>

	<!--
		Catalog file path (CLI) (-catalog)
		
			Test -catalog specifying multiple file paths (relative and absolute)
	-->

	<case name="CLI with -catalog file path (XSLT)">
    set "SPACE_DIR=%WORK_DIR%\cat a log %RANDOM%"
    call :mkdir "%SPACE_DIR%\01"
    call :copy catalog\catalog-01* "%SPACE_DIR%"
    call :copy catalog\01          "%SPACE_DIR%\01"

    set "SAXON_CP=%SAXON_JAR%;%XML_RESOLVER_JAR%"
    call :run ..\bin\xspec.bat ^
        -catalog "catalog\01\catalog-public.xml;%SPACE_DIR%\01\catalog-rewriteURI.xml" ^
        "%SPACE_DIR%\catalog-01_stylesheet.xspec"
    call :verify_retval 0
    call :verify_line 18 x "passed: 4 / pending: 0 / failed: 0 / total: 4"
	</case>

	<case name="CLI with -catalog file path (XQuery)">
    set "SPACE_DIR=%WORK_DIR%\cat a log %RANDOM%"
    call :mkdir "%SPACE_DIR%\01"
    call :copy catalog\catalog-01* "%SPACE_DIR%"
    call :copy catalog\01          "%SPACE_DIR%\01"

    set "SAXON_CP=%SAXON_JAR%;%XML_RESOLVER_JAR%"
    call :run ..\bin\xspec.bat ^
        -catalog "catalog\01\catalog-public.xml;%SPACE_DIR%\01\catalog-rewriteURI.xml" ^
        -q ^
        "%SPACE_DIR%\catalog-01_query.xspec"
    call :verify_retval 0
    call :verify_line 9 x "passed: 2 / pending: 0 / failed: 0 / total: 2"
	</case>

	<case name="CLI with -catalog file path (Schematron)">
    set "SPACE_DIR=%WORK_DIR%\cat a log %RANDOM%"
    call :mkdir "%SPACE_DIR%\01"
    call :copy catalog\catalog-01* "%SPACE_DIR%"
    call :copy catalog\01          "%SPACE_DIR%\01"

    set "SAXON_CP=%SAXON_JAR%;%XML_RESOLVER_JAR%"
    call :run ..\bin\xspec.bat ^
        -catalog "catalog\01\catalog-public.xml;%SPACE_DIR%\01\catalog-rewriteURI.xml" ^
        -s ^
        "%SPACE_DIR%\catalog-01_schematron.xspec"
    call :verify_retval 0
    call :verify_line 23 x "passed: 4 / pending: 0 / failed: 0 / total: 4"
	</case>

	<!--
		Catalog file URI (CLI) (-catalog)

			Test -catalog specifying multiple file URIs (absolute, no relative)
	-->

	<case name="CLI with -catalog file URI (XSLT)">
    set "SAXON_CP=%SAXON_JAR%;%XML_RESOLVER_JAR%"
    call :run ..\bin\xspec.bat ^
        -catalog "file:///%CD:\=/%/catalog/01/catalog-public.xml;file:///%CD:\=/%/catalog/01/catalog-rewriteURI.xml" ^
        catalog\catalog-01_stylesheet.xspec
    call :verify_retval 0
    call :verify_line 18 x "passed: 4 / pending: 0 / failed: 0 / total: 4"
	</case>

	<case name="CLI with -catalog file URI (XQuery)">
    set "SAXON_CP=%SAXON_JAR%;%XML_RESOLVER_JAR%"
    call :run ..\bin\xspec.bat ^
        -catalog "file:///%CD:\=/%/catalog/01/catalog-public.xml;file:///%CD:\=/%/catalog/01/catalog-rewriteURI.xml" ^
        -q ^
        catalog\catalog-01_query.xspec
    call :verify_retval 0
    call :verify_line 9 x "passed: 2 / pending: 0 / failed: 0 / total: 2"
	</case>

	<case name="CLI with -catalog file URI (Schematron)">
    set "SAXON_CP=%SAXON_JAR%;%XML_RESOLVER_JAR%"
    call :run ..\bin\xspec.bat ^
        -catalog "file:///%CD:\=/%/catalog/01/catalog-public.xml;file:///%CD:\=/%/catalog/01/catalog-rewriteURI.xml" ^
        -s ^
        catalog\catalog-01_schematron.xspec
    call :verify_retval 0
    call :verify_line 23 x "passed: 4 / pending: 0 / failed: 0 / total: 4"
	</case>

	<!--
		Catalog file path (CLI) (XML_CATALOG)
		
			Test XML_CATALOG containing multiple file paths (relative and absolute)
	-->

	<case name="CLI with XML_CATALOG file path (XSLT)">
    set "SPACE_DIR=%WORK_DIR%\cat a log %RANDOM%"
    call :mkdir "%SPACE_DIR%\01"
    call :copy catalog\catalog-01* "%SPACE_DIR%"
    call :copy catalog\01          "%SPACE_DIR%\01"

    set "SAXON_CP=%SAXON_JAR%;%XML_RESOLVER_JAR%"
    set "XML_CATALOG=catalog\01\catalog-public.xml;%SPACE_DIR%\01\catalog-rewriteURI.xml"

    call :run ..\bin\xspec.bat "%SPACE_DIR%\catalog-01_stylesheet.xspec"
    call :verify_retval 0
    call :verify_line 18 x "passed: 4 / pending: 0 / failed: 0 / total: 4"
	</case>

	<case name="CLI with XML_CATALOG file path (XQuery)">
    set "SPACE_DIR=%WORK_DIR%\cat a log %RANDOM%"
    call :mkdir "%SPACE_DIR%\01"
    call :copy catalog\catalog-01* "%SPACE_DIR%"
    call :copy catalog\01          "%SPACE_DIR%\01"

    set "SAXON_CP=%SAXON_JAR%;%XML_RESOLVER_JAR%"
    set "XML_CATALOG=catalog\01\catalog-public.xml;%SPACE_DIR%\01\catalog-rewriteURI.xml"

    call :run ..\bin\xspec.bat -q "%SPACE_DIR%\catalog-01_query.xspec"
    call :verify_retval 0
    call :verify_line 9 x "passed: 2 / pending: 0 / failed: 0 / total: 2"
	</case>

	<case name="CLI with XML_CATALOG file path (Schematron)">
    set "SPACE_DIR=%WORK_DIR%\cat a log %RANDOM%"
    call :mkdir "%SPACE_DIR%\01"
    call :copy catalog\catalog-01* "%SPACE_DIR%"
    call :copy catalog\01          "%SPACE_DIR%\01"

    set "SAXON_CP=%SAXON_JAR%;%XML_RESOLVER_JAR%"
    set "XML_CATALOG=catalog\01\catalog-public.xml;%SPACE_DIR%\01\catalog-rewriteURI.xml"

    call :run ..\bin\xspec.bat -s "%SPACE_DIR%\catalog-01_schematron.xspec"
    call :verify_retval 0
    call :verify_line 23 x "passed: 4 / pending: 0 / failed: 0 / total: 4"
	</case>

	<!--
		Catalog file URI (CLI) (XML_CATALOG)
		
			Test XML_CATALOG containing multiple file URIs (absolute, no relative)
	-->

	<case name="CLI with XML_CATALOG file URI (XSLT)">
    set "SAXON_CP=%SAXON_JAR%;%XML_RESOLVER_JAR%"
    set "XML_CATALOG=file:///%CD:\=/%/catalog/01/catalog-public.xml;file:///%CD:\=/%/catalog/01/catalog-rewriteURI.xml"

    call :run ..\bin\xspec.bat "catalog\catalog-01_stylesheet.xspec"
    call :verify_retval 0
    call :verify_line 18 x "passed: 4 / pending: 0 / failed: 0 / total: 4"
	</case>

	<case name="CLI with XML_CATALOG file URI (XQuery)">
    set "SAXON_CP=%SAXON_JAR%;%XML_RESOLVER_JAR%"
    set "XML_CATALOG=file:///%CD:\=/%/catalog/01/catalog-public.xml;file:///%CD:\=/%/catalog/01/catalog-rewriteURI.xml"

    call :run ..\bin\xspec.bat -q "catalog\catalog-01_query.xspec"
    call :verify_retval 0
    call :verify_line 9 x "passed: 2 / pending: 0 / failed: 0 / total: 2"
	</case>

	<case name="CLI with XML_CATALOG file URI (Schematron)">
    set "SAXON_CP=%SAXON_JAR%;%XML_RESOLVER_JAR%"
    set "XML_CATALOG=file:///%CD:\=/%/catalog/01/catalog-public.xml;file:///%CD:\=/%/catalog/01/catalog-rewriteURI.xml"

    call :run ..\bin\xspec.bat -s "catalog\catalog-01_schematron.xspec"
    call :verify_retval 0
    call :verify_line 23 x "passed: 4 / pending: 0 / failed: 0 / total: 4"
	</case>

	<!--
		Catalog resolver and SAXON_HOME (CLI)
	-->

	<case name="invoking xspec using SAXON_HOME finds Saxon jar and XML Catalog Resolver jar">
    set "SAXON_HOME=%WORK_DIR%\saxon %RANDOM%"
    call :mkdir "%SAXON_HOME%"
    call :copy "%SAXON_JAR%"        "%SAXON_HOME%"
    call :copy "%XML_RESOLVER_JAR%" "%SAXON_HOME%\xml-resolver-1.2.jar"
    set SAXON_CP=

    rem To avoid "No license file found" warning on commercial Saxon
    set "SAXON_LICENSE=%SAXON_JAR%\..\saxon-license.lic"
    if exist "%SAXON_LICENSE%" call :copy "%SAXON_LICENSE%" "%SAXON_HOME%"

    call :run ..\bin\xspec.bat ^
        -catalog "catalog\01\catalog-public.xml;catalog\01\catalog-rewriteURI.xml" ^
        catalog\catalog-01_stylesheet.xspec
    call :verify_retval 0
    call :verify_line 18 x "passed: 4 / pending: 0 / failed: 0 / total: 4"
	</case>

	<!--
		Catalog Saxon bug https://saxonica.plan.io/issues/3025/
		
			This test must specify the catalog parameter as an absolute native file path.
	-->

	<case name="Catalog Saxon bug 3025 (CLI)">
    set "SAXON_CP=%SAXON_JAR%;%XML_RESOLVER_JAR%"
    call :run ..\bin\xspec.bat ^
        -catalog "%CD%\catalog\02\catalog.xml" ^
        catalog\catalog-02.xspec
    call :verify_retval 0
    call :verify_line 12 x "passed: 1 / pending: 0 / failed: 0 / total: 1"
	</case>

	<case name="Catalog Saxon bug 3025 (Ant)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -lib "%XML_RESOLVER_JAR%" ^
        -Dcatalog="%CD%\catalog\02\catalog.xml" ^
        -Dxspec.xml="%CD%\catalog\catalog-02.xspec"
    call :verify_retval 0
    call :verify_line -16 x "     [xslt] passed: 1 / pending: 0 / failed: 0 / total: 1"
    call :verify_line -2  x "BUILD SUCCESSFUL"
	</case>

	<!--
		saxon.custom.options (Ant)
	-->

	<case name="Ant for XSLT with saxon.custom.options">
    rem Test with a space in file name
    set "SAXON_CONFIG=%WORK_DIR%\saxon config %RANDOM%.xml"
    call :copy saxon-custom-options\config.xml "%SAXON_CONFIG%"

    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dsaxon.custom.options="-config:""%SAXON_CONFIG%"" -t" ^
        -Dxspec.xml="%CD%\saxon-custom-options\test.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 3 / pending: 0 / failed: 0 / total: 3"
    call :verify_line -2 x "BUILD SUCCESSFUL"

    rem Verify '-t'
    call :verify_line  * r "     \[java\] Memory used:"
	</case>

	<case name="Ant for XQuery with saxon.custom.options">
    rem Test with a space in file name
    set "SAXON_CONFIG=%WORK_DIR%\saxon config %RANDOM%.xml"
    call :copy saxon-custom-options\config.xml "%SAXON_CONFIG%"

    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dsaxon.custom.options="-config:""%SAXON_CONFIG%"" -t" ^
        -Dtest.type=q ^
        -Dxspec.xml="%CD%\saxon-custom-options\test.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 3 / pending: 0 / failed: 0 / total: 3"
    call :verify_line -2 x "BUILD SUCCESSFUL"

    rem Verify '-t'
    call :verify_line  * r "     \[java\] Memory used:"
	</case>

	<!--
		SAXON_CUSTOM_OPTIONS (CLI)
	-->

	<case name="invoking xspec for XSLT with SAXON_CUSTOM_OPTIONS">
    rem Test with a space in file name
    set "SAXON_CONFIG=%WORK_DIR%\saxon config %RANDOM%.xml"
    call :copy saxon-custom-options\config.xml "%SAXON_CONFIG%"

    set "SAXON_CUSTOM_OPTIONS=-config:"%SAXON_CONFIG%" -t"
    call :run ..\bin\xspec.bat saxon-custom-options\test.xspec
    call :verify_retval 0
    call :verify_line -3 x "passed: 3 / pending: 0 / failed: 0 / total: 3"

    rem Verify '-t'
    call :verify_line  * r "Memory used:"
	</case>

	<case name="invoking xspec for XQuery with SAXON_CUSTOM_OPTIONS">
    rem Test with a space in file name
    set "SAXON_CONFIG=%WORK_DIR%\saxon config %RANDOM%.xml"
    call :copy saxon-custom-options\config.xml "%SAXON_CONFIG%"

    set "SAXON_CUSTOM_OPTIONS=-config:"%SAXON_CONFIG%" -t"
    call :run ..\bin\xspec.bat -q saxon-custom-options\test.xspec
    call :verify_retval 0
    call :verify_line -3 x "passed: 3 / pending: 0 / failed: 0 / total: 3"

    rem Verify '-t'
    call :verify_line  * r "Memory used:"
	</case>

	<!--
		Coverage (Ant)
	-->

	<case ifdef="XSLT_SUPPORTS_COVERAGE" name="Ant for XSLT with coverage creates report files">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dxspec.coverage.enabled=true ^
        -Dxspec.xml="%CD%\..\tutorial\coverage\demo.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 1 / pending: 0 / failed: 0 / total: 1"
    call :verify_line -2 x "BUILD SUCCESSFUL"

    rem XML and HTML report file
    call :verify_exist "%TEST_DIR%\demo-result.xml"
    call :verify_exist "%TEST_DIR%\demo-result.html"

    rem Coverage report HTML file is created and contains CSS inline
    call :run java -jar "%SAXON_JAR%" ^
        -s:"%TEST_DIR%\demo-coverage.html" ^
        -xsl:check-html-css.xsl
    call :verify_retval 0
    call :verify_line 1 x "true"
	</case>

	<case name="Ant for XQuery with coverage fails">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dtest.type=q ^
        -Dxspec.coverage.enabled=true ^
        -Dxspec.xml="%CD%\..\tutorial\xquery-tutorial.xspec"
    call :verify_retval 1
    call :verify_line -4 x "BUILD FAILED"
    call :verify_line -3 r ".*Coverage is supported only for XSLT"
	</case>

	<case name="Ant for Schematron with coverage fails">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dtest.type=s ^
        -Dxspec.coverage.enabled=true ^
        -Dxspec.xml="%CD%\..\tutorial\schematron\demo-01.xspec"
    call :verify_retval 1
    call :verify_line -4 x "BUILD FAILED"
    call :verify_line -3 r ".*Coverage is supported only for XSLT"
	</case>

	<!--
		JUnit (Ant)
	-->

	<case name="Ant for XSLT with JUnit creates report files">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dxspec.junit.enabled=true ^
        -Dxspec.xml="%CD%\..\tutorial\escape-for-regex.xspec"
    call :verify_retval 1
    call :verify_line  * x "     [xslt] passed: 5 / pending: 0 / failed: 1 / total: 6"
    call :verify_line -4 x "BUILD FAILED"

    rem XML report file
    call :verify_exist "%TEST_DIR%\escape-for-regex-result.xml"

    rem HTML report file
    call :verify_exist "%TEST_DIR%\escape-for-regex-result.html"

    rem JUnit report file
    call :verify_exist "%TEST_DIR%\escape-for-regex-junit.xml"
	</case>

	<!--
		Import order #185
	-->

	<case name="Import order #185 (CLI)">
    call :run ..\bin\xspec.bat issue-185\import-1.xspec
    call :verify_retval 0
    call :verify_line  8 x "Scenario 1-1"
    call :verify_line  9 x "Scenario 1-2"
    call :verify_line 10 x "Scenario 1-3"
    call :verify_line 11 x "Scenario 2a-1"
    call :verify_line 12 x "Scenario 2a-2"
    call :verify_line 13 x "Scenario 2b-1"
    call :verify_line 14 x "Scenario 2b-2"
    call :verify_line 15 x "Scenario 3"
    call :verify_line 16 x ""
    call :verify_line 17 x "Formatting Report..."
	</case>

	<case name="Import order #185 (Ant)">
    set "ANT_LOG=%WORK_DIR%\ant.log"

    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -logfile "%ANT_LOG%" ^
        -Dxspec.xml="%CD%\issue-185\import-1.xspec"
    call :verify_retval 0

    call :run %SYSTEMROOT%\system32\find " Scenario " "%ANT_LOG%"
    call :verify_line_count 10
    call :verify_line  3 x "     [java] Scenario 1-1"
    call :verify_line  4 x "     [java] Scenario 1-2"
    call :verify_line  5 x "     [java] Scenario 1-3"
    call :verify_line  6 x "     [java] Scenario 2a-1"
    call :verify_line  7 x "     [java] Scenario 2a-2"
    call :verify_line  8 x "     [java] Scenario 2b-1"
    call :verify_line  9 x "     [java] Scenario 2b-2"
    call :verify_line 10 x "     [java] Scenario 3"
	</case>

	<!--
		Circular import #987
	-->

	<case name="Circular import #987 (CLI)">
    call :run ..\bin\xspec.bat issue-987_child.xspec
    call :verify_retval 0
    call :verify_line  8 x "Scenario in child"
    call :verify_line 10 x "Scenario in parent"
    call :verify_line 14 x "passed: 2 / pending: 0 / failed: 0 / total: 2"

    rem Use a fresh dir, to make the message line numbers predictable
    set "TEST_DIR=%TEST_DIR%\parent %RANDOM%"
    call :run ..\bin\xspec.bat issue-987_parent.xspec
    call :verify_retval 0
    call :verify_line  8 x "Scenario in parent"
    call :verify_line 10 x "Scenario in child"
    call :verify_line 14 x "passed: 2 / pending: 0 / failed: 0 / total: 2"
	</case>

	<case name="Circular import #987 (Ant)">
    rem
    rem Child
    rem
    set "ANT_LOG=%WORK_DIR%\ant_child.log"

    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -logfile "%ANT_LOG%" ^
        -Dxspec.xml="%CD%\issue-987_child.xspec"
    call :verify_retval 0

    call :run type "%ANT_LOG%"
    call :verify_line -16 x "     [xslt] passed: 2 / pending: 0 / failed: 0 / total: 2"

    call :run %SYSTEMROOT%\system32\find " Scenario in " "%ANT_LOG%"
    call :verify_line_count 4
    call :verify_line 3 x "     [java] Scenario in child"
    call :verify_line 4 x "     [java] Scenario in parent"

    rem
    rem Parent
    rem
    set "ANT_LOG=%WORK_DIR%\ant_parent.log"

    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -logfile "%ANT_LOG%" ^
        -Dxspec.xml="%CD%\issue-987_parent.xspec"
    call :verify_retval 0

    call :run type "%ANT_LOG%"
    call :verify_line -16 x "     [xslt] passed: 2 / pending: 0 / failed: 0 / total: 2"

    call :run %SYSTEMROOT%\system32\find " Scenario in " "%ANT_LOG%"
    call :verify_line_count 4
    call :verify_line 3 x "     [java] Scenario in parent"
    call :verify_line 4 x "     [java] Scenario in child"
	</case>

	<!--
		Boolean @test with any comparison factor
	-->

	<case name="Boolean @test with @as (XSLT)">
    call :run ..\bin\xspec.bat bad-assertion\boolean-test\as.xspec
    call :verify_retval 2
    call :verify_line 10 x "ERROR in x:expect ('Boolean @test with @as should be error'): Boolean @test must not be accompanied by @as, @href, @select, or child node."
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<case name="Boolean @test with @as (XQuery)">
    call :run ..\bin\xspec.bat -q bad-assertion\boolean-test\as.xspec
    call :verify_retval 2
    call :verify_line  8 r "  FOER0000[: ] ERROR in x:expect ('Boolean @test with @as should be error'): Boolean @test must$"
    call :verify_line  9 x "  not be accompanied by @as, @href, @select, or child node."
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<case name="Boolean @test with child node (XSLT)">
    call :run ..\bin\xspec.bat bad-assertion\boolean-test\child-node.xspec
    call :verify_retval 2
    call :verify_line 10 x "ERROR in x:expect ('Boolean @test with child node should be error'): Boolean @test must not be accompanied by @as, @href, @select, or child node."
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<case name="Boolean @test with child node (XQuery)">
    call :run ..\bin\xspec.bat -q bad-assertion\boolean-test\child-node.xspec
    call :verify_retval 2
    call :verify_line  8 r "  FOER0000[: ] ERROR in x:expect ('Boolean @test with child node should be error'): Boolean$"
    call :verify_line  9 x "  @test must not be accompanied by @as, @href, @select, or child node."
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<case name="Boolean @test with @href (XSLT)">
    call :run ..\bin\xspec.bat bad-assertion\boolean-test\href.xspec
    call :verify_retval 2
    call :verify_line 10 x "ERROR in x:expect ('Boolean @test with @href should be error'): Boolean @test must not be accompanied by @as, @href, @select, or child node."
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<case name="Boolean @test with @href (XQuery)">
    call :run ..\bin\xspec.bat -q bad-assertion\boolean-test\href.xspec
    call :verify_retval 2
    call :verify_line  8 r "  FOER0000[: ] ERROR in x:expect ('Boolean @test with @href should be error'): Boolean @test$"
    call :verify_line  9 x "  must not be accompanied by @as, @href, @select, or child node."
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<case name="Boolean @test with @select (XSLT)">
    call :run ..\bin\xspec.bat bad-assertion\boolean-test\select.xspec
    call :verify_retval 2
    call :verify_line 10 x "ERROR in x:expect ('Boolean @test with @select should be error'): Boolean @test must not be accompanied by @as, @href, @select, or child node."
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<case name="Boolean @test with @select (XQuery)">
    call :run ..\bin\xspec.bat -q bad-assertion\boolean-test\select.xspec
    call :verify_retval 2
    call :verify_line  8 r "  FOER0000[: ] ERROR in x:expect ('Boolean @test with @select should be error'): Boolean @test$"
    call :verify_line  9 x "  must not be accompanied by @as, @href, @select, or child node."
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<!--
		Non-boolean @test with no comparison factors
	-->

	<case name="Non-boolean @test (empty sequence) with no comparison factors (XSLT)">
    call :run ..\bin\xspec.bat bad-assertion\non-boolean-test\empty.xspec
    call :verify_retval 2
    call :verify_line 10 x "ERROR in x:expect ('Non-boolean @test (empty sequence) with no comparison factors should be error (even if child::x:label exists)'): Non-boolean @test must be accompanied by @as, @href, @select, or child node."
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<case name="Non-boolean @test (empty sequence) with no comparison factors (XQuery)">
    call :run ..\bin\xspec.bat -q bad-assertion\non-boolean-test\empty.xspec
    call :verify_retval 2
    call :verify_line  8 r "  FOER0000[: ] ERROR in x:expect ('Non-boolean @test (empty sequence) with no comparison$"
    call :verify_line  9 x "  factors should be error (even if child::x:label exists)'): Non-boolean @test must be"
    call :verify_line 10 x "  accompanied by @as, @href, @select, or child node."
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<case name="Non-boolean @test (multiple xs:boolean) with no comparison factors (XSLT)">
    call :run ..\bin\xspec.bat bad-assertion\non-boolean-test\multiple-boolean.xspec
    call :verify_retval 2
    call :verify_line 10 x "ERROR in x:expect ('Non-boolean @test (multiple xs:boolean) with no comparison factors should be error (even if child::x:label exists)'): Non-boolean @test must be accompanied by @as, @href, @select, or child node."
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<case name="Non-boolean @test (multiple xs:boolean) with no comparison factors (XQuery)">
    call :run ..\bin\xspec.bat -q bad-assertion\non-boolean-test\multiple-boolean.xspec
    call :verify_retval 2
    call :verify_line  8 r "  FOER0000[: ] ERROR in x:expect ('Non-boolean @test (multiple xs:boolean) with no comparison$"
    call :verify_line  9 x "  factors should be error (even if child::x:label exists)'): Non-boolean @test must be"
    call :verify_line 10 x "  accompanied by @as, @href, @select, or child node."
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<case name="Non-boolean @test (node) with no comparison factors (XSLT)">
    call :run ..\bin\xspec.bat bad-assertion\non-boolean-test\node.xspec
    call :verify_retval 2
    call :verify_line 10 x "ERROR in x:expect ('Non-boolean @test (node) with no comparison factors should be error (even if child::x:label exists)'): Non-boolean @test must be accompanied by @as, @href, @select, or child node."
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<case name="Non-boolean @test (node) with no comparison factors (XQuery)">
    call :run ..\bin\xspec.bat -q bad-assertion\non-boolean-test\node.xspec
    call :verify_retval 2
    call :verify_line  8 r "  FOER0000[: ] ERROR in x:expect ('Non-boolean @test (node) with no comparison factors should$"
    call :verify_line  9 x "  be error (even if child::x:label exists)'): Non-boolean @test must be accompanied by @as,"
    call :verify_line 10 x "  @href, @select, or child node."
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<!--
		Obsolete x:space
	-->

	<case name="Obsolete x:space">
    call :run ..\bin\xspec.bat obsolete-space\test.xspec
    call :verify_retval 2
    call :verify_line  * x "ERROR in x:space (under 'Using x:space'): x:space is obsolete. Use x:text instead."
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<!--
		#423
	-->

	<case ifdef="XMLCALABASH_CP" name="XSLT selecting nodes without context should be error (XProc) #423">
    call :run java -cp "%XMLCALABASH_CP%" com.xmlcalabash.drivers.Main ^
        -i source=issue-423/test.xspec ^
        -p xspec-home="file:///%PARENT_DIR_ABS:\=/%/" ^
        ..\src\harnesses\saxon\saxon-xslt-harness.xproc
    call :verify_retval 1
    call :verify_line -3 r "..*err:XPDY0002:"
    call :verify_line -1 r "ERROR:"
	</case>

	<case ifdef="XMLCALABASH_CP" name="XQuery selecting nodes without context should be error (XProc) #423">
    call :run java -cp "%XMLCALABASH_CP%" com.xmlcalabash.drivers.Main ^
        -i source=issue-423/test.xspec ^
        -p xspec-home="file:///%PARENT_DIR_ABS:\=/%/" ^
        ..\src\harnesses\saxon\saxon-xquery-harness.xproc
    call :verify_retval 1
    call :verify_line  * r "..*[: ]XPDY0002[: ]"
    call :verify_line -1 r "ERROR:"
	</case>

	<case name="XSLT selecting nodes without context should be error (Ant) #423">
    rem Should be error even when xspec.fail=false
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dxspec.fail=false ^
        -Dxspec.xml="%CD%\..\test\issue-423\test.xspec"
    call :verify_retval 2
    call :verify_line  * r "     \[java\]   XPDY0002[: ]"
    call :verify_line -4 x "BUILD FAILED"
	</case>

	<case name="XSLT selecting nodes without context should be error (CLI) #423">
    call :run ..\bin\xspec.bat issue-423\test.xspec
    call :verify_retval 2
    call :verify_line  * r "  XPDY0002[: ]"
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<case ifdef="XSLT_SUPPORTS_COVERAGE" name="XSLT selecting nodes without context should be error (CLI -c) #423">
    call :run ..\bin\xspec.bat -c issue-423\test.xspec
    call :verify_retval 2
    call :verify_line  * r "  XPDY0002[: ]"
    call :verify_line -1 x "*** Error collecting test coverage data"
	</case>

	<case name="XQuery selecting nodes without context should be error (CLI) #423">
    call :run ..\bin\xspec.bat -q issue-423\test.xspec
    call :verify_retval 2
    call :verify_line  * r "  XPDY0002[: ]"
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<!--
		@xquery-version
	-->

	<case name="Default @xquery-version">
    call :run ..\bin\xspec.bat -q ..\tutorial\xquery-tutorial.xspec
    call :verify_retval 0

    call :run type "%TEST_DIR%\xquery-tutorial-compiled.xq"
    call :verify_line 1 r "xquery version \"3\.1\";$"
	</case>

	<case name="Invalid @xquery-version should be error">
    call :run ..\bin\xspec.bat -q xquery-version\invalid.xspec
    call :verify_retval 2
    call :verify_line  * r ".*XQST0031..*InVaLiD"
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<!--
		report-css-uri
	-->

	<case name="report-css-uri for HTML report file">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dxspec.fail=false ^
        -Dxspec.result.html.css="%CD%\check-html-css.css" ^
        -Dxspec.xml="%CD%\..\tutorial\escape-for-regex.xspec"
    call :verify_retval 0

    call :run java -jar "%SAXON_JAR%" ^
        -s:"%TEST_DIR%\escape-for-regex-result.html" ^
        -xsl:check-html-css.xsl ^
        STYLE-CONTAINS="This CSS file is for testing report-css-uri parameter"
    call :verify_retval 0
    call :verify_line 1 x "true"
	</case>

	<case ifdef="XSLT_SUPPORTS_COVERAGE" name="report-css-uri for coverage report HTML file">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dxspec.coverage.enabled=true ^
        -Dxspec.coverage.html.css="%CD%\check-html-css.css" ^
        -Dxspec.xml="%CD%\..\tutorial\coverage\demo.xspec"
    call :verify_retval 0

    call :run java -jar "%SAXON_JAR%" ^
        -s:"%TEST_DIR%\demo-coverage.html" ^
        -xsl:check-html-css.xsl ^
        STYLE-CONTAINS="This CSS file is for testing report-css-uri parameter"
    call :verify_retval 0
    call :verify_line 1 x "true"
	</case>

	<!--
		#522
	-->

	<case name="Error message when source is not XSpec #522">
    call :run ..\bin\xspec.bat do-nothing.xsl
    call :verify_retval 2
    call :verify_line 5 x "ERROR: Source document is not XSpec. /x:description is missing. Supplied source has /xsl:stylesheet instead."
	</case>

	<!--
		Missing @stylesheet, @query, @schematron
		
			Use no-prefix*.xspec to test the element name in the error message
	-->

	<case name="Error message when @stylesheet is missing">
    call :run ..\bin\xspec.bat no-prefix_schematron.xspec
    call :verify_retval 2
    call :verify_line 5 x "ERROR in Q{http://www.jenitennison.com/xslt/xspec}description: Missing @stylesheet."
	</case>

	<case name="Error message when @query is missing">
    call :run ..\bin\xspec.bat -q no-prefix_schematron.xspec
    call :verify_retval 2
    call :verify_line 5 x "ERROR in Q{http://www.jenitennison.com/xslt/xspec}description: Missing @query."
	</case>

	<case name="Error message when @schematron is missing">
    call :run ..\bin\xspec.bat -s no-prefix.xspec
    call :verify_retval 2
    call :verify_line 5 x "ERROR in Q{http://www.jenitennison.com/xslt/xspec}description: Missing @schematron."
	</case>

	<!--
		x:param in XSpec namespace
	-->

	<case name="Error on x:param in XSpec namespace (x:context/x:param with lexical QName)">
    call :run ..\bin\xspec.bat reserved-vardecl-name\param\context-param_lexical-qname.xspec
    call :verify_retval 2
    call :verify_line 5 x "ERROR in x:param (named u:context-param) (under 'x:context/x:param/@name has lexical QName in XSpec namespace'): Name u:context-param must not use the XSpec namespace."
	</case>

	<case name="Error on x:param in XSpec namespace (x:description/x:param with URIQualifiedName)">
    call :run ..\bin\xspec.bat reserved-vardecl-name\param\description-param_uqname.xspec
    call :verify_retval 2
    call :verify_line 5 x "ERROR in x:param (named Q{http://www.jenitennison.com/xslt/xspec}description-param): Name Q{http://www.jenitennison.com/xslt/xspec}description-param must not use the XSpec namespace."
	</case>

	<case name="Error on x:param in XSpec namespace (function x:param with lexical QName)">
    call :run ..\bin\xspec.bat reserved-vardecl-name\param\function-param_lexical-qname.xspec
    call :verify_retval 2
    call :verify_line 5 x "ERROR in x:param (named u:function-param) (under 'x:call[@function]/x:param/@name has lexical QName in XSpec namespace'): Name u:function-param must not use the XSpec namespace."
	</case>

	<case name="Error on x:param in XSpec namespace (template-call x:param with URIQualifiedName)">
    call :run ..\bin\xspec.bat reserved-vardecl-name\param\template-call-param_uqname.xspec
    call :verify_retval 2
    call :verify_line 5 x "ERROR in x:param (named Q{http://www.jenitennison.com/xslt/xspec}template-call-param) (under 'x:call[@template]/x:param/@name has URIQualifiedName in XSpec namespace'): Name Q{http://www.jenitennison.com/xslt/xspec}template-call-param must not use the XSpec namespace."
	</case>

	<!--
		x:variable in XSpec namespace
	-->

	<case name="Error on x:variable in XSpec namespace (global x:variable with lexical QName)">
    call :run ..\bin\xspec.bat reserved-vardecl-name\variable\global-variable_lexical-qname.xspec
    call :verify_retval 2
    call :verify_line 5 x "ERROR in x:variable (named u:global-variable): Name u:global-variable must not use the XSpec namespace."
	</case>

	<case name="Error on x:variable in XSpec namespace (local x:variable with URIQualifiedName)">
    call :run ..\bin\xspec.bat reserved-vardecl-name\variable\local-variable_uqname.xspec
    call :verify_retval 2
    call :verify_line 5 x "ERROR in x:variable (named Q{http://www.jenitennison.com/xslt/xspec}local-variable) (under 'x:scenario/x:variable/@name has URIQualifiedName in XSpec namespace'): Name Q{http://www.jenitennison.com/xslt/xspec}local-variable must not use the XSpec namespace."
	</case>

    <!--
		x:param and x:variable should be evaluated only once
	-->

	<case name="x:param should be evaluated only once">
    call :run ..\bin\xspec.bat ..\tutorial\under-the-hood\compilation-params-scope.xspec
    call :verify_retval 0
    call :verify_line  6 x "Running Tests..."
    call :verify_line  7 r "Testing with SAXON "
    call :verify_line  8 x "outer scenario"
    call :verify_line  9 x "* [1]: xs:string: value-2"
    call :verify_line 10 x "..inner scenario"
    call :verify_line 11 x "* [1]: xs:string: value-3"
    call :verify_line 12 x "* [1]: xs:string: value-1"
    call :verify_line 13 x "1st expect"
    call :verify_line 14 x ""
    call :verify_line 15 x "Formatting Report..."
	</case>

	<case name="x:variable should be evaluated only once (XSLT)">
    call :run ..\bin\xspec.bat ..\tutorial\under-the-hood\compilation-variables-scope.xspec
    call :verify_retval 0
    call :verify_line  6 x "Running Tests..."
    call :verify_line  7 r "Testing with SAXON "
    call :verify_line  8 x "outer scenario"
    call :verify_line  9 x "* [1]: xs:string: value-2"
    call :verify_line 10 x "..inner scenario"
    call :verify_line 11 x "* [1]: xs:string: value-3"
    call :verify_line 12 x "* [1]: xs:string: value-4"
    call :verify_line 13 x "1st expect"
    call :verify_line 14 x "* [1]: xs:string: value-1"
    call :verify_line 15 x "* [1]: xs:string: value-5"
    call :verify_line 16 x "2nd expect"
    call :verify_line 17 x ""
    call :verify_line 18 x "Formatting Report..."
	</case>

	<case name="x:variable should be evaluated only once (XQuery)">
    call :run ..\bin\xspec.bat -q ..\tutorial\under-the-hood\compilation-variables-scope.xspec
    call :verify_retval 0
    call :verify_line  6 x "Running Tests..."
    call :verify_line  7 x "* [1]: xs:string: value-2"
    call :verify_line  8 x "* [1]: xs:string: value-3"
    call :verify_line  9 x "* [1]: xs:string: value-4"
    call :verify_line 10 x "* [1]: xs:string: value-1"
    call :verify_line 11 x "* [1]: xs:string: value-5"
    call :verify_line 12 x ""
    call :verify_line 13 x "Formatting Report..."
	</case>

	<!--
		Deprecated Saxon version
	-->

	<case name="Deprecated Saxon version">
    call :run ..\bin\xspec.bat ..\tutorial\escape-for-regex.xspec
    call :verify_retval 0

    if "%SAXON_VERSION:~0,4%"=="9.9.TODO" (
        call :verify_line 4 x "WARNING: Saxon version 9.9 is not recommended. Consider migrating to Saxon 10."
    ) else (
        call :verify_line 4 x " "
    )

    call :verify_line 6 x "Running Tests..."
    call :verify_line 7 r "Testing with SAXON [EHP]E [1-9][0-9]*\.[1-9][0-9]*"
	</case>

	<!--
		No warning on Ant
	-->

	<case name="No warning on Ant (XSLT) #633">
    if "%SAXON_VERSION:~0,4%"=="9.9.TODO" (
        call :skip "Always expect a deprecation warning on Saxon 9.9"
        goto :EOF
    )

    set "ANT_LOG=%WORK_DIR%\ant.log"

    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -logfile "%ANT_LOG%" ^
        -verbose ^
        -Dtest.type=t ^
        -Dxspec.xml="%CD%\xspec-uri.xspec"
    call :verify_retval 0
    call :verify_exist "%ANT_LOG%"

    call :run %SYSTEMROOT%\system32\find /i "warning" "%ANT_LOG%"
    call :verify_retval 1
	</case>

	<case name="No warning on Ant (XQuery) #633">
    if "%SAXON_VERSION:~0,4%"=="9.9.TODO" (
        call :skip "Always expect a deprecation warning on Saxon 9.9"
        goto :EOF
    )

    set "ANT_LOG=%WORK_DIR%\ant.log"

    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -logfile "%ANT_LOG%" ^
        -verbose ^
        -Dtest.type=q ^
        -Dxspec.xml="%CD%\xspec-uri.xspec"
    call :verify_retval 0
    call :verify_exist "%ANT_LOG%"

    call :run %SYSTEMROOT%\system32\find /i "warning" "%ANT_LOG%"
    call :verify_retval 1
	</case>

	<case name="No warning on Ant (Schematron) #633">
    if "%SAXON_VERSION:~0,4%"=="9.9.TODO" (
        call :skip "Always expect a deprecation warning on Saxon 9.9"
        goto :EOF
    )

    set "ANT_LOG=%WORK_DIR%\ant.log"

    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -logfile "%ANT_LOG%" ^
        -verbose ^
        -Dtest.type=s ^
        -Dxspec.xml="%CD%\xspec-uri.xspec"
    call :verify_retval 0
    call :verify_exist "%ANT_LOG%"

    call :run %SYSTEMROOT%\system32\find /i "warning" "%ANT_LOG%"
    call :verify_retval 1
	</case>

	<!--
		@catch should not catch error outside SUT
	-->

	<case name="@catch should not catch error outside SUT (XSLT)">
    call :run ..\bin\xspec.bat catch\compiler-error.xspec
    call :verify_retval 2
    call :verify_line  5 r "ERROR in x:scenario .*"
    call :verify_line -1 x "*** Error compiling the test suite"

    call :run ..\bin\xspec.bat catch\error-in-context-avt-for-template-call.xspec
    call :verify_retval 2
    call :verify_line  * r "  error-code-of-my-context-avt-for-template-call[: ] Error signalled .*"
    call :verify_line -1 x "*** Error running the test suite"

    call :run ..\bin\xspec.bat catch\error-in-context-param-for-matching-template.xspec
    call :verify_retval 2
    call :verify_line  * r "  error-code-of-my-context-param-for-matching-template[: ] Error signalled .*"
    call :verify_line -1 x "*** Error running the test suite"

    call :run ..\bin\xspec.bat catch\error-in-function-call-param.xspec
    call :verify_retval 2
    call :verify_line  * r "  error-code-of-my-function-call-param[: ] Error signalled .*"
    call :verify_line -1 x "*** Error running the test suite"

    call :run ..\bin\xspec.bat catch\error-in-template-call-param.xspec
    call :verify_retval 2
    call :verify_line  * r "  error-code-of-my-template-call-param[: ] Error signalled .*"
    call :verify_line -1 x "*** Error running the test suite"

    call :run ..\bin\xspec.bat catch\error-in-variable.xspec
    call :verify_retval 2
    call :verify_line  * r "  error-code-of-my-variable[: ] Error signalled .*"
    call :verify_line -1 x "*** Error running the test suite"

    call :run ..\bin\xspec.bat catch\static-error-in-compiled-test.xspec
    call :verify_retval 2
    call :verify_line  * r ".*XPST0017[: ]"
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<case name="@catch should not catch error outside SUT (XQuery)">
    call :run ..\bin\xspec.bat -q catch\compiler-error.xspec
    call :verify_retval 2
    call :verify_line 5 r "ERROR in x:scenario .*"

    call :run ..\bin\xspec.bat -q catch\error-in-function-call-param.xspec
    call :verify_retval 2
    call :verify_line * r "  error-code-of-my-function-call-param[: ] Error signalled .*"

    call :run ..\bin\xspec.bat -q catch\error-in-variable.xspec
    call :verify_retval 2
    call :verify_line * r "  error-code-of-my-variable[: ] Error signalled .*"

    call :run ..\bin\xspec.bat -q catch\static-error-in-compiled-test.xspec
    call :verify_retval 2
    call :verify_line * r ".*XPST0017[: ]"
	</case>

	<!--
		Error in SUT should not be caught by default
	-->

	<case name="Error in SUT should not be caught by default (XSLT)">
    call :run ..\bin\xspec.bat catch\no-by-default.xspec
    call :verify_retval 2
    call :verify_line * r "  my-error-code[: ] Error signalled .*"
	</case>

	<case name="Error in SUT should not be caught by default (XQuery)">
    call :run ..\bin\xspec.bat -q catch\no-by-default.xspec
    call :verify_retval 2
    call :verify_line * r "  my-error-code[: ] Error signalled .*"
	</case>

	<!--
		Importing Ant build file
	-->

	<case name="Importing Ant build file">
    call :run ant ^
        -buildfile ant-import\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dxspec.xml="%CD%\..\tutorial\escape-for-regex.xspec"
    call :verify_retval 0
    call :verify_line -15 x "     [xslt] passed: 5 / pending: 0 / failed: 1 / total: 6"
    call :verify_line -8  x "     [echo] Target overridden!"
    call :verify_line -2  x "BUILD SUCCESSFUL"
	</case>

	<!--
		#655
	-->

	<case ifdef="XSLT_SUPPORTS_COVERAGE" name="Trace listener should not hardcode output dir #655">
    rem TEST_DIR should not contain "xspec". (Assume TEMP does not contain it.)
    set "TEST_DIR=%TEMP%\XSpec-655 %RANDOM%"

    call :run ..\bin\xspec.bat -c ..\tutorial\coverage\demo.xspec
    call :verify_retval 0

    call :run %SYSTEMROOT%\system32\find "&lt;pre>01:" "%TEST_DIR%\demo-coverage.html"
    call :verify_retval 0
    call :verify_line_count 4

    call :rmdir "%TEST_DIR%"
	</case>

	<!--
		x:like errors
	-->

	<case name="x:like error (scenario not found)">
    call :run ..\bin\xspec.bat like\none.xspec
    call :verify_retval 2
    call :verify_line 5 x "ERROR in x:like (labeled 'none') (under 'no scenario matched'): Scenario not found."
	</case>

	<case name="x:like error (multiple scenarios)">
    call :run ..\bin\xspec.bat like\multiple.xspec
    call :verify_retval 2
    call :verify_line 5 x "ERROR in x:like (labeled 'shared scenario') (under 'multiple scenarios matched'): 2 scenarios found with same label."
	</case>

	<case name="x:like error (infinite loop)">
    call :run ..\bin\xspec.bat like\loop.xspec
    call :verify_retval 2
    call :verify_line 5 x "ERROR in x:like (labeled 'parent scenario') (under 'parent scenario this scenario'): Reference to ancestor scenario creates infinite loop."
	</case>

	<!--
		Override ID generation templates
	-->

	<case name="Override ID generation (XSLT)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dxspec.xslt.compiler.xsl="%CD%\override-id\compile-xslt-tests.xsl" ^
        -Dxspec.fail=false ^
        -Dxspec.xml="%CD%\..\tutorial\escape-for-regex.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 5 / pending: 0 / failed: 1 / total: 6"
    call :verify_line -2 x "BUILD SUCCESSFUL"

    call :run type "%TEST_DIR%\escape-for-regex-compiled.xsl"
    call :verify_line * r "..*Q{http://www.jenitennison.com/xslt/xspec}overridden-xslt-scenario-id-"
    call :verify_line * r "..*Q{http://www.jenitennison.com/xslt/xspec}overridden-xslt-expect-id-"
	</case>

	<case name="Override ID generation (XQuery)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dtest.type=q ^
        -Dxspec.xquery.compiler.xsl="%CD%\override-id\compile-xquery-tests.xsl" ^
        -Dxspec.xml="%CD%\..\tutorial\xquery-tutorial.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 1 / pending: 0 / failed: 0 / total: 1"
    call :verify_line -2 x "BUILD SUCCESSFUL"

    call :run type "%TEST_DIR%\xquery-tutorial-compiled.xq"
    call :verify_line * r "declare function local:overridden-xquery-scenario-id-"
    call :verify_line * r "declare function local:overridden-xquery-expect-id-"
	</case>

    <!--
		Custom HTML reporter (CLI)
		
			Ant is tested by XSPEC_HOME/test/end-to-end/cases/format-xspec-report-folding.xspec
	-->

	<case name="Custom HTML reporter (CLI)">
    set HTML_REPORTER_XSL=format-xspec-report-messaging.xsl
    call :run ..\bin\xspec.bat ..\tutorial\escape-for-regex.xspec
    call :verify_retval 0
    call :verify_line -16 x "--- Actual Result ---"
    call :verify_line  -9 x "--- Expected Result ---"
	</case>

	<!--
		Custom coverage reporter (CLI)
		
			Ant is tested by XSPEC_HOME/test/end-to-end/cases/custom-coverage-report.xspec
	-->

	<case ifdef="XSLT_SUPPORTS_COVERAGE" name="Custom coverage reporter (CLI)">
    set COVERAGE_REPORTER_XSL=custom-coverage-report.xsl
    call :run ..\bin\xspec.bat -c ..\tutorial\coverage\demo.xspec
    call :verify_retval 0

    call :run type "%TEST_DIR%\demo-coverage.html"
    call :verify_line * r "..*--Customized coverage report--..*"
	</case>

	<!--
		Broken x:import
	-->

	<case name="x:import with unreachable @href">
    call :run ..\bin\xspec.bat import\file-not-found.xspec
    call :verify_retval 2
    call :verify_line  * r "  FODC0002[: ] I/O error reported by XML parser processing$"
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="x:import without @href">
    call :run ..\bin\xspec.bat import\no-href.xspec
    call :verify_retval 2
    call :verify_line  * r "  XPDY0050[: ] An empty sequence is not allowed as the value in 'treat as' expression$"
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<!--
		Error message from x:compile-scenario template (XSLT)
	-->

	<case name="x:context both with @href and content">
    call :run ..\bin\xspec.bat error-compiling-scenario\context-both-href-and-content.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:scenario ('x:context both with @href and content'): Can't set the context document using both the href attribute and the content of the x:context element"
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="x:call both with @function and @template">
    call :run ..\bin\xspec.bat error-compiling-scenario\call-both-function-and-template.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:scenario ('x:call both with @function and @template'): Can't call a function and a template at the same time"
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="x:call[@function] with x:context">
    call :run ..\bin\xspec.bat error-compiling-scenario\function-with-context.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:scenario ('x:call[@function] with x:context'): Setting a context for calling a function is supported only when /x:description has @run-as='external'."
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="x:expect without action">
    call :run ..\bin\xspec.bat error-compiling-scenario\expect-without-action.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:scenario ('x:expect without action'): There are x:expect but no x:call or x:context has been given"
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<!--
		Error message from x:compile-scenario template (XQuery)
	-->

	<case name="x:context (XQuery)">
    call :run ..\bin\xspec.bat -q error-compiling-scenario\xquery_context.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:scenario ('x:context'): x:context not supported for XQuery"
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="x:call/@template (XQuery)">
    call :run ..\bin\xspec.bat -q error-compiling-scenario\xquery_template-call.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:scenario ('x:call/@template'): x:call/@template not supported for XQuery"
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="No x:call">
    call :run ..\bin\xspec.bat -q error-compiling-scenario\xquery_no-call.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:scenario ('No x:call'): There are x:expect but no x:call"
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<!--
		$x:saxon-config is not a Saxon config
	-->

	<case name="$x:saxon-config is not a Saxon config">
    call :run ..\bin\xspec.bat x-saxon-config\test.xspec
    call :verify_retval 2
    call :verify_line  9 x "ERROR: $Q{http://www.jenitennison.com/xslt/xspec}saxon-config does not appear to be a Saxon configuration"
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<!--
		Duplicate param name
	-->

	<case name="Duplicate function-call param name (XSLT)">
    call :run ..\bin\xspec.bat dup-param-name\function-call.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:scenario ('Multiple instances of function-param (i.e. //x:call[@function]/x:param) of the same name'): Duplicate parameter name, Q{}left, used in x:call."
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="Duplicate function-call param name (XQuery)">
    call :run ..\bin\xspec.bat -q dup-param-name\function-call.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:scenario ('Multiple instances of function-param (i.e. //x:call[@function]/x:param) of the same name'): Duplicate parameter name, Q{}left, used in x:call."
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="Duplicate context param name">
    call :run ..\bin\xspec.bat dup-param-name\context.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:scenario ('Multiple instances of context template-param (i.e. //x:context/x:param) of the same name'): Duplicate parameter name, Q{}left, used in x:context."
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="Duplicate template-call param name">
    call :run ..\bin\xspec.bat dup-param-name\template-call.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:scenario ('Multiple instances of template-call template-param (i.e. //x:call[@template]/x:param) of the same name'): Duplicate parameter name, Q{}left, used in x:call."
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<!--
		Static param not allowed
	-->

	<case name="Static param not allowed (XSLT without @run-as=external)">
    call :run ..\bin\xspec.bat param-disallowed\description-param\static-param\stylesheet.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:param (named p): Enabling @static is supported only when /x:description has @run-as='external'."
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="Static param not allowed (Schematron)">
    call :run ..\bin\xspec.bat -s param-disallowed\description-param\static-param\schematron.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:param (named p): Enabling @static is not supported for Schematron."
    call :verify_line -1 x "*** Error converting Schematron into XSLT"
	</case>

	<!--
		Description param not allowed
	-->

	<case name="Description param not allowed (XQuery)">
    call :run ..\bin\xspec.bat -q param-disallowed\description-param\query.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:param (named p): Q{http://www.jenitennison.com/xslt/xspec}description has x:param, which is not supported for XQuery."
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<!--
		Scenario param not allowed
	-->

	<case name="Scenario param not allowed (XSLT without @run-as=external)">
    call :run ..\bin\xspec.bat param-disallowed\scenario-param\stylesheet.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:param (named p) (under 'x:scenario/child::x:param'): x:scenario has x:param, which is supported only when /Q{http://www.jenitennison.com/xslt/xspec}description has @run-as='external'."
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="Scenario param not allowed (XQuery)">
    call :run ..\bin\xspec.bat -q param-disallowed\scenario-param\query.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:param (named p) (under 'x:scenario/child::x:param'): Q{http://www.jenitennison.com/xslt/xspec}scenario has x:param, which is not supported for XQuery."
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="Scenario param not allowed (Schematron without @run-as=external)">
    call :run ..\bin\xspec.bat -s param-disallowed\scenario-param\schematron.xspec
    call :verify_retval 2
    call :verify_line 10 x "ERROR in x:param (named p) (under 'x:scenario/child::x:param'): x:scenario has x:param, which is supported only when /Q{http://www.jenitennison.com/xslt/xspec}description has @run-as='external'."
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<!--
		x:param conflicting with another variable declaration
	-->

	<case name="Description x:param conflicting with x:param">
    call :run ..\bin\xspec.bat conflicting-vardecl\description-param\param.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:param (named Q{http://example.org/ns/my}foo): Name conflicts with x:param (named my:foo)"
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="Description x:param conflicting with x:variable">
    call :run ..\bin\xspec.bat conflicting-vardecl\description-param\variable.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:param (named my:foo): Name conflicts with x:variable (named Q{http://example.org/ns/my}foo)"
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="Scenario x:param conflicting with ancestor scenario x:variable">
    call :run ..\bin\xspec.bat conflicting-vardecl\scenario-param\ancestor-scenario-variable.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:param (named my:foo) (under 'scenario with child::x:variable in-between scenario scenario with child::x:param'): Name conflicts with x:variable (named my:foo)"
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="Scenario x:param conflicting with description x:variable">
    call :run ..\bin\xspec.bat conflicting-vardecl\scenario-param\description-variable.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:param (named my:foo) (under 'x:scenario/x:param'): Name conflicts with x:variable (named Q{http://example.org/ns/my}foo)"
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="Scenario x:param conflicting with preceding-sibling x:variable">
    call :run ..\bin\xspec.bat conflicting-vardecl\scenario-param\preceding-sibling-variable.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:param (named my2:foo) (under 'x:scenario/x:param'): Name conflicts with x:variable (named my1:foo)"
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<!--
		x:variable conflicting with another variable declaration
	-->

	<case name="Description x:variable conflicting with x:param">
    call :run ..\bin\xspec.bat conflicting-vardecl\description-variable\param.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:variable (named Q{http://example.org/ns/my}foo): Name conflicts with x:param (named my:foo)"
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="Description x:variable conflicting with x:variable">
    call :run ..\bin\xspec.bat conflicting-vardecl\description-variable\variable.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:variable (named my:foo): Name conflicts with x:variable (named Q{http://example.org/ns/my}foo)"
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="Scenario x:variable conflicting with ancestor scenario x:param">
    call :run ..\bin\xspec.bat conflicting-vardecl\scenario-variable\ancestor-scenario-param.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:variable (named my:foo) (under 'scenario with child::x:param in-between scenario scenario with child::x:variable'): Name conflicts with x:param (named my:foo)"
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="Scenario x:variable conflicting with description x:param">
    call :run ..\bin\xspec.bat conflicting-vardecl\scenario-variable\description-param.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:variable (named my:foo) (under 'x:scenario/x:variable'): Name conflicts with x:param (named Q{http://example.org/ns/my}foo)"
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="Scenario x:variable conflicting with preceding-sibling x:param">
    call :run ..\bin\xspec.bat conflicting-vardecl\scenario-variable\preceding-sibling-param.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:variable (named my2:foo) (under 'x:scenario/x:variable'): Name conflicts with x:param (named my1:foo)"
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<!--
		Duplicate @position
	-->

	<case name="Duplicate @position (XSLT)">
    call :run ..\bin\xspec.bat bad-position\duplicate.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:scenario ('Multiple instances of function-param (i.e. //x:call[@function]/x:param) of the same position'): Duplicate parameter position, 1, used in x:call."
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="Duplicate @position (XQuery)">
    call :run ..\bin\xspec.bat -q bad-position\duplicate.xspec
    call :verify_retval 2
    call :verify_line  5 x "ERROR in x:scenario ('Multiple instances of function-param (i.e. //x:call[@function]/x:param) of the same position'): Duplicate parameter position, 1, used in x:call."
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<!--
		Too large @position
	-->

	<case name="Too large @position (first) (XSLT)">
    call :run ..\bin\xspec.bat bad-position\too-large_first.xspec
    call :verify_retval 2
    call :verify_line  * r "ERROR in x:scenario ('..*'): Too large parameter position, 5, used in x:call\.$"
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="Too large @position (first) (XQuery)">
    call :run ..\bin\xspec.bat -q bad-position\too-large_first.xspec
    call :verify_retval 2
    call :verify_line  * r "ERROR in x:scenario ('..*'): Too large parameter position, 5, used in x:call\.$"
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="Too large @position (last) (XSLT)">
    call :run ..\bin\xspec.bat bad-position\too-large_last.xspec
    call :verify_retval 2
    call :verify_line  * r "ERROR in x:scenario ('..*'): Too large parameter position, 5, used in x:call\.$"
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case name="Too large @position (last) (XQuery)">
    call :run ..\bin\xspec.bat -q bad-position\too-large_last.xspec
    call :verify_retval 2
    call :verify_line  * r "ERROR in x:scenario ('..*'): Too large parameter position, 5, used in x:call\.$"
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<!--
		Warn when a named template scenario has a context mode or parameter
	-->

	<case name="Warning when x:call[@template] ignores x:context/@mode">
    call :run ..\bin\xspec.bat context-mode-ignored.xspec
    call :verify_retval 0
    call :verify_line 5 x "WARNING in x:scenario ('With x:context[@mode] and x:call[@template]'): x:context/@mode will have no effect on x:call"
	</case>

	<case name="Warning when x:call[@template] ignores x:context/x:param">
    call :run ..\bin\xspec.bat context-param.xspec
    call :verify_retval 0
    call :verify_line 5 x "WARNING in x:scenario ('When x:context has x:param and another child node, setting up the context excludes x:param from the context nodes. So... When a template is called,'): x:context/x:param will have no effect on x:call"
	</case>

	<!--
		Message for pending
	-->

	<case name="Message for pending">
    call :run ..\bin\xspec.bat end-to-end\cases\pending.xspec
    call :verify_retval 0
    call :verify_line  7 r "Testing with SAXON "
    call :verify_line  8 x "Test pending features (x:pending and @pending)"
    call :verify_line  9 x "..a non-pending Success scenario alongside a pending scenario"
    call :verify_line 10 x "must execute the test and return Success"
    call :verify_line 11 x "..a non-pending Failure scenario alongside a pending scenario"
    call :verify_line 12 x "must execute the test and return Failure"
    call :verify_line 13 x "      FAILED"
    call :verify_line 14 x "PENDING: (testing x:pending) a Success scenario in x:pending must be Pending"
    call :verify_line 15 x "PENDING: (testing x:pending) it would return Success if it were not Pending"
    call :verify_line 16 x "PENDING: (testing x:pending) an erroneous scenario in x:pending must be Pending"
    call :verify_line 17 x "PENDING: (testing x:pending) it would throw an error if it were not Pending"
    call :verify_line 18 x "PENDING: a Success scenario in zero-length x:pending/@label must be Pending"
    call :verify_line 19 x "PENDING: it would return Success if it were not Pending"
    call :verify_line 20 x "PENDING: an erroneous scenario in zero-length x:pending/@label must be Pending"
    call :verify_line 21 x "PENDING: it would throw an error if it were not Pending"
    call :verify_line 22 x "PENDING: a Success scenario in zero-length x:pending/x:label must be Pending"
    call :verify_line 23 x "PENDING: it would return Success if it were not Pending"
    call :verify_line 24 x "PENDING: an erroneous scenario in zero-length x:pending/x:label must be Pending"
    call :verify_line 25 x "PENDING: it would throw an error if it were not Pending"
    call :verify_line 26 x "PENDING: a Success scenario in x:pending[empty(@label | x:label)] must be Pending"
    call :verify_line 27 x "PENDING: it would return Success if it were not Pending"
    call :verify_line 28 x "PENDING: an erroneous scenario in x:pending[empty(@label | x:label)] must be Pending"
    call :verify_line 29 x "PENDING: it would throw an error if it were not Pending"
    call :verify_line 30 x "PENDING: (testing @pending of a Success scenario) ..a Success scenario with @pending must be Pending"
    call :verify_line 31 x "PENDING: (testing @pending of a Success scenario) it would return Success if it were not Pending"
    call :verify_line 32 x "PENDING: (testing @pending of an erroneous scenario) ..an erroneous scenario with @pending must be Pending"
    call :verify_line 33 x "PENDING: (testing @pending of an erroneous scenario) it would throw an error if it were not Pending"
    call :verify_line 34 x "PENDING: ..Zero-length x:scenario/@pending"
    call :verify_line 35 x "PENDING: ..a Success scenario in zero-length @pending must be Pending"
    call :verify_line 36 x "PENDING: it would return Success if it were not Pending"
    call :verify_line 37 x "PENDING: ..an erroneous scenario in zero-length @pending must be Pending"
    call :verify_line 38 x "PENDING: it would throw an error if it were not Pending"
    call :verify_line 39 x "..a Success x:expect with @pending must be Pending"
    call :verify_line 40 x "PENDING: (testing @pending of a Success x:expect) it would return Success if it were not Pending"
    call :verify_line 41 x "..an erroneous x:expect with @pending must be Pending"
    call :verify_line 42 x "PENDING: (testing @pending of an erroneous x:expect) it would throw an error if it were not Pending"
    call :verify_line 43 x "..a Success x:expect with zero-length @pending must be Pending"
    call :verify_line 44 x "PENDING: it would return Success if it were not Pending"
    call :verify_line 45 x "..an erroneous x:expect with zero-length @pending must be Pending"
    call :verify_line 46 x "PENDING: it would throw an error if it were not Pending"
    call :verify_line 47 x ""
    call :verify_line 48 x "Formatting Report..."
    call :verify_line 49 x "passed: 1 / pending: 16 / failed: 1 / total: 18"
	</case>

	<!--
		@threads is not a positive integer
	-->

	<case ifdef="XSLT_SUPPORTS_THREADS" name="@threads is zero">
    call :run ..\bin\xspec.bat threads\dynamic-error\description_zero.xspec
    call :verify_retval 2
    call :verify_line 9 r "  FOER0000[: ] /Q{http://www.jenitennison.com/xslt/xspec}description\[1\]/@threads is not positive$"
	</case>

	<case ifdef="XSLT_SUPPORTS_THREADS" name="@threads contains more than one item">
    call :run ..\bin\xspec.bat threads\dynamic-error\scenario_multiple.xspec
    call :verify_retval 2
    call :verify_line 10 r "  FOER0000[: ] /Q{http://www.jenitennison.com/xslt/xspec}description\[1\]/Q{http://www.jenitennison.com/xslt/xspec}scenario\[1\]/@threads is not an integer"
	</case>

	<case ifdef="XSLT_SUPPORTS_THREADS" name="@threads is a string">
    call :run ..\bin\xspec.bat threads\dynamic-error\scenario_string.xspec
    call :verify_retval 2
    call :verify_line 10 r "  FOER0000[: ] /Q{http://www.jenitennison.com/xslt/xspec}description\[1\]/Q{http://www.jenitennison.com/xslt/xspec}scenario\[1\]/@threads is not an integer"
	</case>

	<!--
		Bad Schematron @location
	-->

	<case name="@location selects an atomic value">
    cd schematron\bad-location\atomic

    call :run ..\..\..\..\bin\xspec.bat -s expect-assert.xspec
    call :verify_retval 2
    call :verify_line -3 x "ERROR in x:expect-assert/@location: Expression 1 should point to one node."
    call :verify_line -1 x "*** Error running the test suite"

    call :run ..\..\..\..\bin\xspec.bat -s expect-not-assert.xspec
    call :verify_retval 2
    call :verify_line -3 x "ERROR in x:expect-not-assert/@location: Expression 'str' should point to one node."
    call :verify_line -1 x "*** Error running the test suite"

    call :run ..\..\..\..\bin\xspec.bat -s expect-not-report.xspec
    call :verify_retval 2
    call :verify_line -3 x "ERROR in x:expect-not-report/@location: Expression true() should point to one node."
    call :verify_line -1 x "*** Error running the test suite"

    call :run ..\..\..\..\bin\xspec.bat -s expect-report.xspec
    call :verify_retval 2
    call :verify_line -3 x "ERROR in x:expect-report/@location: Expression xs:QName('my:foo') should point to one node."
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<case name="@location selects an empty sequence">
    cd schematron\bad-location\empty

    call :run ..\..\..\..\bin\xspec.bat -s expect-assert.xspec
    call :verify_retval 2
    call :verify_line -3 x "ERROR in x:expect-assert/@location: Expression () should point to one node."
    call :verify_line -1 x "*** Error running the test suite"

    call :run ..\..\..\..\bin\xspec.bat -s expect-not-assert.xspec
    call :verify_retval 2
    call :verify_line -3 x "ERROR in x:expect-not-assert/@location: Expression () should point to one node."
    call :verify_line -1 x "*** Error running the test suite"

    call :run ..\..\..\..\bin\xspec.bat -s expect-not-report.xspec
    call :verify_retval 2
    call :verify_line -3 x "ERROR in x:expect-not-report/@location: Expression () should point to one node."
    call :verify_line -1 x "*** Error running the test suite"

    call :run ..\..\..\..\bin\xspec.bat -s expect-report.xspec
    call :verify_retval 2
    call :verify_line -3 x "ERROR in x:expect-report/@location: Expression () should point to one node."
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<case name="@location selects 2+ nodes">
    cd schematron\bad-location\multiple

    call :run ..\..\..\..\bin\xspec.bat -s expect-assert.xspec
    call :verify_retval 2
    call :verify_line -3 x "ERROR in x:expect-assert/@location: Expression /descendant-or-self::node() should point to one node."
    call :verify_line -1 x "*** Error running the test suite"

    call :run ..\..\..\..\bin\xspec.bat -s expect-not-assert.xspec
    call :verify_retval 2
    call :verify_line -3 x "ERROR in x:expect-not-assert/@location: Expression /descendant-or-self::node() should point to one node."
    call :verify_line -1 x "*** Error running the test suite"

    call :run ..\..\..\..\bin\xspec.bat -s expect-not-report.xspec
    call :verify_retval 2
    call :verify_line -3 x "ERROR in x:expect-not-report/@location: Expression /descendant-or-self::node() should point to one node."
    call :verify_line -1 x "*** Error running the test suite"

    call :run ..\..\..\..\bin\xspec.bat -s expect-report.xspec
    call :verify_retval 2
    call :verify_line -3 x "ERROR in x:expect-report/@location: Expression /descendant-or-self::node() should point to one node."
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<case name="SVRL @location fails to select text node #396">
    call :run ..\bin\xspec.bat -s schematron\bad-location\issue-396.xspec
    call :verify_retval 2
    call :verify_line -3 x "ERROR in svrl:successful-report/@location: Expression above-mentioned should point to one node."
    call :verify_line -1 x "*** Error running the test suite"
	</case>

</collection>
