<?xml version="1.0" encoding="UTF-8"?>
<report xmlns="http://www.jenitennison.com/xslt/xspec"
        xspec="../../focus-vs-pending.xspec"
        stylesheet="focus-vs-pending-sch-preprocessed.xsl"
        schematron="../../../../do-nothing.sch"
        date="2000-01-01T00:00:00Z">
   <scenario id="scenario1"
             xspec="../../focus-vs-pending.xspec"
             pending="testing @focus alongside another focused scenario">
      <label>Test @focus and pending together (both @pending and x:pending)</label>
      <input-wrap xmlns="">
         <t:call xmlns:t="http://www.jenitennison.com/xslt/xspec" function="exactly-one">
            <t:param select="9"/>
         </t:call>
      </input-wrap>
      <scenario id="scenario1-scenario1"
                xspec="../../focus-vs-pending.xspec"
                pending="testing @focus alongside another focused scenario">
         <label>a non-pending erroneous scenario alongside a focused scenario must be Pending</label>
         <test id="scenario1-scenario1-expect1"
               pending="testing @focus alongside another focused scenario">
            <label>it would throw an error if it were not Pending</label>
         </test>
      </scenario>
      <scenario id="scenario1-scenario2" xspec="../../focus-vs-pending.xspec">
         <label>a focused Success scenario alongside another focused scenario</label>
         <result select="9"/>
         <test id="scenario1-scenario2-expect1" successful="true">
            <label>must execute the test and return Success</label>
            <expect select="9"/>
         </test>
      </scenario>
      <scenario id="scenario1-scenario3"
                xspec="../../focus-vs-pending.xspec"
                pending="testing x:pending">
         <label>an unfocused erroneous scenario in x:pending must be Pending</label>
         <test id="scenario1-scenario3-expect1" pending="testing x:pending">
            <label>it would throw an error if it were not Pending</label>
         </test>
      </scenario>
      <scenario id="scenario1-scenario4" xspec="../../focus-vs-pending.xspec">
         <label>a focused Success scenario in x:pending</label>
         <result select="9"/>
         <test id="scenario1-scenario4-expect1" successful="true">
            <label>must execute the test and return Success</label>
            <expect select="9"/>
         </test>
      </scenario>
      <scenario id="scenario1-scenario5"
                xspec="../../focus-vs-pending.xspec"
                pending="testing x:scenario[empty(@focus)]/@pending">
         <label>an erroneous scenario with @pending must be Pending</label>
         <test id="scenario1-scenario5-expect1"
               pending="testing x:scenario[empty(@focus)]/@pending">
            <label>it would throw an error if it were not Pending</label>
         </test>
      </scenario>
      <scenario id="scenario1-scenario6" xspec="../../focus-vs-pending.xspec">
         <label>a Success scenario with both @pending and @focus (not recommended as ambiguous)</label>
         <result select="9"/>
         <test id="scenario1-scenario6-expect1" successful="true">
            <label>must execute the test and return Success</label>
            <expect select="9"/>
         </test>
      </scenario>
      <scenario id="scenario1-scenario7"
                xspec="../../focus-vs-pending.xspec"
                pending="testing @focus alongside another focused scenario">
         <label>a Success x:expect with @pending must be Pending</label>
         <test id="scenario1-scenario7-expect1"
               pending="testing x:expect/@pending without ancestor::x:scenario/@focus">
            <label>it would return Success if it were not Pending</label>
         </test>
      </scenario>
      <scenario id="scenario1-scenario8" xspec="../../focus-vs-pending.xspec">
         <label>a Success x:expect with both @pending and ancestor::x:scenario/@focus (not recommended as ambiguous)</label>
         <result select="9"/>
         <test id="scenario1-scenario8-expect1" successful="true">
            <label>must execute the test and return Success</label>
            <expect select="9"/>
         </test>
      </scenario>
   </scenario>
</report>
