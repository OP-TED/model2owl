<?xml version="1.0" encoding="UTF-8"?>
<report xmlns="http://www.jenitennison.com/xslt/xspec"
        xspec="../../pending.xspec"
        stylesheet="../../../../do-nothing.xsl"
        date="2000-01-01T00:00:00Z">
   <scenario id="scenario1" xspec="../../pending.xspec">
      <label>Test pending features (x:pending and @pending)</label>
      <input-wrap xmlns="">
         <t:call xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 xmlns:t="http://www.jenitennison.com/xslt/xspec"
                 function="exactly-one">
            <t:param select="9"/>
         </t:call>
      </input-wrap>
      <scenario id="scenario1-scenario1" xspec="../../pending.xspec">
         <label>a non-pending Success scenario alongside a pending scenario</label>
         <result select="9"/>
         <test id="scenario1-scenario1-expect1" successful="true">
            <label>must execute the test and return Success</label>
            <expect select="9"/>
         </test>
      </scenario>
      <scenario id="scenario1-scenario2" xspec="../../pending.xspec">
         <label>a non-pending Failure scenario alongside a pending scenario</label>
         <result select="9"/>
         <test id="scenario1-scenario2-expect1" successful="false">
            <label>must execute the test and return Failure</label>
            <expect-test-wrap xmlns="">
               <t:expect xmlns:xs="http://www.w3.org/2001/XMLSchema"
                         xmlns:t="http://www.jenitennison.com/xslt/xspec"
                         test="$t:result instance of xs:string"/>
            </expect-test-wrap>
            <expect select="()"/>
         </test>
      </scenario>
      <scenario id="scenario1-scenario3"
                xspec="../../pending.xspec"
                pending="testing x:pending">
         <label>a Success scenario in x:pending must be Pending</label>
         <test id="scenario1-scenario3-expect1" pending="testing x:pending">
            <label>it would return Success if it were not Pending</label>
         </test>
      </scenario>
      <scenario id="scenario1-scenario4"
                xspec="../../pending.xspec"
                pending="testing x:pending">
         <label>an erroneous scenario in x:pending must be Pending</label>
         <test id="scenario1-scenario4-expect1" pending="testing x:pending">
            <label>it would throw an error if it were not Pending</label>
         </test>
      </scenario>
      <scenario id="scenario1-scenario5" xspec="../../pending.xspec" pending="">
         <label>a Success scenario in zero-length x:pending/@label must be Pending</label>
         <test id="scenario1-scenario5-expect1" pending="">
            <label>it would return Success if it were not Pending</label>
         </test>
      </scenario>
      <scenario id="scenario1-scenario6" xspec="../../pending.xspec" pending="">
         <label>an erroneous scenario in zero-length x:pending/@label must be Pending</label>
         <test id="scenario1-scenario6-expect1" pending="">
            <label>it would throw an error if it were not Pending</label>
         </test>
      </scenario>
      <scenario id="scenario1-scenario7" xspec="../../pending.xspec" pending="">
         <label>a Success scenario in zero-length x:pending/x:label must be Pending</label>
         <test id="scenario1-scenario7-expect1" pending="">
            <label>it would return Success if it were not Pending</label>
         </test>
      </scenario>
      <scenario id="scenario1-scenario8" xspec="../../pending.xspec" pending="">
         <label>an erroneous scenario in zero-length x:pending/x:label must be Pending</label>
         <test id="scenario1-scenario8-expect1" pending="">
            <label>it would throw an error if it were not Pending</label>
         </test>
      </scenario>
      <scenario id="scenario1-scenario9" xspec="../../pending.xspec" pending="">
         <label>a Success scenario in x:pending[empty(@label | x:label)] must be Pending</label>
         <test id="scenario1-scenario9-expect1" pending="">
            <label>it would return Success if it were not Pending</label>
         </test>
      </scenario>
      <scenario id="scenario1-scenario10" xspec="../../pending.xspec" pending="">
         <label>an erroneous scenario in x:pending[empty(@label | x:label)] must be Pending</label>
         <test id="scenario1-scenario10-expect1" pending="">
            <label>it would throw an error if it were not Pending</label>
         </test>
      </scenario>
      <scenario id="scenario1-scenario11"
                xspec="../../pending.xspec"
                pending="testing @pending of a Success scenario">
         <label>a Success scenario with @pending must be Pending</label>
         <test id="scenario1-scenario11-expect1"
               pending="testing @pending of a Success scenario">
            <label>it would return Success if it were not Pending</label>
         </test>
      </scenario>
      <scenario id="scenario1-scenario12"
                xspec="../../pending.xspec"
                pending="testing @pending of an erroneous scenario">
         <label>an erroneous scenario with @pending must be Pending</label>
         <test id="scenario1-scenario12-expect1"
               pending="testing @pending of an erroneous scenario">
            <label>it would throw an error if it were not Pending</label>
         </test>
      </scenario>
      <scenario id="scenario1-scenario13" xspec="../../pending.xspec" pending="">
         <label>Zero-length x:scenario/@pending</label>
         <scenario id="scenario1-scenario13-scenario1"
                   xspec="../../pending.xspec"
                   pending="">
            <label>a Success scenario in zero-length @pending must be Pending</label>
            <test id="scenario1-scenario13-scenario1-expect1" pending="">
               <label>it would return Success if it were not Pending</label>
            </test>
         </scenario>
         <scenario id="scenario1-scenario13-scenario2"
                   xspec="../../pending.xspec"
                   pending="">
            <label>an erroneous scenario in zero-length @pending must be Pending</label>
            <test id="scenario1-scenario13-scenario2-expect1" pending="">
               <label>it would throw an error if it were not Pending</label>
            </test>
         </scenario>
      </scenario>
      <scenario id="scenario1-scenario14" xspec="../../pending.xspec">
         <label>a Success x:expect with @pending must be Pending</label>
         <result select="9"/>
         <test id="scenario1-scenario14-expect1"
               pending="testing @pending of a Success x:expect">
            <label>it would return Success if it were not Pending</label>
         </test>
      </scenario>
      <scenario id="scenario1-scenario15" xspec="../../pending.xspec">
         <label>an erroneous x:expect with @pending must be Pending</label>
         <result select="9"/>
         <test id="scenario1-scenario15-expect1"
               pending="testing @pending of an erroneous x:expect">
            <label>it would throw an error if it were not Pending</label>
         </test>
      </scenario>
      <scenario id="scenario1-scenario16" xspec="../../pending.xspec">
         <label>a Success x:expect with zero-length @pending must be Pending</label>
         <result select="9"/>
         <test id="scenario1-scenario16-expect1" pending="">
            <label>it would return Success if it were not Pending</label>
         </test>
      </scenario>
      <scenario id="scenario1-scenario17" xspec="../../pending.xspec">
         <label>an erroneous x:expect with zero-length @pending must be Pending</label>
         <result select="9"/>
         <test id="scenario1-scenario17-expect1" pending="">
            <label>it would throw an error if it were not Pending</label>
         </test>
      </scenario>
   </scenario>
</report>
