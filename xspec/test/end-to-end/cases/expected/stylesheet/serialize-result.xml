<?xml version="1.0" encoding="UTF-8"?>
<report xmlns="http://www.jenitennison.com/xslt/xspec"
        xspec="../../serialize.xspec"
        stylesheet="../../../../mirror.xsl"
        date="2000-01-01T00:00:00Z">
   <scenario id="scenario1" xspec="../../serialize.xspec">
      <label>When the result is a comment node, the report HTML must serialize it as
			&lt;!-- --&gt;. (xspec/xspec#356) So...</label>
      <scenario id="scenario1-scenario1" xspec="../../serialize.xspec">
         <label>When x:result in the report XML contains a comment node,</label>
         <input-wrap xmlns="">
            <x:call xmlns:x="http://www.jenitennison.com/xslt/xspec"
                    function="Q{x-urn:test:mirror}param-mirror">
               <x:param select="$Q{x-urn:test:xspec-items}comment"/>
            </x:call>
         </input-wrap>
         <result select="/comment()">
            <content-wrap xmlns=""><!--comment-text--></content-wrap>
         </result>
         <test id="scenario1-scenario1-expect1" successful="false">
            <label>[Result] with diff must be serialized as &lt;!-- --&gt;.</label>
            <expect select="()"/>
         </test>
         <test id="scenario1-scenario1-expect2" successful="false">
            <label>[Result] without diff must be serialized as &lt;!-- --&gt;.</label>
            <expect-test-wrap xmlns="">
               <x:expect xmlns:x="http://www.jenitennison.com/xslt/xspec" test="false()"/>
            </expect-test-wrap>
            <expect select="()"/>
         </test>
      </scenario>
      <scenario id="scenario1-scenario2" xspec="../../serialize.xspec">
         <label>When x:expect in the report XML contains a comment node,</label>
         <input-wrap xmlns="">
            <x:call xmlns:x="http://www.jenitennison.com/xslt/xspec"
                    function="Q{x-urn:test:mirror}false"/>
         </input-wrap>
         <result select="Q{http://www.w3.org/2001/XMLSchema}boolean('false')"/>
         <test id="scenario1-scenario2-expect1" successful="false">
            <label>[Expected Result] with diff must be serialized as
					&lt;!-- --&gt;.</label>
            <expect select="/comment()">
               <content-wrap xmlns=""><!--comment-text--></content-wrap>
            </expect>
         </test>
      </scenario>
   </scenario>
   <scenario id="scenario2" xspec="../../serialize.xspec">
      <label>When the result is indented in the report XML file, the report HTML must serialize
			it with indentation.</label>
      <scenario id="scenario2-scenario1" xspec="../../serialize.xspec">
         <label>So... (xspec/xspec#359)</label>
         <scenario id="scenario2-scenario1-scenario1" xspec="../../serialize.xspec">
            <label>When x:result in the report XML file is a sequence of simple nested
					elements serialized with indentation,</label>
            <input-wrap xmlns="">
               <x:call xmlns:x="http://www.jenitennison.com/xslt/xspec"
                       function="Q{x-urn:test:mirror}param-mirror">
                  <x:param as="element()+">
                     <foo/>
                     <bar>
                        <baz/>
                     </bar>
                     <qux>
                        <quux/>
                     </qux>
                  </x:param>
               </x:call>
            </input-wrap>
            <result select="/element()">
               <content-wrap xmlns="">
                  <foo xmlns:x="http://www.jenitennison.com/xslt/xspec"/>
                  <bar xmlns:x="http://www.jenitennison.com/xslt/xspec">
                     <baz/>
                  </bar>
                  <qux xmlns:x="http://www.jenitennison.com/xslt/xspec">
                     <quux/>
                  </qux>
               </content-wrap>
            </result>
            <test id="scenario2-scenario1-scenario1-expect1" successful="false">
               <label>all elements in [Result] with diff must be serialized with
						indentation.</label>
               <expect select="()"/>
            </test>
            <test id="scenario2-scenario1-scenario1-expect2" successful="false">
               <label>all elements in [Result] without diff must be serialized with
						indentation.</label>
               <expect-test-wrap xmlns="">
                  <x:expect xmlns:x="http://www.jenitennison.com/xslt/xspec" test="false()"/>
               </expect-test-wrap>
               <expect select="()"/>
            </test>
         </scenario>
         <scenario id="scenario2-scenario1-scenario2" xspec="../../serialize.xspec">
            <label>When x:expect in the report XML file is a sequence of simple nested
					elements serialized with indentation,</label>
            <input-wrap xmlns="">
               <x:call xmlns:x="http://www.jenitennison.com/xslt/xspec"
                       function="Q{x-urn:test:mirror}false"/>
            </input-wrap>
            <result select="Q{http://www.w3.org/2001/XMLSchema}boolean('false')"/>
            <test id="scenario2-scenario1-scenario2-expect1" successful="false">
               <label>all elements in [Expected Result] with diff must be serialized with
						indentation.</label>
               <expect select="/element()">
                  <content-wrap xmlns="">
                     <foo xmlns:x="http://www.jenitennison.com/xslt/xspec"/>
                     <bar xmlns:x="http://www.jenitennison.com/xslt/xspec">
                        <baz/>
                     </bar>
                     <qux xmlns:x="http://www.jenitennison.com/xslt/xspec">
                        <quux/>
                     </qux>
                  </content-wrap>
               </expect>
            </test>
         </scenario>
      </scenario>
      <scenario id="scenario2-scenario2" xspec="../../serialize.xspec">
         <label>But the diff must not be affected by indentation. So...</label>
         <scenario id="scenario2-scenario2-scenario1" xspec="../../serialize.xspec">
            <label>When a node is indented, the diff of the indented node itself must not be
					affected. (xspec/xspec#367) So...</label>
            <scenario id="scenario2-scenario2-scenario1-scenario1"
                      xspec="../../serialize.xspec">
               <label>When &lt;bar&gt; is indented but &lt;?bar?&gt; is not indented in
						x:result of the report XML file,</label>
               <input-wrap xmlns="">
                  <x:call xmlns:x="http://www.jenitennison.com/xslt/xspec"
                          function="Q{x-urn:test:mirror}param-mirror">
                     <x:param as="element(test)">
                        <test>
                           <elem1><!--foo-->
                              <bar/>
                           </elem1>
                           <elem2><!--foo--><?bar?></elem2>
                        </test>
                     </x:param>
                  </x:call>
               </input-wrap>
               <result select="/element()">
                  <content-wrap xmlns="">
                     <test xmlns:x="http://www.jenitennison.com/xslt/xspec">
                        <elem1><!--foo-->
                           <bar/>
                        </elem1>
                        <elem2><!--foo--><?bar?></elem2>
                     </test>
                  </content-wrap>
               </result>
               <test id="scenario2-scenario2-scenario1-scenario1-expect1" successful="false">
                  <label>both &lt;bar&gt; and &lt;?bar?&gt; must be green.</label>
                  <expect select="/element()">
                     <content-wrap xmlns="">
                        <test xmlns:x="http://www.jenitennison.com/xslt/xspec">
                           <elem1>foo<bar/>
                           </elem1>
                           <elem2>foo<?bar?></elem2>
                        </test>
                     </content-wrap>
                  </expect>
               </test>
            </scenario>
            <scenario id="scenario2-scenario2-scenario1-scenario2"
                      xspec="../../serialize.xspec">
               <label>When &lt;bar&gt; is indented but &lt;?bar?&gt; is not indented in
						x:expect of the report XML file,</label>
               <input-wrap xmlns="">
                  <x:call xmlns:x="http://www.jenitennison.com/xslt/xspec"
                          function="Q{x-urn:test:mirror}param-mirror">
                     <x:param as="element(test)">
                        <test>
                           <elem1>foo<bar/>
                           </elem1>
                           <elem2>foo<?bar?></elem2>
                        </test>
                     </x:param>
                  </x:call>
               </input-wrap>
               <result select="/element()">
                  <content-wrap xmlns="">
                     <test xmlns:x="http://www.jenitennison.com/xslt/xspec">
                        <elem1>foo<bar/>
                        </elem1>
                        <elem2>foo<?bar?></elem2>
                     </test>
                  </content-wrap>
               </result>
               <test id="scenario2-scenario2-scenario1-scenario2-expect1" successful="false">
                  <label>both &lt;bar&gt; and &lt;?bar?&gt; must be green.</label>
                  <expect select="/element()">
                     <content-wrap xmlns="">
                        <test xmlns:x="http://www.jenitennison.com/xslt/xspec">
                           <elem1><!--foo-->
                              <bar/>
                           </elem1>
                           <elem2><!--foo--><?bar?></elem2>
                        </test>
                     </content-wrap>
                  </expect>
               </test>
            </scenario>
         </scenario>
         <scenario id="scenario2-scenario2-scenario2" xspec="../../serialize.xspec">
            <label>When a child node of an element is indented, the diff of the element must
					not be affected.</label>
            <scenario id="scenario2-scenario2-scenario2-scenario1"
                      xspec="../../serialize.xspec">
               <label>So, when the same &lt;bar&gt; in &lt;foo&gt; is indented in x:result
						and x:expect of the report XML file with different indentation
						length,</label>
               <input-wrap xmlns="">
                  <x:call xmlns:x="http://www.jenitennison.com/xslt/xspec"
                          function="Q{x-urn:test:mirror}param-mirror">
                     <x:param as="element(test)">
                        <test>
                           <foo>
                              <bar/>
                           </foo>
                           <baz/>
                        </test>
                     </x:param>
                  </x:call>
               </input-wrap>
               <result select="/element()">
                  <content-wrap xmlns="">
                     <test xmlns:x="http://www.jenitennison.com/xslt/xspec">
                        <foo>
                           <bar/>
                        </foo>
                        <baz/>
                     </test>
                  </content-wrap>
               </result>
               <test id="scenario2-scenario2-scenario2-scenario1-expect1" successful="false">
                  <label>&lt;foo&gt; must be green.</label>
                  <expect select="/element()">
                     <content-wrap xmlns="">
                        <test xmlns:x="http://www.jenitennison.com/xslt/xspec">
                           <foo>
                              <bar/>
                           </foo>
                           <qux/>
                        </test>
                     </content-wrap>
                  </expect>
               </test>
            </scenario>
         </scenario>
      </scenario>
   </scenario>
   <scenario id="scenario3" xspec="../../serialize.xspec">
      <label>When x:expect has an element of '...',</label>
      <input-wrap xmlns="">
         <x:call xmlns:x="http://www.jenitennison.com/xslt/xspec"
                 function="Q{x-urn:test:mirror}param-mirror">
            <x:param as="element(foo)">
               <foo>
                  <bar/>
                  <baz/>
               </foo>
            </x:param>
         </x:call>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <foo xmlns:x="http://www.jenitennison.com/xslt/xspec">
               <bar/>
               <baz/>
            </foo>
         </content-wrap>
      </result>
      <test id="scenario3-expect1" successful="false">
         <label>the corresponding nodes in [Result] with diff must be serialized in green.
				(xspec/xspec#379)</label>
         <expect select="/element()">
            <content-wrap xmlns="">
               <foo xmlns:x="http://www.jenitennison.com/xslt/xspec">...</foo>
               <qux xmlns:x="http://www.jenitennison.com/xslt/xspec"/>
            </content-wrap>
         </expect>
      </test>
   </scenario>
   <scenario id="scenario4" xspec="../../serialize.xspec">
      <label>When the result contains significant text nodes,</label>
      <input-wrap xmlns="">
         <x:call xmlns:x="http://www.jenitennison.com/xslt/xspec"
                 function="Q{x-urn:test:mirror}param-mirror">
            <x:param as="element(test)">
               <test>
                  <oridinary-text-node>
                     <same>same</same>
                     <diff>actual</diff>
                  </oridinary-text-node>
                  <significant-whitespace-only-text-node>
                     <same xml:space="preserve">	
&#xD; </same>
                     <diff xml:space="preserve">	
&#xD; </diff>
                  </significant-whitespace-only-text-node>
               </test>
            </x:param>
         </x:call>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <test xmlns:x="http://www.jenitennison.com/xslt/xspec">
               <oridinary-text-node>
                  <same>same</same>
                  <diff>actual</diff>
               </oridinary-text-node>
               <significant-whitespace-only-text-node>
                  <same xml:space="preserve"><ws xmlns="http://www.jenitennison.com/xslt/xspec">	
&#xD; </ws></same>
                  <diff xml:space="preserve"><ws xmlns="http://www.jenitennison.com/xslt/xspec">	
&#xD; </ws></diff>
               </significant-whitespace-only-text-node>
            </test>
         </content-wrap>
      </result>
      <test id="scenario4-expect1" successful="false">
         <label>both in [Result] and [Expected Result] with diff, the significant text nodes
				must be serialized with color. (xspec/xspec#386)</label>
         <expect select="/element()">
            <content-wrap xmlns="">
               <test xmlns:x="http://www.jenitennison.com/xslt/xspec">
                  <oridinary-text-node>
                     <same>same</same>
                     <diff>expect</diff>
                  </oridinary-text-node>
                  <significant-whitespace-only-text-node>
                     <same xml:space="preserve"><ws xmlns="http://www.jenitennison.com/xslt/xspec">	
&#xD; </ws></same>
                     <diff xml:space="preserve"><ws xmlns="http://www.jenitennison.com/xslt/xspec"> 	
&#xD;</ws></diff>
                  </significant-whitespace-only-text-node>
               </test>
            </content-wrap>
         </expect>
      </test>
      <test id="scenario4-expect2" successful="false">
         <label>in [Result] without diff, the significant text nodes must be serialized without
				color.</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:x="http://www.jenitennison.com/xslt/xspec" test="false()"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario5" xspec="../../serialize.xspec">
      <label>When the result contains an element, the report HTML must serialize nodes in its
			opening tag with aligned indentation. (xspec/xspec#689) So...</label>
      <scenario id="scenario5-scenario1" xspec="../../serialize.xspec">
         <label>When the report XML contains an element with several namespaces</label>
         <scenario id="scenario5-scenario1-scenario1" xspec="../../serialize.xspec">
            <label>in x:result,</label>
            <input-wrap xmlns="">
               <x:call xmlns:x="http://www.jenitennison.com/xslt/xspec"
                       function="Q{x-urn:test:mirror}param-mirror">
                  <x:param select="$test"/>
               </x:call>
            </input-wrap>
            <result select="/element()">
               <content-wrap xmlns="">
                  <looooooooooooooooooooooooooooooooooong xmlns:x="http://www.jenitennison.com/xslt/xspec">
                     <test xmlns:ns1="ns1" xmlns:ns2="ns2" xmlns:ns3="ns3" xmlns="ns">
                        <a/>
                     </test>
                  </looooooooooooooooooooooooooooooooooong>
               </content-wrap>
            </result>
            <test id="scenario5-scenario1-scenario1-expect1" successful="false">
               <label>[Result] with diff must be serialized with aligned
						indentation.</label>
               <expect select="()"/>
            </test>
            <test id="scenario5-scenario1-scenario1-expect2" successful="false">
               <label>[Result] without diff must be serialized with aligned
						indentation.</label>
               <expect-test-wrap xmlns="">
                  <x:expect xmlns:x="http://www.jenitennison.com/xslt/xspec" test="false()"/>
               </expect-test-wrap>
               <expect select="()"/>
            </test>
         </scenario>
         <scenario id="scenario5-scenario1-scenario2" xspec="../../serialize.xspec">
            <label>in x:expect,</label>
            <input-wrap xmlns="">
               <x:call xmlns:x="http://www.jenitennison.com/xslt/xspec"
                       function="Q{x-urn:test:mirror}false"/>
            </input-wrap>
            <result select="Q{http://www.w3.org/2001/XMLSchema}boolean('false')"/>
            <test id="scenario5-scenario1-scenario2-expect1" successful="false">
               <label>[Expected Result] with diff must be serialized with aligned
						indentation.</label>
               <expect select="/element()">
                  <content-wrap xmlns="">
                     <looooooooooooooooooooooooooooooooooong xmlns:x="http://www.jenitennison.com/xslt/xspec">
                        <test xmlns:ns1="ns1" xmlns:ns2="ns2" xmlns:ns3="ns3" xmlns="ns">
                           <a/>
                        </test>
                     </looooooooooooooooooooooooooooooooooong>
                  </content-wrap>
               </expect>
            </test>
         </scenario>
      </scenario>
      <scenario id="scenario5-scenario2" xspec="../../serialize.xspec">
         <label>When the report XML contains an element with several attributes</label>
         <scenario id="scenario5-scenario2-scenario1" xspec="../../serialize.xspec">
            <label>in x:result,</label>
            <input-wrap xmlns="">
               <x:call xmlns:x="http://www.jenitennison.com/xslt/xspec"
                       function="Q{x-urn:test:mirror}param-mirror">
                  <x:param select="$test"/>
               </x:call>
            </input-wrap>
            <result select="/element()">
               <content-wrap xmlns="">
                  <looooooooooooooooooooooooooooooooooong xmlns:x="http://www.jenitennison.com/xslt/xspec">
                     <test attr1="val1" attr2="val2" attr3="val3">
                        <a/>
                     </test>
                  </looooooooooooooooooooooooooooooooooong>
               </content-wrap>
            </result>
            <test id="scenario5-scenario2-scenario1-expect1" successful="false">
               <label>[Result] with diff must be serialized with aligned
						indentation.</label>
               <expect select="()"/>
            </test>
            <test id="scenario5-scenario2-scenario1-expect2" successful="false">
               <label>[Result] without diff must be serialized with aligned
						indentation.</label>
               <expect-test-wrap xmlns="">
                  <x:expect xmlns:x="http://www.jenitennison.com/xslt/xspec" test="false()"/>
               </expect-test-wrap>
               <expect select="()"/>
            </test>
         </scenario>
         <scenario id="scenario5-scenario2-scenario2" xspec="../../serialize.xspec">
            <label>in x:expect,</label>
            <input-wrap xmlns="">
               <x:call xmlns:x="http://www.jenitennison.com/xslt/xspec"
                       function="Q{x-urn:test:mirror}false"/>
            </input-wrap>
            <result select="Q{http://www.w3.org/2001/XMLSchema}boolean('false')"/>
            <test id="scenario5-scenario2-scenario2-expect1" successful="false">
               <label>[Expected Result] with diff must be serialized with aligned
						indentation.</label>
               <expect select="/element()">
                  <content-wrap xmlns="">
                     <looooooooooooooooooooooooooooooooooong xmlns:x="http://www.jenitennison.com/xslt/xspec">
                        <test attr1="val1" attr2="val2" attr3="val3">
                           <a/>
                        </test>
                     </looooooooooooooooooooooooooooooooooong>
                  </content-wrap>
               </expect>
            </test>
         </scenario>
      </scenario>
   </scenario>
   <scenario id="scenario6" xspec="../../serialize.xspec">
      <label>When the result contains attribute,</label>
      <input-wrap xmlns="">
         <x:call xmlns:x="http://www.jenitennison.com/xslt/xspec"
                 function="Q{x-urn:test:mirror}param-mirror">
            <x:param>
               <exact-match attr1="value1" attr2="value2" attr3="" attr4=""/>
               <name-match attr1="value1" attr2="value2" attr3="" attr4="..."/>
               <orphan attr1="value1" attr2="" attr3="..."/>
            </x:param>
         </x:call>
      </input-wrap>
      <scenario id="scenario6-scenario1" xspec="../../serialize.xspec">
         <label>both in [Result] and [Expected Result] with diff,</label>
         <result select="/element()">
            <content-wrap xmlns="">
               <exact-match xmlns:x="http://www.jenitennison.com/xslt/xspec"
                            attr1="value1"
                            attr2="value2"
                            attr3=""
                            attr4=""/>
               <name-match xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           attr1="value1"
                           attr2="value2"
                           attr3=""
                           attr4="..."/>
               <orphan xmlns:x="http://www.jenitennison.com/xslt/xspec"
                       attr1="value1"
                       attr2=""
                       attr3="..."/>
            </content-wrap>
         </result>
         <test id="scenario6-scenario1-expect1" successful="false">
            <label>The exact-match (taking '...' into account) attributes must be serialized
					as green="green". The name-match attributes must be serialized as
					palePink="solidPink". The orphan attributes must be serialized as
					solidPink="solidPink" regardless of their values.</label>
            <expect select="/element()">
               <content-wrap xmlns="">
                  <exact-match xmlns:x="http://www.jenitennison.com/xslt/xspec"
                               attr1="value1"
                               attr2="..."
                               attr3=""
                               attr4="..."/>
                  <name-match xmlns:x="http://www.jenitennison.com/xslt/xspec"
                              attr1="VALUE1"
                              attr2=""
                              attr3="value3"
                              attr4="value4"/>
                  <orphan xmlns:x="http://www.jenitennison.com/xslt/xspec"
                          attr4="value4"
                          attr5=""
                          attr6="..."/>
               </content-wrap>
            </expect>
         </test>
      </scenario>
      <scenario id="scenario6-scenario2" xspec="../../serialize.xspec">
         <label>in [Result] without diff,</label>
         <result select="/element()">
            <content-wrap xmlns="">
               <exact-match xmlns:x="http://www.jenitennison.com/xslt/xspec"
                            attr1="value1"
                            attr2="value2"
                            attr3=""
                            attr4=""/>
               <name-match xmlns:x="http://www.jenitennison.com/xslt/xspec"
                           attr1="value1"
                           attr2="value2"
                           attr3=""
                           attr4="..."/>
               <orphan xmlns:x="http://www.jenitennison.com/xslt/xspec"
                       attr1="value1"
                       attr2=""
                       attr3="..."/>
            </content-wrap>
         </result>
         <test id="scenario6-scenario2-expect1" successful="false">
            <label>all the attributes must be serialized without color.</label>
            <expect-test-wrap xmlns="">
               <x:expect xmlns:x="http://www.jenitennison.com/xslt/xspec" test="false()"/>
            </expect-test-wrap>
            <expect select="()"/>
         </test>
      </scenario>
   </scenario>
   <scenario id="scenario7" xspec="../../serialize.xspec">
      <label>When the result contains processing instructions,</label>
      <input-wrap xmlns="">
         <x:call xmlns:x="http://www.jenitennison.com/xslt/xspec"
                 function="Q{x-urn:test:mirror}param-mirror">
            <x:param>
               <exact-match><?node1 value1?><?node2 value2?><?node3?><?node4?></exact-match>
               <name-match><?node1 value1?><?node2 value2?><?node3?><?node4 ...?></name-match>
               <value-match><?node1 value1?><?node2 value2?><?node3?><?node4?></value-match>
               <no-match>
                  <different-kind><?node1 value1?>
                     <node2/>
                     <?node3?>
                     <node4/>
                     <node5/>
                  </different-kind>
                  <orphan>
                     <node1><?node1-1 value1-1?><?node1-2?><?node1-3 ...?></node1>
                     <node2/>
                  </orphan>
               </no-match>
            </x:param>
         </x:call>
      </input-wrap>
      <scenario id="scenario7-scenario1" xspec="../../serialize.xspec">
         <label>both in [Result] and [Expected Result] with diff,</label>
         <result select="/element()">
            <content-wrap xmlns="">
               <exact-match xmlns:x="http://www.jenitennison.com/xslt/xspec"><?node1 value1?><?node2 value2?><?node3?><?node4?></exact-match>
               <name-match xmlns:x="http://www.jenitennison.com/xslt/xspec"><?node1 value1?><?node2 value2?><?node3?><?node4 ...?></name-match>
               <value-match xmlns:x="http://www.jenitennison.com/xslt/xspec"><?node1 value1?><?node2 value2?><?node3?><?node4?></value-match>
               <no-match xmlns:x="http://www.jenitennison.com/xslt/xspec">
                  <different-kind><?node1 value1?>
                     <node2/>
                     <?node3?>
                     <node4/>
                     <node5/>
                  </different-kind>
                  <orphan>
                     <node1><?node1-1 value1-1?><?node1-2?><?node1-3 ...?></node1>
                     <node2/>
                  </orphan>
               </no-match>
            </content-wrap>
         </result>
         <test id="scenario7-scenario1-expect1" successful="false">
            <label>The exact-match (taking '...' into account) processing instructions must be
					serialized as &lt;?green green?&gt;. The name-match processing
					instructions must be serialized as &lt;?palePink solidPink?&gt;. The
					value-match (taking '...' into account) processing instructions must be
					serialized as &lt;?solidPink green?&gt;. The no-match processing
					instructions must be serialized as &lt;?solidPink solidPink?&gt;
					regardless of their values.</label>
            <expect select="/element()">
               <content-wrap xmlns="">
                  <exact-match xmlns:x="http://www.jenitennison.com/xslt/xspec"><?node1 value1?><?node2 ...?><?node3?><?node4 ...?></exact-match>
                  <name-match xmlns:x="http://www.jenitennison.com/xslt/xspec"><?node1 VALUE1?><?node2?><?node3 value3?><?node4 value4?></name-match>
                  <value-match xmlns:x="http://www.jenitennison.com/xslt/xspec"><?NODE1 value1?><?NODE2 ...?><?NODE3?><?NODE4 ...?></value-match>
                  <no-match xmlns:x="http://www.jenitennison.com/xslt/xspec">
                     <different-kind>
                        <node1/>
                        <?node2 value2?>
                        <node3/>
                        <?node4?>
                        <?node5 ...?>
                     </different-kind>
                     <orphan>
                        <node1/>
                        <node2><?node2-1 value2-1?><?node2-2?><?node2-3 ...?></node2>
                     </orphan>
                  </no-match>
               </content-wrap>
            </expect>
         </test>
      </scenario>
      <scenario id="scenario7-scenario2" xspec="../../serialize.xspec">
         <label>in [Result] without diff,</label>
         <result select="/element()">
            <content-wrap xmlns="">
               <exact-match xmlns:x="http://www.jenitennison.com/xslt/xspec"><?node1 value1?><?node2 value2?><?node3?><?node4?></exact-match>
               <name-match xmlns:x="http://www.jenitennison.com/xslt/xspec"><?node1 value1?><?node2 value2?><?node3?><?node4 ...?></name-match>
               <value-match xmlns:x="http://www.jenitennison.com/xslt/xspec"><?node1 value1?><?node2 value2?><?node3?><?node4?></value-match>
               <no-match xmlns:x="http://www.jenitennison.com/xslt/xspec">
                  <different-kind><?node1 value1?>
                     <node2/>
                     <?node3?>
                     <node4/>
                     <node5/>
                  </different-kind>
                  <orphan>
                     <node1><?node1-1 value1-1?><?node1-2?><?node1-3 ...?></node1>
                     <node2/>
                  </orphan>
               </no-match>
            </content-wrap>
         </result>
         <test id="scenario7-scenario2-expect1" successful="false">
            <label>all the processing instructions must be serialized without color.</label>
            <expect-test-wrap xmlns="">
               <x:expect xmlns:x="http://www.jenitennison.com/xslt/xspec" test="false()"/>
            </expect-test-wrap>
            <expect select="()"/>
         </test>
      </scenario>
   </scenario>
   <scenario id="scenario8" xspec="../../serialize.xspec">
      <label>When the result contains an element with the default namespace undeclared</label>
      <scenario id="scenario8-scenario1" xspec="../../serialize.xspec">
         <label>and it is top-level,</label>
         <input-wrap xmlns="">
            <x:call xmlns:x="http://www.jenitennison.com/xslt/xspec"
                    function="Q{x-urn:test:mirror}param-mirror">
               <x:param xmlns="default-ns">
                  <foo xmlns=""/>
               </x:param>
            </x:call>
         </input-wrap>
         <scenario id="scenario8-scenario1-scenario1" xspec="../../serialize.xspec">
            <label>both in [Result] and [Expected Result] with diff,</label>
            <result select="/element()">
               <content-wrap xmlns="">
                  <foo xmlns:x="http://www.jenitennison.com/xslt/xspec"/>
               </content-wrap>
            </result>
            <test id="scenario8-scenario1-scenario1-expect1" successful="false">
               <label>the top-level element should not have unnecessary xmlns="".</label>
               <expect select="/element()">
                  <content-wrap xmlns="">
                     <bar xmlns:x="http://www.jenitennison.com/xslt/xspec"/>
                  </content-wrap>
               </expect>
            </test>
         </scenario>
         <scenario id="scenario8-scenario1-scenario2" xspec="../../serialize.xspec">
            <label>in [Result] without diff,</label>
            <result select="/element()">
               <content-wrap xmlns="">
                  <foo xmlns:x="http://www.jenitennison.com/xslt/xspec"/>
               </content-wrap>
            </result>
            <test id="scenario8-scenario1-scenario2-expect1" successful="false">
               <label>the top-level element should not have unnecessary xmlns="".</label>
               <expect-test-wrap xmlns="">
                  <x:expect xmlns:x="http://www.jenitennison.com/xslt/xspec" test="false()"/>
               </expect-test-wrap>
               <expect select="()"/>
            </test>
         </scenario>
      </scenario>
      <scenario id="scenario8-scenario2" xspec="../../serialize.xspec">
         <label>and it is 2nd-level,</label>
         <input-wrap xmlns="">
            <x:call xmlns:x="http://www.jenitennison.com/xslt/xspec"
                    function="Q{x-urn:test:mirror}param-mirror">
               <x:param xmlns="default-ns">
                  <foo>
                     <bar xmlns=""/>
                  </foo>
               </x:param>
            </x:call>
         </input-wrap>
         <scenario id="scenario8-scenario2-scenario1" xspec="../../serialize.xspec">
            <label>both in [Result] and [Expected Result] with diff,</label>
            <result select="/element()">
               <content-wrap xmlns="">
                  <foo xmlns:x="http://www.jenitennison.com/xslt/xspec" xmlns="default-ns">
                     <bar xmlns=""/>
                  </foo>
               </content-wrap>
            </result>
            <test id="scenario8-scenario2-scenario1-expect1" successful="false">
               <label>the 2nd-level element should have xmlns="".</label>
               <expect select="/element()">
                  <content-wrap xmlns="">
                     <foo xmlns:x="http://www.jenitennison.com/xslt/xspec" xmlns="default-ns">
                        <baz xmlns=""/>
                     </foo>
                  </content-wrap>
               </expect>
            </test>
         </scenario>
         <scenario id="scenario8-scenario2-scenario2" xspec="../../serialize.xspec">
            <label>in [Result] without diff,</label>
            <result select="/element()">
               <content-wrap xmlns="">
                  <foo xmlns:x="http://www.jenitennison.com/xslt/xspec" xmlns="default-ns">
                     <bar xmlns=""/>
                  </foo>
               </content-wrap>
            </result>
            <test id="scenario8-scenario2-scenario2-expect1" successful="false">
               <label>the 2nd-level element should have xmlns="".</label>
               <expect-test-wrap xmlns="">
                  <x:expect xmlns:x="http://www.jenitennison.com/xslt/xspec" test="false()"/>
               </expect-test-wrap>
               <expect select="()"/>
            </test>
         </scenario>
      </scenario>
   </scenario>
   <scenario id="scenario9" xspec="../../serialize.xspec">
      <label>When the result is a sequence of nodes containing '&amp;' and '&lt;'
			(xspec/xspec#1155)</label>
      <input-wrap xmlns="">
         <x:call xmlns:x="http://www.jenitennison.com/xslt/xspec"
                 function="Q{x-urn:test:mirror}param-mirror">
            <x:param>
               <elem>&lt;p&gt;foo &amp; bar&lt;/p&gt;</elem>
               <!--<p>foo & bar</p>-->
               <?pi <p>foo & bar</p>?>&lt;p&gt;foo &amp; bar&lt;/p&gt;</x:param>
         </x:call>
      </input-wrap>
      <result select="/node()">
         <content-wrap xmlns="">
            <elem xmlns:x="http://www.jenitennison.com/xslt/xspec">&lt;p&gt;foo &amp; bar&lt;/p&gt;</elem>
            <!--<p>foo & bar</p>-->
            <?pi <p>foo & bar</p>?>&lt;p&gt;foo &amp; bar&lt;/p&gt;</content-wrap>
      </result>
      <test id="scenario9-expect1" successful="false">
         <label>both in [Result] and [Expected Result] with diff, '&amp;' and '&lt;' (and
				possibly other special characters) should be escaped without seeming
				indentation.</label>
         <expect select="/node()">
            <content-wrap xmlns="">
               <elem xmlns:x="http://www.jenitennison.com/xslt/xspec">&lt;p&gt;bar &amp; baz&lt;/p&gt;</elem>
               <!--<p>bar & baz</p>-->
               <?pi <p>bar & baz</p>?>&lt;p&gt;bar &amp; baz&lt;/p&gt;</content-wrap>
         </expect>
      </test>
      <test id="scenario9-expect2" successful="false">
         <label>in [Result] without diff, '&amp;' and '&lt;' (and possibly other special
				characters) should be escaped without seeming indentation.</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:x="http://www.jenitennison.com/xslt/xspec" test="false()"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
</report>
