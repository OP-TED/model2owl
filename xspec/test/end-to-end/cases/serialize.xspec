<?xml version="1.0" encoding="UTF-8"?>
<?xspec-test require-saxon-bug-4483-fixed?>
<x:description query="x-urn:test:mirror" query-at="../../mirror.xqm" stylesheet="../../mirror.xsl"
	xmlns:x="http://www.jenitennison.com/xslt/xspec">

	<x:helper query="x-urn:test:xspec-items" query-at="../../items.xqm" />
	<x:helper stylesheet="../../items.xsl" />

	<x:scenario>
		<x:label>When the result is a comment node, the report HTML must serialize it as
			<![CDATA[<!-- -->]]>. (xspec/xspec#356) So...</x:label>
		<x:scenario>
			<x:label>When x:result in the report XML contains a comment node,</x:label>
			<x:call function="Q{x-urn:test:mirror}param-mirror">
				<x:param select="$Q{x-urn:test:xspec-items}comment" />
			</x:call>
			<x:expect>
				<x:label>[Result] with diff must be serialized as <![CDATA[<!-- -->]]>.</x:label>
			</x:expect>
			<x:expect test="false()">
				<x:label>[Result] without diff must be serialized as <![CDATA[<!-- -->]]>.</x:label>
			</x:expect>
		</x:scenario>

		<x:scenario>
			<x:label>When x:expect in the report XML contains a comment node,</x:label>
			<x:call function="Q{x-urn:test:mirror}false" />
			<x:expect select="$Q{x-urn:test:xspec-items}comment">
				<x:label>[Expected Result] with diff must be serialized as
					<![CDATA[<!-- -->]]>.</x:label>
			</x:expect>
		</x:scenario>
	</x:scenario>

	<x:scenario>
		<x:label>When the result is indented in the report XML file, the report HTML must serialize
			it with indentation.</x:label>
		<x:scenario>
			<x:label>So... (xspec/xspec#359)</x:label>
			<x:scenario>
				<x:label>When x:result in the report XML file is a sequence of simple nested
					elements serialized with indentation,</x:label>
				<x:call function="Q{x-urn:test:mirror}param-mirror">
					<x:param as="element()+">
						<foo />
						<bar>
							<baz />
						</bar>
						<qux>
							<quux />
						</qux>
					</x:param>
				</x:call>
				<x:expect>
					<x:label>all elements in [Result] with diff must be serialized with
						indentation.</x:label>
				</x:expect>
				<x:expect test="false()">
					<x:label>all elements in [Result] without diff must be serialized with
						indentation.</x:label>
				</x:expect>
			</x:scenario>

			<x:scenario>
				<x:label>When x:expect in the report XML file is a sequence of simple nested
					elements serialized with indentation,</x:label>
				<x:call function="Q{x-urn:test:mirror}false" />
				<x:expect>
					<x:label>all elements in [Expected Result] with diff must be serialized with
						indentation.</x:label>
					<foo />
					<bar>
						<baz />
					</bar>
					<qux>
						<quux />
					</qux>
				</x:expect>
			</x:scenario>
		</x:scenario>

		<x:scenario>
			<x:label>But the diff must not be affected by indentation. So...</x:label>
			<x:scenario>
				<x:label>When a node is indented, the diff of the indented node itself must not be
					affected. (xspec/xspec#367) So...</x:label>
				<x:scenario>
					<x:label>When <![CDATA[<bar> is indented but <?bar?>]]> is not indented in
						x:result of the report XML file,</x:label>
					<x:call function="Q{x-urn:test:mirror}param-mirror">
						<x:param as="element(test)">
							<test>
								<elem1><!--foo--><bar /></elem1>
								<elem2><!--foo--><?bar?></elem2>
							</test>
						</x:param>
					</x:call>
					<x:expect>
						<x:label>both <![CDATA[<bar> and <?bar?>]]> must be green.</x:label>
						<test>
							<elem1>foo<bar /></elem1>
							<elem2>foo<?bar?></elem2>
						</test>
					</x:expect>
				</x:scenario>

				<x:scenario>
					<x:label>When <![CDATA[<bar> is indented but <?bar?>]]> is not indented in
						x:expect of the report XML file,</x:label>
					<x:call function="Q{x-urn:test:mirror}param-mirror">
						<x:param as="element(test)">
							<test>
								<elem1>foo<bar /></elem1>
								<elem2>foo<?bar?></elem2>
							</test>
						</x:param>
					</x:call>
					<x:expect>
						<x:label>both <![CDATA[<bar> and <?bar?>]]> must be green.</x:label>
						<test>
							<elem1><!--foo--><bar /></elem1>
							<elem2><!--foo--><?bar?></elem2>
						</test>
					</x:expect>
				</x:scenario>
			</x:scenario>

			<x:scenario>
				<x:label>When a child node of an element is indented, the diff of the element must
					not be affected.</x:label>
				<x:scenario>
					<x:label>So, when the same <![CDATA[<bar> in <foo>]]> is indented in x:result
						and x:expect of the report XML file with different indentation
						length,</x:label>
					<x:call function="Q{x-urn:test:mirror}param-mirror">
						<x:param as="element(test)">
							<test>
								<foo><bar /></foo>
								<baz />
							</test>
						</x:param>
					</x:call>
					<x:expect>
						<x:label><![CDATA[<foo>]]> must be green.</x:label>
						<test>
							<foo><bar /></foo>
							<qux />
						</test>
					</x:expect>
				</x:scenario>
			</x:scenario>
		</x:scenario>
	</x:scenario>

	<x:scenario>
		<x:label>When x:expect has an element of '...',</x:label>
		<x:call function="Q{x-urn:test:mirror}param-mirror">
			<x:param as="element(foo)">
				<foo>
					<bar />
					<baz />
				</foo>
			</x:param>
		</x:call>
		<x:expect>
			<x:label>the corresponding nodes in [Result] with diff must be serialized in green.
				(xspec/xspec#379)</x:label>
			<foo>...</foo>
			<qux />
		</x:expect>
	</x:scenario>

	<x:scenario>
		<x:label>When the result contains significant text nodes,</x:label>
		<x:call function="Q{x-urn:test:mirror}param-mirror">
			<x:param as="element(test)">
				<test>
					<oridinary-text-node>
						<same>same</same>
						<diff>actual</diff>
					</oridinary-text-node>
					<significant-whitespace-only-text-node>
						<same xml:space="preserve">&#x09;&#x0A;&#x0D;&#x20;</same>
						<diff xml:space="preserve">&#x09;&#x0A;&#x0D;&#x20;</diff>
					</significant-whitespace-only-text-node>
				</test>
			</x:param>
		</x:call>
		<x:expect>
			<x:label>both in [Result] and [Expected Result] with diff, the significant text nodes
				must be serialized with color. (xspec/xspec#386)</x:label>
			<test>
				<oridinary-text-node>
					<same>same</same>
					<diff>expect</diff>
				</oridinary-text-node>
				<significant-whitespace-only-text-node>
					<same xml:space="preserve">&#x09;&#x0A;&#x0D;&#x20;</same>
					<diff xml:space="preserve">&#x20;&#x09;&#x0A;&#x0D;</diff>
				</significant-whitespace-only-text-node>
			</test>
		</x:expect>
		<x:expect test="false()">
			<x:label>in [Result] without diff, the significant text nodes must be serialized without
				color.</x:label>
		</x:expect>
	</x:scenario>

	<x:scenario>
		<x:label>When the result contains an element, the report HTML must serialize nodes in its
			opening tag with aligned indentation. (xspec/xspec#689) So...</x:label>
		<x:scenario>
			<x:label>When the report XML contains an element with several namespaces</x:label>
			<x:variable name="test">
				<looooooooooooooooooooooooooooooooooong>
					<test xmlns="ns" xmlns:ns1="ns1" xmlns:ns2="ns2" xmlns:ns3="ns3">
						<a />
					</test>
				</looooooooooooooooooooooooooooooooooong>
			</x:variable>

			<x:scenario>
				<x:label>in x:result,</x:label>
				<x:call function="Q{x-urn:test:mirror}param-mirror">
					<x:param select="$test" />
				</x:call>
				<x:expect>
					<x:label>[Result] with diff must be serialized with aligned
						indentation.</x:label>
				</x:expect>
				<x:expect test="false()">
					<x:label>[Result] without diff must be serialized with aligned
						indentation.</x:label>
				</x:expect>
			</x:scenario>

			<x:scenario>
				<x:label>in x:expect,</x:label>
				<x:call function="Q{x-urn:test:mirror}false" />
				<x:expect select="$test">
					<x:label>[Expected Result] with diff must be serialized with aligned
						indentation.</x:label>
				</x:expect>
			</x:scenario>
		</x:scenario>

		<x:scenario>
			<x:label>When the report XML contains an element with several attributes</x:label>
			<x:variable name="test">
				<looooooooooooooooooooooooooooooooooong>
					<test attr1="val1" attr2="val2" attr3="val3">
						<a />
					</test>
				</looooooooooooooooooooooooooooooooooong>
			</x:variable>

			<x:scenario>
				<x:label>in x:result,</x:label>
				<x:call function="Q{x-urn:test:mirror}param-mirror">
					<x:param select="$test" />
				</x:call>
				<x:expect>
					<x:label>[Result] with diff must be serialized with aligned
						indentation.</x:label>
				</x:expect>
				<x:expect test="false()">
					<x:label>[Result] without diff must be serialized with aligned
						indentation.</x:label>
				</x:expect>
			</x:scenario>

			<x:scenario>
				<x:label>in x:expect,</x:label>
				<x:call function="Q{x-urn:test:mirror}false" />
				<x:expect select="$test">
					<x:label>[Expected Result] with diff must be serialized with aligned
						indentation.</x:label>
				</x:expect>
			</x:scenario>
		</x:scenario>
	</x:scenario>

	<x:scenario>
		<x:label>When the result contains attribute,</x:label>
		<x:call function="Q{x-urn:test:mirror}param-mirror">
			<x:param>
				<exact-match attr1="value1" attr2="value2" attr3="" attr4="" />
				<name-match attr1="value1" attr2="value2" attr3="" attr4="..." />
				<orphan attr1="value1" attr2="" attr3="..." />
			</x:param>
		</x:call>

		<x:scenario>
			<x:label>both in [Result] and [Expected Result] with diff,</x:label>
			<x:expect>
				<x:label>The exact-match (taking '...' into account) attributes must be serialized
					as green="green". The name-match attributes must be serialized as
					palePink="solidPink". The orphan attributes must be serialized as
					solidPink="solidPink" regardless of their values.</x:label>
				<exact-match attr1="value1" attr2="..." attr3="" attr4="..." />
				<name-match attr1="VALUE1" attr2="" attr3="value3" attr4="value4" />
				<orphan attr4="value4" attr5="" attr6="..." />
			</x:expect>
		</x:scenario>

		<x:scenario>
			<x:label>in [Result] without diff,</x:label>
			<x:expect test="false()">
				<x:label>all the attributes must be serialized without color.</x:label>
			</x:expect>
		</x:scenario>
	</x:scenario>

	<x:scenario>
		<x:label>When the result contains processing instructions,</x:label>
		<x:call function="Q{x-urn:test:mirror}param-mirror">
			<x:param>
				<exact-match>
					<?node1 value1?>
					<?node2 value2?>
					<?node3?>
					<?node4?>
				</exact-match>
				<name-match>
					<?node1 value1?>
					<?node2 value2?>
					<?node3?>
					<?node4 ...?>
				</name-match>
				<value-match>
					<?node1 value1?>
					<?node2 value2?>
					<?node3?>
					<?node4?>
				</value-match>
				<no-match>
					<different-kind>
						<?node1 value1?>
						<node2 />
						<?node3?>
						<node4 />
						<node5 />
					</different-kind>
					<orphan>
						<node1>
							<?node1-1 value1-1?>
							<?node1-2?>
							<?node1-3 ...?>
						</node1>
						<node2 />
					</orphan>
				</no-match>
			</x:param>
		</x:call>

		<x:scenario>
			<x:label>both in [Result] and [Expected Result] with diff,</x:label>
			<x:expect>
				<x:label>The exact-match (taking '...' into account) processing instructions must be
					serialized as <![CDATA[<?green green?>]]>. The name-match processing
					instructions must be serialized as <![CDATA[<?palePink solidPink?>]]>. The
					value-match (taking '...' into account) processing instructions must be
					serialized as <![CDATA[<?solidPink green?>]]>. The no-match processing
					instructions must be serialized as <![CDATA[<?solidPink solidPink?>]]>
					regardless of their values.</x:label>
				<exact-match>
					<?node1 value1?>
					<?node2 ...?>
					<?node3?>
					<?node4 ...?>
				</exact-match>
				<name-match>
					<?node1 VALUE1?>
					<?node2?>
					<?node3 value3?>
					<?node4 value4?>
				</name-match>
				<value-match>
					<?NODE1 value1?>
					<?NODE2 ...?>
					<?NODE3?>
					<?NODE4 ...?>
				</value-match>
				<no-match>
					<different-kind>
						<node1 />
						<?node2 value2?>
						<node3 />
						<?node4?>
						<?node5 ...?>
					</different-kind>
					<orphan>
						<node1 />
						<node2>
							<?node2-1 value2-1?>
							<?node2-2?>
							<?node2-3 ...?>
						</node2>
					</orphan>
				</no-match>
			</x:expect>
		</x:scenario>

		<x:scenario>
			<x:label>in [Result] without diff,</x:label>
			<x:expect test="false()">
				<x:label>all the processing instructions must be serialized without color.</x:label>
			</x:expect>
		</x:scenario>
	</x:scenario>

	<x:scenario>
		<x:label>When the result contains an element with the default namespace undeclared</x:label>

		<x:scenario>
			<x:label>and it is top-level,</x:label>
			<x:call function="Q{x-urn:test:mirror}param-mirror">
				<x:param xmlns="default-ns">
					<foo xmlns="" />
				</x:param>
			</x:call>

			<x:scenario>
				<x:label>both in [Result] and [Expected Result] with diff,</x:label>
				<x:expect xmlns="default-ns">
					<x:label>the top-level element should not have unnecessary xmlns="".</x:label>
					<bar xmlns="" />
				</x:expect>
			</x:scenario>

			<x:scenario>
				<x:label>in [Result] without diff,</x:label>
				<x:expect test="false()">
					<x:label>the top-level element should not have unnecessary xmlns="".</x:label>
				</x:expect>
			</x:scenario>
		</x:scenario>

		<x:scenario>
			<x:label>and it is 2nd-level,</x:label>
			<x:call function="Q{x-urn:test:mirror}param-mirror">
				<x:param xmlns="default-ns">
					<foo>
						<bar xmlns="" />
					</foo>
				</x:param>
			</x:call>

			<x:scenario>
				<x:label>both in [Result] and [Expected Result] with diff,</x:label>
				<x:expect xmlns="default-ns">
					<x:label>the 2nd-level element should have xmlns="".</x:label>
					<foo>
						<baz xmlns="" />
					</foo>
				</x:expect>
			</x:scenario>

			<x:scenario>
				<x:label>in [Result] without diff,</x:label>
				<x:expect test="false()">
					<x:label>the 2nd-level element should have xmlns="".</x:label>
				</x:expect>
			</x:scenario>
		</x:scenario>
	</x:scenario>

	<x:scenario>
		<x:label>When the result is a sequence of nodes containing '&amp;' and '&lt;'
			(xspec/xspec#1155)</x:label>
		<x:call function="Q{x-urn:test:mirror}param-mirror">
			<x:param>
				<elem><![CDATA[<p>foo & bar</p>]]></elem>
				<!--<p>foo & bar</p>-->
				<?pi <p>foo & bar</p>?><![CDATA[<p>foo & bar</p>]]></x:param>
		</x:call>
		<x:expect>
			<x:label>both in [Result] and [Expected Result] with diff, '&amp;' and '&lt;' (and
				possibly other special characters) should be escaped without seeming
				indentation.</x:label>
			<elem><![CDATA[<p>bar & baz</p>]]></elem>
			<!--<p>bar & baz</p>-->
			<?pi <p>bar & baz</p>?><![CDATA[<p>bar & baz</p>]]></x:expect>
		<x:expect test="false()">
			<x:label>in [Result] without diff, '&amp;' and '&lt;' (and possibly other special
				characters) should be escaped without seeming indentation.</x:label>
		</x:expect>
	</x:scenario>

</x:description>
