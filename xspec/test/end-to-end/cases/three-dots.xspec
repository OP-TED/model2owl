<?xml version="1.0" encoding="UTF-8"?>
<x:description query="x-urn:test:three-dots" query-at="three-dots.xqm" stylesheet="three-dots.xsl"
	xmlns:x="http://www.jenitennison.com/xslt/xspec" xmlns:xs="http://www.w3.org/2001/XMLSchema">
	<x:scenario label="For resultant element (simple)">
		<x:scenario>
			<x:label>When result is<![CDATA[
					<elem>text</elem>
				]]></x:label>
			<x:call function="exactly-one">
				<x:param as="element(elem)">
					<elem>text</elem>
				</x:param>
			</x:call>
			<x:expect as="element(elem)">
				<x:label>expecting<![CDATA[
				<elem>...</elem>
				]]>should be Success</x:label>
				<elem>...</elem>
			</x:expect>
			<x:expect as="text()" label="expecting ... should be Success">...</x:expect>
		</x:scenario>

		<x:scenario>
			<x:label>When result is<![CDATA[
					<elem />
				]]></x:label>
			<x:call function="exactly-one">
				<x:param as="element(elem)">
					<elem />
				</x:param>
			</x:call>
			<x:expect as="element(elem)">
				<x:label>expecting<![CDATA[
				<elem>...</elem>
				]]>should be Success</x:label>
				<elem>...</elem>
			</x:expect>

			<x:expect as="element(elem)">
				<x:label>expecting<![CDATA[
				<elem attrib="..." />
				]]>should be Failure</x:label>
				<elem attrib="..." />
			</x:expect>
		</x:scenario>

		<x:scenario>
			<x:label>When result is<![CDATA[
					<elem>...</elem>
				]]></x:label>
			<x:call function="exactly-one">
				<x:param as="element(elem)">
					<elem>...</elem>
				</x:param>
			</x:call>
			<x:expect as="element(elem)">
				<x:label>expecting<![CDATA[
				<elem>...</elem>
				]]>should be Success</x:label>
				<elem>...</elem>
			</x:expect>
			<x:expect as="text()" label="expecting ... should be Success">...</x:expect>

			<x:expect as="element(elem)">
				<x:label>expecting<![CDATA[
				<elem>text</elem>
				]]>should be Failure</x:label>
				<elem>text</elem>
			</x:expect>
		</x:scenario>
	</x:scenario>

	<x:scenario label="For resultant element (with attribute)">
		<x:scenario>
			<x:label>When result is<![CDATA[
					<elem attrib="val" />
				]]></x:label>
			<x:call function="exactly-one">
				<x:param as="element(elem)">
					<elem attrib="val" />
				</x:param>
			</x:call>
			<x:expect as="element(elem)">
				<x:label>expecting<![CDATA[
				<elem attrib="..." />
				]]>should be Success</x:label>
				<elem attrib="..." />
			</x:expect>
			<x:expect as="text()" label="expecting ... should be Success">...</x:expect>

			<x:expect as="element(elem)">
				<x:label>expecting<![CDATA[
				<elem>...</elem>
				]]>should be Failure</x:label>
				<elem>...</elem>
			</x:expect>
		</x:scenario>
	</x:scenario>

	<x:scenario label="For resultant element (with mixed content)">
		<x:scenario>
			<x:label>When result is<![CDATA[
					<outer>text<inner1 /><inner2 /></outer>
				]]></x:label>
			<x:call function="exactly-one">
				<x:param as="element(outer)">
					<outer>text<inner1 /><inner2 /></outer>
				</x:param>
			</x:call>
			<x:expect as="element(outer)">
				<x:label>expecting<![CDATA[
				<outer>...</outer>
				]]>should be Success</x:label>
				<outer>...</outer>
			</x:expect>
			<x:expect as="element(outer)">
				<x:label>expecting<![CDATA[
				<outer>...<inner1 />...</outer>
				]]>should be Success</x:label>
				<outer>...<inner1 />...</outer>
			</x:expect>
			<x:expect as="text()" label="expecting ... should be Success">...</x:expect>
		</x:scenario>

		<x:scenario>
			<x:label>When result is<![CDATA[
					<outer><inner /></outer>
				]]></x:label>
			<x:call function="exactly-one">
				<x:param as="element(outer)">
					<outer><inner /></outer>
				</x:param>
			</x:call>
			<x:expect as="element(outer)">
				<x:label>expecting<![CDATA[
				<outer>...</outer>
				]]>should be Success</x:label>
				<outer>...</outer>
			</x:expect>

			<x:expect as="element(outer)">
				<x:label>expecting<![CDATA[
				<outer>...<inner /></outer>
				]]>should be Failure</x:label>
				<outer>...<inner /></outer>
			</x:expect>
		</x:scenario>
	</x:scenario>

	<x:scenario label="For resultant attribute">
		<x:scenario>
			<x:label>When result is<![CDATA[
						 @attrib="val"
				]]></x:label>
			<x:call function="exactly-one">
				<x:param as="attribute(attrib)" select="elem/@*">
					<elem attrib="val" />
				</x:param>
			</x:call>
			<x:expect as="attribute(attrib)" select="elem/@*">
				<x:label>expecting<![CDATA[
					 @attrib="..."
					]]>should be Success</x:label>
				<elem attrib="..." />
			</x:expect>
			<x:expect as="text()" label="expecting ... should be Success">...</x:expect>
		</x:scenario>

		<x:scenario>
			<x:label>When result is<![CDATA[
						 @attrib=""
				]]></x:label>
			<x:call function="exactly-one">
				<x:param as="attribute(attrib)" select="elem/@*">
					<elem attrib="" />
				</x:param>
			</x:call>
			<x:expect as="attribute(attrib)" select="elem/@*">
				<x:label>expecting<![CDATA[
					 @attrib="..."
					]]>should be Success</x:label>
				<elem attrib="..." />
			</x:expect>
		</x:scenario>

		<x:scenario>
			<x:label>When result is<![CDATA[
						 @attrib="..."
				]]></x:label>
			<x:call function="exactly-one">
				<x:param as="attribute(attrib)" select="elem/@*">
					<elem attrib="..." />
				</x:param>
			</x:call>
			<x:expect as="attribute(attrib)" select="elem/@*">
				<x:label>expecting<![CDATA[
					 @attrib="..."
					]]>should be Success</x:label>
				<elem attrib="..." />
			</x:expect>
			<x:expect as="text()" label="expecting ... should be Success">...</x:expect>

			<x:expect as="attribute(attrib)" select="elem/@*">
				<x:label>expecting<![CDATA[
					 @attrib="val"
					]]>should be Failure</x:label>
				<elem attrib="val" />
			</x:expect>
		</x:scenario>
	</x:scenario>

	<x:scenario label="For resultant text node">
		<x:scenario label="When result is usual text node">
			<x:call function="exactly-one">
				<x:param as="text()">text</x:param>
			</x:call>
			<x:expect as="text()" label="expecting ... should be Success">...</x:expect>

			<x:expect as="xs:string" label="expecting '...' should be Failure" select="'...'" />
		</x:scenario>

		<x:scenario label="When result is whitespace-only text node">
			<x:call function="exactly-one">
				<x:param as="text()">
					<x:text>&#x09;&#x0A;&#x0D;&#x20;</x:text>
				</x:param>
			</x:call>
			<x:expect as="text()" label="expecting ... should be Success">...</x:expect>

			<x:expect as="text()" label="expecting usual text node should be Failure"
				>text</x:expect>
		</x:scenario>

		<x:scenario label="When result is zero-length text node">
			<x:call function="exactly-one">
				<x:param as="text()" select="$Q{x-urn:test:three-dots}text-node_zero-length" />
			</x:call>
			<x:expect as="text()" label="expecting ... should be Success">...</x:expect>

			<x:expect as="text()" label="expecting usual text node should be Failure"
				>text</x:expect>
		</x:scenario>

		<x:scenario label="When result is three-dot text node">
			<x:call function="exactly-one">
				<x:param as="text()">...</x:param>
			</x:call>
			<x:expect as="text()" label="expecting ... should be Success">...</x:expect>

			<x:expect as="text()" label="expecting usual text node should be Failure"
				>text</x:expect>
			<x:expect as="xs:string" label="expecting '...' should be Failure" select="'...'" />
		</x:scenario>
	</x:scenario>

	<x:scenario label="For resultant comment">
		<x:scenario>
			<x:label>When result is<![CDATA[
					<!--comment-->
				]]></x:label>
			<x:call function="exactly-one">
				<x:param as="comment()">
					<!--comment-->
				</x:param>
			</x:call>
			<x:expect as="comment()">
				<x:label>expecting<![CDATA[
				<!--...-->
				]]>should be Success</x:label>
				<!--...-->
			</x:expect>
			<x:expect as="text()" label="expecting ... should be Success">...</x:expect>
		</x:scenario>

		<x:scenario>
			<x:label>When result is<![CDATA[
					<!---->
				]]></x:label>
			<x:call function="exactly-one">
				<x:param as="comment()">
					<!---->
				</x:param>
			</x:call>
			<x:expect as="comment()">
				<x:label>expecting<![CDATA[
				<!--...-->
				]]>should be Success</x:label>
				<!--...-->
			</x:expect>
		</x:scenario>

		<x:scenario>
			<x:label>When result is<![CDATA[
					<!--...-->
				]]></x:label>
			<x:call function="exactly-one">
				<x:param as="comment()">
					<!--...-->
				</x:param>
			</x:call>
			<x:expect as="comment()">
				<x:label>expecting<![CDATA[
				<!--...-->
				]]>should be Success</x:label>
				<!--...-->
			</x:expect>
			<x:expect as="text()" label="expecting ... should be Success">...</x:expect>

			<x:expect as="comment()">
				<x:label>expecting<![CDATA[
				<!--comment-->
				]]>should be Failure</x:label>
				<!--comment-->
			</x:expect>
		</x:scenario>
	</x:scenario>

	<x:scenario label="For resultant processing instruction">
		<x:scenario>
			<x:label>When result is<![CDATA[
					<?pi data?>
				]]></x:label>
			<x:call function="exactly-one">
				<x:param as="processing-instruction(pi)">
					<?pi data?>
				</x:param>
			</x:call>
			<x:expect as="processing-instruction(pi)">
				<x:label>expecting<![CDATA[
				<?pi ...?>
				]]>should be Success</x:label>
				<?pi ...?>
			</x:expect>
			<x:expect as="text()" label="expecting ... should be Success">...</x:expect>
		</x:scenario>

		<x:scenario>
			<x:label>When result is<![CDATA[
					<?pi?>
				]]></x:label>
			<x:call function="exactly-one">
				<x:param as="processing-instruction(pi)">
					<?pi?>
				</x:param>
			</x:call>
			<x:expect as="processing-instruction(pi)">
				<x:label>expecting<![CDATA[
				<?pi ...?>
				]]>should be Success</x:label>
				<?pi ...?>
			</x:expect>
		</x:scenario>

		<x:scenario>
			<x:label>When result is<![CDATA[
					<?pi ...?>
				]]></x:label>
			<x:call function="exactly-one">
				<x:param as="processing-instruction(pi)">
					<?pi ...?>
				</x:param>
			</x:call>
			<x:expect as="processing-instruction(pi)">
				<x:label>expecting<![CDATA[
				<?pi ...?>
				]]>should be Success</x:label>
				<?pi ...?>
			</x:expect>
			<x:expect as="text()" label="expecting ... should be Success">...</x:expect>

			<x:expect as="processing-instruction(pi)">
				<x:label>expecting<![CDATA[
				<?pi data?>
				]]>should be Failure</x:label>
				<?pi data?>
			</x:expect>
		</x:scenario>
	</x:scenario>

	<x:scenario label="For resultant document node">
		<x:scenario>
			<x:label>When result is document node containing<![CDATA[
														 <?pi?><!--comment--><elem />
				]]></x:label>
			<x:call function="exactly-one">
				<x:param as="document-node()" select="/"><?pi?><!--comment--><elem /></x:param>
			</x:call>
			<x:expect as="document-node()"
				label="expecting document node containing ... should be Failure" select="/"
				>...</x:expect>
			<x:expect as="text()" label="expecting ... should be Success">...</x:expect>
		</x:scenario>

		<x:scenario>
			<x:label>When result is document node containing nothing</x:label>
			<x:call function="exactly-one">
				<x:param as="document-node()" select="$Q{x-urn:test:three-dots}document-node_empty"
				 />
			</x:call>
			<x:expect as="text()" label="expecting ... should be Success">...</x:expect>

			<x:expect as="document-node()"
				label="expecting document node containing ... should be Failure" select="/"
				>...</x:expect>
		</x:scenario>

		<x:scenario>
			<x:label>When result is document node containing ...</x:label>
			<x:call function="exactly-one">
				<x:param as="document-node()" select="/">...</x:param>
			</x:call>
			<x:expect as="document-node()"
				label="expecting document node containing ... should be Success" select="/"
				>...</x:expect>
			<x:expect as="text()" label="expecting ... should be Success">...</x:expect>

			<x:expect as="document-node()"
				label="expecting document node containing usual text node should be Failure"
				select="/">text</x:expect>
		</x:scenario>
	</x:scenario>

	<x:scenario label="For resultant namespace node">
		<x:scenario>
			<x:label>When result is<![CDATA[
				xmlns:prefix="namespace-uri"
				]]></x:label>
			<x:call function="Q{x-urn:test:three-dots}namespace-node">
				<x:param select="'prefix'" />
				<x:param select="'namespace-uri'" />
			</x:call>
			<x:expect as="namespace-node()"
				select="Q{x-urn:test:three-dots}namespace-node('prefix', '...')">
				<x:label>expecting<![CDATA[
					xmlns:prefix="..."
					]]>should be Success</x:label>
			</x:expect>
			<x:expect as="text()" label="expecting ... should be Success">...</x:expect>
		</x:scenario>

		<x:scenario>
			<x:label>When result is<![CDATA[
				xmlns="namespace-uri"
				]]></x:label>
			<x:call function="Q{x-urn:test:three-dots}namespace-node">
				<x:param select="''" />
				<x:param select="'namespace-uri'" />
			</x:call>
			<x:expect as="namespace-node()"
				select="Q{x-urn:test:three-dots}namespace-node('', '...')">
				<x:label>expecting<![CDATA[
					xmlns="..."
					]]>should be Success</x:label>
			</x:expect>
			<x:expect as="text()" label="expecting ... should be Success">...</x:expect>
		</x:scenario>

		<x:scenario>
			<x:label>When result is<![CDATA[
				xmlns:prefix="..."
				]]></x:label>
			<x:call function="Q{x-urn:test:three-dots}namespace-node">
				<x:param select="'prefix'" />
				<x:param select="'...'" />
			</x:call>
			<x:expect as="namespace-node()"
				select="Q{x-urn:test:three-dots}namespace-node('prefix', '...')">
				<x:label>expecting<![CDATA[
					xmlns:prefix="..."
					]]>should be Success</x:label>
			</x:expect>
			<x:expect as="text()" label="expecting ... should be Success">...</x:expect>

			<x:expect as="namespace-node()"
				select="Q{x-urn:test:three-dots}namespace-node('prefix', 'namespace-uri')">
				<x:label>expecting<![CDATA[
					xmlns:prefix="namespace-uri"
					]]>should be Failure</x:label>
			</x:expect>
		</x:scenario>
	</x:scenario>

	<x:scenario label="For resultant sequence of multiple nodes">
		<x:scenario>
			<x:label>When result is sequence of<![CDATA[
					<elem1 /><elem2 />
				]]></x:label>
			<x:call function="one-or-more">
				<x:param as="element()+">
					<elem1 /><elem2 />
				</x:param>
			</x:call>
			<x:expect as="node()+" select="wrap/node()">
				<x:label>expecting<![CDATA[
					  ...<elem2 />
					]]>should be Success</x:label>
				<wrap>...<elem2 /></wrap>
			</x:expect>
			<x:expect as="text()+" label="expecting sequence of two ... should be Success"
				select="wrap/text()">
				<wrap>...</wrap>
				<wrap>...</wrap>
			</x:expect>

			<x:expect as="text()" label="expecting ... should be Failure">...</x:expect>
			<x:expect as="text()" label="expecting ...... should be Failure">......</x:expect>
			<x:expect as="text()+" label="expecting sequence of three ... should be Failure"
				select="wrap/text()">
				<wrap>...</wrap>
				<wrap>...</wrap>
				<wrap>...</wrap>
			</x:expect>
		</x:scenario>
	</x:scenario>

	<x:scenario label="When result is empty sequence">
		<x:call function="zero-or-one">
			<x:param as="empty-sequence()" />
		</x:call>
		<x:expect as="text()" label="expecting ... should be Failure">...</x:expect>
	</x:scenario>

	<x:scenario label="For resultant atomic value">
		<x:scenario label="When result is 'string'">
			<x:call function="exactly-one">
				<x:param as="xs:string" select="'string'" />
			</x:call>
			<x:expect as="xs:string" label="expecting 'string' should be Success" select="'string'" />

			<x:expect as="text()" label="expecting ... should be Failure">...</x:expect>
			<x:expect as="xs:string" label="expecting '...' should be Failure" select="'...'" />
		</x:scenario>

		<x:scenario label="When result is '...'">
			<x:call function="exactly-one">
				<x:param as="xs:string" select="'...'" />
			</x:call>
			<x:expect as="xs:string" label="expecting '...' should be Success" select="'...'" />

			<x:expect as="text()" label="expecting ... should be Failure">...</x:expect>
			<x:expect as="xs:string" label="expecting 'string' should be Failure" select="'string'"
			 />
		</x:scenario>
	</x:scenario>

	<x:scenario label="For any resultant item">
		<x:call function="exactly-one">
			<x:param as="text()">item</x:param>
		</x:call>
		<x:expect as="text()" label="expecting .... (four dots) should be Failure">....</x:expect>
		<x:expect as="text()"
			label="expecting x... (three dots with extra leading character) should be Failure"
			>x...</x:expect>
		<x:expect as="text()"
			label="expecting ...x (three dots with extra trailing character) should be Failure"
			>...x</x:expect>
		<x:expect as="text()" label="expecting ... with leading whitespace should be Failure"
			>&#x20;...</x:expect>
		<x:expect as="text()" label="expecting ... with trailing whitespace should be Failure"
			>...&#x20;</x:expect>
		<x:expect as="xs:string" label="expecting '...' (xs:string) should be Failure"
			select="'...'" />
	</x:scenario>
</x:description>
