<?xml version="1.0" encoding="UTF-8"?>
<project default="run-worker" name="run-xspec-tests">
	<!-- Directory of this project file -->
	<dirname file="${ant.file.run-xspec-tests}" property="run-xspec-tests.basedir" />

	<!-- The worker to be generated and run -->
	<property name="build.worker" value="worker/build-worker.xml" />

	<!-- Absolute path of directory where *.xspec files are located -->
	<property location="${run-xspec-tests.basedir}/../" name="xspecfiles.dir" />
	<makeurl file="${xspecfiles.dir}" property="xspecfiles.dir.url" />

	<!-- Query parameter for fn:collection() -->
	<property name="xspecfiles.dir.url.query" value="select=*.xspec" />

	<!-- Gets processor capabilities -->
	<target name="get-processor-caps">
		<echo message="Getting processor capabilities" />

		<!-- Checks to see if XSLT processor can be schema-aware ('-sa') -->
		<java classname="net.sf.saxon.Transform" classpath="${java.class.path}" fork="true"
			resultproperty="xslt.schema-aware.compile.result">
			<arg value="-nogo" />
			<arg value="-sa" />
			<arg value="-xsl:${run-xspec-tests.basedir}/../do-nothing.xsl" />
		</java>
		<condition else="false" property="xslt.supports.schema">
			<equals arg1="${xslt.schema-aware.compile.result}" arg2="0" />
		</condition>
		<echo message="xslt.supports.schema=${xslt.supports.schema}" />

		<!-- Checks to see if XSLT processor supports higher-order functions -->
		<java classname="net.sf.saxon.Transform" classpath="${java.class.path}" fork="true"
			resultproperty="xslt.hof.compile.result">
			<arg value="-nogo" />
			<arg value="-xsl:${run-xspec-tests.basedir}/../caps/hof.xsl" />
		</java>
		<condition else="false" property="xslt.supports.hof">
			<equals arg1="${xslt.hof.compile.result}" arg2="0" />
		</condition>
		<echo message="xslt.supports.hof=${xslt.supports.hof}" />

		<!-- Checks to see if XSLT processor supports Java type -->
		<java classname="net.sf.saxon.Transform" classpath="${java.class.path}" fork="true"
			resultproperty="xslt.jref.compile.result">
			<arg value="-nogo" />
			<arg value="-xsl:${run-xspec-tests.basedir}/../caps/java-reflexive-ext-fn.xsl" />
		</java>
		<condition else="false" property="xslt.supports.jref">
			<equals arg1="${xslt.jref.compile.result}" arg2="0" />
		</condition>
		<echo message="xslt.supports.jref=${xslt.supports.jref}" />

		<!-- Checks to see if XSLT processor supports timestamp -->
		<java classname="net.sf.saxon.Transform" classpath="${java.class.path}" fork="true"
			resultproperty="xslt.timestamp.compile.result">
			<arg value="-nogo" />
			<arg value="-xsl:${run-xspec-tests.basedir}/../caps/timestamp.xsl" />
		</java>
		<condition else="false" property="xslt.supports.timestamp">
			<equals arg1="${xslt.timestamp.compile.result}" arg2="0" />
		</condition>
		<echo message="xslt.supports.timestamp=${xslt.supports.timestamp}" />

		<!-- Checks to see if XQuery processor can be schema-aware ('-sa') -->
		<java classname="net.sf.saxon.Query" classpath="${java.class.path}" fork="true"
			resultproperty="xquery.schema-aware.run.result">
			<arg value="-sa" />
			<arg value="-q:${run-xspec-tests.basedir}/../caps/schema-aware.xq" />
		</java>
		<condition else="false" property="xquery.supports.schema">
			<equals arg1="${xquery.schema-aware.run.result}" arg2="0" />
		</condition>
		<echo message="xquery.supports.schema=${xquery.supports.schema}" />

		<!-- Checks to see if XQuery processor supports higher-order functions -->
		<java classname="net.sf.saxon.Query" classpath="${java.class.path}" fork="true"
			resultproperty="xquery.hof.run.result">
			<arg value="-q:${run-xspec-tests.basedir}/../caps/hof.xq" />
		</java>
		<condition else="false" property="xquery.supports.hof">
			<equals arg1="${xquery.hof.run.result}" arg2="0" />
		</condition>
		<echo message="xquery.supports.hof=${xquery.supports.hof}" />

		<!-- Checks to see if XQuery processor supports Java type -->
		<java classname="net.sf.saxon.Query" classpath="${java.class.path}" fork="true"
			resultproperty="xquery.jref.run.result">
			<arg value="-q:${run-xspec-tests.basedir}/../caps/java-reflexive-ext-fn.xq" />
		</java>
		<condition else="false" property="xquery.supports.jref">
			<equals arg1="${xquery.jref.run.result}" arg2="0" />
		</condition>
		<echo message="xquery.supports.jref=${xquery.supports.jref}" />

		<!-- Checks to see if XQuery processor supports timestamp -->
		<java classname="net.sf.saxon.Query" classpath="${java.class.path}" fork="true"
			resultproperty="xquery.timestamp.run.result">
			<arg value="-q:${run-xspec-tests.basedir}/../caps/timestamp.xq" />
		</java>
		<condition else="false" property="xquery.supports.timestamp">
			<equals arg1="${xquery.timestamp.run.result}" arg2="0" />
		</condition>
		<echo message="xquery.supports.timestamp=${xquery.supports.timestamp}" />
	</target>

	<!-- Generates the worker -->
	<target depends="get-processor-caps" name="generate-worker">
		<xslt force="true" in="worker/build-worker_template.xml" out="${build.worker}"
			style="worker/generate.xsl">
			<param expression="${xspecfiles.dir.url}" name="XSPECFILES-DIR-URI" />
			<param expression="${xspecfiles.dir.url.query}" name="XSPECFILES-DIR-URI-QUERY" />
			<param expression="${xslt.supports.schema}" name="XSLT-SUPPORTS-SCHEMA" type="BOOLEAN" />
			<param expression="${xslt.supports.hof}" name="XSLT-SUPPORTS-HOF" type="BOOLEAN" />
			<param expression="${xslt.supports.jref}" name="XSLT-SUPPORTS-JREF" type="BOOLEAN" />
			<param expression="${xslt.supports.timestamp}" name="XSLT-SUPPORTS-TIMESTAMP"
				type="BOOLEAN" />
			<param expression="${xquery.supports.schema}" name="XQUERY-SUPPORTS-SCHEMA"
				type="BOOLEAN" />
			<param expression="${xquery.supports.hof}" name="XQUERY-SUPPORTS-HOF" type="BOOLEAN" />
			<param expression="${xquery.supports.jref}" name="XQUERY-SUPPORTS-JREF" type="BOOLEAN" />
			<param expression="${xquery.supports.timestamp}" name="XQUERY-SUPPORTS-TIMESTAMP"
				type="BOOLEAN" />
			<param expression="${run-xspec-tests.now}" if="run-xspec-tests.now" name="NOW" />
			<param expression="${thread.count}" if="thread.count" name="THREAD-COUNT" type="INT" />
		</xslt>
	</target>

	<!-- Runs the generated worker -->
	<target depends="generate-worker" name="run-worker">
		<ant antfile="${build.worker}" inheritall="false" />
	</target>
</project>
