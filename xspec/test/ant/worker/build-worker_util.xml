<?xml version="1.0" encoding="UTF-8"?>
<project name="run-xspec-tests-worker-util" xmlns:if="ant:if" xmlns:unless="ant:unless">
	<!-- Directory of this project file -->
	<dirname file="${ant.file.run-xspec-tests-worker-util}"
		property="run-xspec-tests-worker-util.basedir" />

	<!-- Converts URL to file path -->
	<taskdef classname="io.xspec.xspec.ant.taskdefs.MakePath"
		classpath="${run-xspec-tests-worker-util.basedir}/java" name="makepath" />

	<!-- Executes an AppVeyor command to notify AppVeyor of test status.
		https://www.appveyor.com/docs/build-worker-api/ -->
	<macrodef if:set="appveyor.filename" name="appveyor">
		<attribute name="xspec-file-path" />
		<attribute name="test-type" />
		<attribute name="verb" />
		<attribute name="outcome" />
		<attribute default="" name="duration" />

		<sequential>
			<!-- Get .xspec file name and extension -->
			<local name="xspec-file-name" />
			<basename file="@{xspec-file-path}" property="xspec-file-name" />

			<!-- Execute 'appveyor' command -->
			<exec executable="appveyor" failonerror="true">
				<arg value="@{verb}" />

				<!-- The name of test -->
				<arg value="${xspec-file-name} [@{test-type}]" />

				<arg line="-Framework custom" />

				<arg value="-FileName" />
				<arg value="${appveyor.filename}" />

				<arg value="-Outcome" />
				<arg value="@{outcome}" />

				<arg line="-Duration @{duration}" unless:blank="@{duration}" />
			</exec>
		</sequential>
	</macrodef>

	<!-- Accepts file URLs and runs XSpec accordingly.
		Enables code coverage if requested.
		Optionally notifies AppVeyor of test status. -->
	<macrodef name="run-xspec">
		<attribute name="test-type" />
		<attribute name="xspec-file-url" />

		<attribute default="" name="additional-classpath" />
		<attribute default="" name="compiler-saxon-config" />
		<attribute default="" name="coverage-reporter" />
		<attribute default="" name="enable-coverage" />
		<attribute default="" name="force-focus" />
		<attribute default="" name="html-reporter" />
		<attribute default="" name="saxon-custom-options" />
		<attribute default="" name="schematron-preprocessor-step1" />
		<attribute default="" name="schematron-preprocessor-step2" />
		<attribute default="" name="schematron-preprocessor-step3" />
		<attribute default="" name="xml-version" />

		<attribute default="" name="output-xml-url" />
		<attribute default="" name="output-html-url" />
		<attribute default="" name="output-coverage-url" />
		<attribute default="" name="output-junit-url" />

		<element name="post-task" optional="yes" />

		<sequential>
			<!--
				Convert file URLs to file paths
			-->
			<local name="xspec-file-path" />
			<makepath property="xspec-file-path" url="@{xspec-file-url}" />

			<local name="output-xml-path" />
			<makepath property="output-xml-path" unless:blank="@{output-xml-url}"
				url="@{output-xml-url}" />

			<local name="output-html-path" />
			<makepath property="output-html-path" unless:blank="@{output-html-url}"
				url="@{output-html-url}" />

			<local name="output-coverage-path" />
			<makepath property="output-coverage-path" unless:blank="@{output-coverage-url}"
				url="@{output-coverage-url}" />

			<local name="output-junit-path" />
			<makepath property="output-junit-path" unless:blank="@{output-junit-url}"
				url="@{output-junit-url}" />

			<!-- Directory where intermediate files are created.
				This presumes <tempfile> to be practically thread-safe. -->
			<local name="xspec-intermediate-dir" />
			<tempfile destdir="${java.io.tmpdir}" prefix="xspec-intermediate_"
				property="xspec-intermediate-dir" />

			<!-- AppVeyor: Notify -->
			<appveyor if:set="appveyor.filename" outcome="Running" test-type="@{test-type}"
				verb="AddTest" xspec-file-path="${xspec-file-path}" />

			<!-- AppVeyor: Record start time -->
			<local name="appveyor.start" />
			<script if:set="appveyor.filename" language="javascript"><![CDATA[
				self.project.setProperty(
					"appveyor.start",
					new Date().getTime()
				);
			]]></script>

			<!-- Run XSpec.
				This assumes the "xspec" target is included only in one hop.
				(neither "xspec" nor "foo.xspec.xspec") -->
			<antcall inheritall="false" target="xspec.xspec">
				<param location="${xspec-intermediate-dir}" name="xspec.dir" />
				<param location="${xspec-file-path}" name="xspec.xml" />

				<param name="test.type" value="@{test-type}" />

				<param name="saxon.custom.options" unless:blank="@{saxon-custom-options}"
					value="@{saxon-custom-options}" />
				<param name="xspec.additional.classpath" unless:blank="@{additional-classpath}"
					value="@{additional-classpath}" />
				<param name="xspec.compiler.saxon.config" unless:blank="@{compiler-saxon-config}"
					value="@{compiler-saxon-config}" />
				<param name="xspec.coverage.enabled" unless:blank="@{enable-coverage}"
					value="@{enable-coverage}" />
				<param name="xspec.coverage.reporter.xsl" unless:blank="@{coverage-reporter}"
					value="@{coverage-reporter}" />
				<param name="xspec.force.focus" unless:blank="@{force-focus}" value="@{force-focus}" />
				<param name="xspec.html.reporter.xsl" unless:blank="@{html-reporter}"
					value="@{html-reporter}" />
				<param name="xspec.schematron.preprocessor.step1"
					unless:blank="@{schematron-preprocessor-step1}"
					value="@{schematron-preprocessor-step1}" />
				<param name="xspec.schematron.preprocessor.step2"
					unless:blank="@{schematron-preprocessor-step2}"
					value="@{schematron-preprocessor-step2}" />
				<param name="xspec.schematron.preprocessor.step3"
					unless:blank="@{schematron-preprocessor-step3}"
					value="@{schematron-preprocessor-step3}" />
				<param name="xspec.xml.version" unless:blank="@{xml-version}" value="@{xml-version}" />

				<param if:set="output-xml-path" location="${output-xml-path}"
					name="xspec.result.xml" />
				<param if:set="output-html-path" location="${output-html-path}"
					name="xspec.result.html" />
				<param if:set="output-coverage-path" location="${output-coverage-path}"
					name="xspec.coverage.html" />
				<param if:set="output-junit-path" location="${output-junit-path}"
					name="xspec.result.junit" />
			</antcall>

			<!-- Run post-task elements, if any -->
			<post-task />

			<!-- AppVeyor: Calc duration -->
			<local name="appveyor.duration" />
			<script if:set="appveyor.filename" language="javascript"><![CDATA[
				self.project.setProperty(
					"appveyor.duration",
					new Date().getTime() - self.project.getProperty("appveyor.start")
				);
			]]></script>

			<!-- AppVeyor: Notify -->
			<appveyor duration="${appveyor.duration}" if:set="appveyor.filename" outcome="Passed"
				test-type="@{test-type}" verb="UpdateTest" xspec-file-path="${xspec-file-path}" />
		</sequential>
	</macrodef>
</project>
