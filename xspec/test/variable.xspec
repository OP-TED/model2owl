<?xml version="1.0" encoding="UTF-8"?>
<!-- ===================================================================== -->
<!--  File:       variable.xspec                                           -->
<!--  Author:     Florent Georges                                          -->
<!--  Tags:                                                                -->
<!--    Copyright (c) 2010 Jeni Tennison (see end of file.)                -->
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->


<!--
	external_scenario-param.xspec is based on this file.
	When modifying this file, check whether external_scenario-param.xspec needs any additions or
	updates.
-->
<x:description
	xmlns:mirror="x-urn:test:mirror"
	xmlns:myv="http://example.org/ns/my/variable"
	xmlns:myv_alt="http://example.org/ns/my/variable"
	xmlns:x="http://www.jenitennison.com/xslt/xspec"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	query="x-urn:test:mirror"
	query-at="mirror.xqm"
	stylesheet="mirror.xsl">

	<!-- Variables used only in this test file are in a dedicated namespace to prevent conflict with
	 global parameters or global variables in the file to be tested. -->

	<x:variable name="myv:test-data" href="variable.xml"/>
	<x:variable name="myv:test-string" select="
			(: This 'if' clause just verifies that global variables can use preceding-sibling variables. :)
			if ($myv:test-data) then
				'global'
			else
				()" />

	<x:scenario label="Variables can be defined in different ways.">
		<x:scenario label="@select by itself">
			<x:variable name="myv:select-only" select="'text'"/>
			<x:call function="mirror:param-mirror">
				<x:param select="$myv:select-only"/>
			</x:call>
			<x:expect label="uses the selection as the variable value." select="'text'"/>
		</x:scenario>
		<x:scenario label="Combination of @select and element content">
			<x:variable name="myv:select-and-content" select="//bar">
				<foo><bar>text</bar></foo>
			</x:variable>
			<x:call function="mirror:param-mirror">
				<x:param select="$myv:select-and-content"/>
			</x:call>
			<x:expect label="uses the selection from the x:variable element's content as the variable value.">
				<bar>text</bar>
			</x:expect>
		</x:scenario>
		<x:scenario label="Combination of @href and @select">
			<x:variable name="myv:href-and-select" href="variable.xml" select="/top-level-element/*[1]"/>
			<x:call function="mirror:param-mirror">
				<x:param select="$myv:href-and-select"/>
			</x:call>
			<x:expect label="uses the selection in the specified document as the variable value.">
				<child-element/>
			</x:expect>
		</x:scenario>
		<x:scenario label="Element content in x:variable">
			<x:variable name="myv:content"><foo>text</foo></x:variable>
			<x:call function="mirror:param-mirror">
				<x:param select="$myv:content"/>
			</x:call>
			<x:expect label="uses the x:variable element's content as the variable value."><foo>text</foo></x:expect>
		</x:scenario>
		<x:scenario label="@href by itself">
			<x:variable name="myv:href-only" href="variable.xml"/>
			<x:call function="mirror:param-mirror">
				<x:param select="$myv:href-only"/>
			</x:call>
			<x:expect label="uses the specified document as the variable value."
				test="$x:result instance of document-node(element(top-level-element))"/>
		</x:scenario>
		<!--See node-selection.xspec for a scenario with both @href and element content-->
	</x:scenario>

	<x:scenario label="Variables can appear in different parts of scenario.">
		<!-- For tests of variables in XSLT-specific scenarios, see variable_stylesheet.xspec. -->
		<x:scenario label="x:variable interspersed with x:call[@function] and x:expect">
			<x:variable name="myv:before_call" select="'text'"/>
			<x:call function="mirror:upper-case">
				<x:param select="$myv:before_call"/>
			</x:call>
			<x:variable name="myv:after_call" select="'text_after_call'"/>
			<x:expect label="reflects expected behavior of function on its input" select="'TEXT'"/>
			<x:variable name="myv:after_expect" select="'text_after_expect'"/>
			<x:expect label="and expected value for each variable."
				test="($myv:before_call='text') and
				($myv:after_call='text_after_call') and
				($myv:after_expect='text_after_expect')"
			/>
			<x:variable name="myv:after_2nd_expect" select="'text_after_2nd_expect'"/>
			<x:expect label="Second expect is no different from first."
				test="$myv:after_2nd_expect='text_after_2nd_expect'"
			/>
		</x:scenario>
		<x:scenario label="Variable used to store node as expected value">
			<x:call function="mirror:param-mirror">
				<x:param><foo/></x:param>
			</x:call>
			<x:variable name="myv:expectedresult"><foo/></x:variable>
			<x:expect label="can be referenced within Boolean x:expect/@test." test="deep-equal($x:result,$myv:expectedresult)"/>
		</x:scenario>
		<x:scenario label="Variable used to store atomic expected value">
			<x:call function="mirror:param-mirror">
				<x:param select="'text'"/>
			</x:call>
			<x:variable name="myv:expectedresult" select="'text'"/>
			<x:expect label="can be referenced in x:expect/@select." select="$myv:expectedresult"/>
		</x:scenario>
		<x:scenario label="Variable with following-sibling x:expect but no sibling x:call">
			<x:call function="mirror:param-mirror">
				<x:param select="'text'"/>
			</x:call>
			<x:scenario label="can be referenced">
				<x:variable name="myv:with-expect-but-no-sibling-call" select="'text'"/>
				<x:expect label="in x:expect/@select." select="$myv:with-expect-but-no-sibling-call"/>
			</x:scenario>
		</x:scenario>
	</x:scenario>

	<x:scenario label="Variables can be referenced from different scopes.">
		<x:scenario label="Reference to global variable">
			<x:call function="mirror:param-mirror">
				<x:param select="$myv:test-string"/>
			</x:call>
			<x:expect label="yields correct result." select="'global'"/>
		</x:scenario>
		<x:scenario label="Reference to variable inherited from outer scenario">
			<x:variable name="myv:outer" select="'outer #1'"/>
			<x:scenario label="[inner]">
				<x:call function="mirror:param-mirror">
					<x:param select="$myv:outer"/>
				</x:call>
				<x:expect label="reflects value defined in outer scenario." select="'outer #1'"/>
			</x:scenario>
		</x:scenario>
		<x:scenario label="Nonconflicting definition using same variable name">
			<x:scenario label="[outer]">
				<x:variable name="myv:outer" select="'outer #2'"/>
				<x:scenario label="[inner]">
					<x:call function="mirror:param-mirror">
						<x:param select="$myv:outer"/>
					</x:call>
					<x:expect label="inherits value from ancestor scenario, not from another branch of tree." select="'outer #2'"/>
				</x:scenario>
			</x:scenario>
		</x:scenario>
	</x:scenario>

	<x:scenario label="Variables can be redefined in scenario.">
		<!-- Note: For x:variable elements that are direct children of x:description, expanded QNames must be unique.
		 This test scenario is about *scenario-level* redefinitions of global or scenario-level variables. -->
		<!-- For now, we assume any prefixes used in variable names are defined on x:description. -->
		<x:scenario label="Scenario-level redefinition of global variable">
			<x:variable name="myv:test-string" select="$myv:test-string || ' (redefined in scenario using same prefix'" as="xs:string"/>
			<x:variable name="myv_alt:test-string" select="$myv:test-string || ' or different prefix)'" as="xs:string"/>
			<x:call function="mirror:param-mirror">
				<x:param select="$myv:test-string"/>
			</x:call>
			<x:expect label="yields correct redefined result."
				select="'global (redefined in scenario using same prefix or different prefix)'"/>
		</x:scenario>
		<x:scenario label="Redefinition of variable inherited from outer scenario">
			<x:variable name="myv:outer" select="('overwritten','data')" as="xs:string+"/>
			<x:variable name="myv:outer" select="'value #1'" as="xs:string"/>
			<x:scenario label="[inner]">
				<x:variable name="myv:outer" select="$myv:outer || ' (redefined in scenario using same prefix'" as="xs:string"/>
				<x:variable name="myv_alt:outer" select="$myv:outer || ' or different prefix)'" as="xs:string"/>
				<x:call function="mirror:param-mirror">
					<x:param select="$myv:outer"/>
				</x:call>
				<x:expect label="reflects value redefined in inner scenario."
					select="'value #1 (redefined in scenario using same prefix or different prefix)'"/>
			</x:scenario>
		</x:scenario>
		<x:scenario label="Redefinition of variable in same scenario">
			<x:variable name="myv:scenario-level" select="('overwritten','data')" as="xs:string+"/>
			<x:variable name="myv:scenario-level" select="'value #2'" as="xs:string"/>
			<x:variable name="myv:scenario-level" select="$myv:scenario-level || ' (redefined using same prefix'" as="xs:string"/>
			<x:variable name="myv_alt:scenario-level" select="$myv:scenario-level || ' or different prefix)'" as="xs:string"/>
			<x:call function="mirror:param-mirror">
				<x:param select="$myv:scenario-level"/>
			</x:call>
			<x:expect label="reflects value redefined within same scenario."
				select="'value #2 (redefined using same prefix or different prefix)'"/>
		</x:scenario>
		<x:scenario label="Redefinition of variable and mixed notations for its name">
			<x:variable as="element(variable-child)"
				name="Q{http://example.org/ns/my/variable}var"
				select="/Q{}variable-child">
				<variable-child />
			</x:variable>
			<x:variable as="element(variable-child)+" name="Q{http://example.org/ns/my/variable}var"
				select="$myv:var, $Q{http://example.org/ns/my/variable}var" />
			<x:call function="mirror:param-mirror">
				<x:param select="$Q{http://example.org/ns/my/variable}var" />
			</x:call>
			<x:expect label="reflects value redefined within same scenario.">
				<variable-child />
				<variable-child />
			</x:expect>
		</x:scenario>
		<x:scenario label="The name 'result' in a non-XSpec namespace">
			<x:call function="mirror:param-mirror">
				<x:param select="'result of function call'"/>
			</x:call>
			<x:variable name="myv:result" select="'no conflict'" as="xs:string"/>
			<x:expect label="has no conflict with $x:result" test="$myv:result and ($myv:result eq 'no conflict')"/>
			<x:expect label="while $x:result is preserved for explicit reference"
				test="$x:result and ($x:result eq 'result of function call')"/>
			<x:expect label="or implicit reference." select="'result of function call'"/>
		</x:scenario>
	</x:scenario>

	<x:scenario label="Nonsense variable definition in pending scenario does not cause build failure.">
		<x:scenario label="Pending scenario 1" pending="skip on purpose">
			<x:variable name="myv:nonsense1" select="$myv:nonexistent" as="item()+"/>
			<x:call function="mirror:param-mirror">
				<x:param select="$myv:nonsense1"/>
			</x:call>
			<x:expect label="nonsense result" select="0"/>
		</x:scenario>
		<x:pending label="skip on purpose">
			<x:scenario label="Pending scenario 2">
				<x:variable name="myv:nonsense2" href="nonexistent.xml"/>
				<x:call function="mirror:param-mirror">
					<x:param select="$myv:nonsense2"/>
				</x:call>
				<x:expect label="nonsense result" select="0"/>
			</x:scenario>
		</x:pending>
	</x:scenario>

	<x:scenario shared="yes" label="SHARED variables">
		<!-- When referencing this scenario via x:like, make sure $myv:str and $x:result are already defined. -->
		<x:variable name="myv:bracketed" select="'[' || $myv:str || ']'" as="xs:string"/>
		<x:variable name="myv:result" select="$x:result" as="xs:boolean"/>
	</x:scenario>

	<x:scenario label="Shared scenario can use prior definition of variable.">
		<x:scenario label="Scenario 1">
			<x:call function="mirror:true"/>
			<x:variable name="myv:str" select="'cat'" as="xs:string"/>
			<x:like label="SHARED variables"/>
			<x:expect label="operates on variable value from Scenario 1." test="$myv:result and ($myv:bracketed eq '[cat]')"/>
		</x:scenario>
		<x:scenario label="Scenario 2">
			<x:call function="mirror:true"/>
			<x:variable name="myv:str" select="'mouse'" as="xs:string"/>
			<x:like label="SHARED variables"/>
			<x:expect label="operates on variable value from Scenario 2." test="$myv:result and ($myv:bracketed eq '[mouse]')"/>
		</x:scenario>
	</x:scenario>

</x:description>
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<!-- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS COMMENT.             -->
<!--                                                                       -->
<!-- Copyright (c) 2010 Jeni Tennison                                      -->
<!--                                                                       -->
<!-- The contents of this file are subject to the MIT License (see the URI -->
<!-- http://www.opensource.org/licenses/mit-license.php for details).      -->
<!--                                                                       -->
<!-- Permission is hereby granted, free of charge, to any person obtaining -->
<!-- a copy of this software and associated documentation files (the       -->
<!-- "Software"), to deal in the Software without restriction, including   -->
<!-- without limitation the rights to use, copy, modify, merge, publish,   -->
<!-- distribute, sublicense, and/or sell copies of the Software, and to    -->
<!-- permit persons to whom the Software is furnished to do so, subject to -->
<!-- the following conditions:                                             -->
<!--                                                                       -->
<!-- The above copyright notice and this permission notice shall be        -->
<!-- included in all copies or substantial portions of the Software.       -->
<!--                                                                       -->
<!-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       -->
<!-- EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF    -->
<!-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.-->
<!-- IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY  -->
<!-- CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  -->
<!-- TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE     -->
<!-- SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                -->
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
