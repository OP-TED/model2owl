%% Copyright 2020 Eugeniu Costetchi
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
% 
% The Current Maintainer of this work is Eugeniu Costetchi.
%
% This work consists of the files tikz-graffoo.sty

\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{listings-owl}[05/05/2020 Listings-owl is a listings extension to provide syntax highlighting for main OWL syntaxes. This library implements Turtle, Manchester, Functional and RDF/XML and syntaxes.]

\RequirePackage{tikz}
\RequirePackage{xcolor}
\RequirePackage{t1enc}

\usetikzlibrary{calc, arrows, arrows.meta, positioning, shapes, decorations, decorations.markings, decorations.shapes, shapes.multipart, shadows}

% colors
\definecolor{gf-yellow}{HTML}{fffe3a}
\definecolor{gf-yellow-pale}{HTML}{fffe9f}
\definecolor{gf-yellow-pale2}{HTML}{ffffea}
\definecolor{gf-green}{HTML}{caffce}
\definecolor{gf-green-pale}{HTML}{ebffed}
\definecolor{gf-gray}{HTML}{e7e6e6}
\definecolor{gf-gray-pale}{HTML}{ebebeb}
\definecolor{gf-gray-dark}{HTML}{b7b69f}
\definecolor{gf-teal}{HTML}{c9ffff}
\definecolor{gf-teal-pale}{HTML}{e7ffff}
\definecolor{gf-pink}{HTML}{ff99cb}
\definecolor{gf-pink-pale}{HTML}{ffc7e4}
\definecolor{gf-blue}{HTML}{96cdfd}

\definecolor{ge-black}{HTML}{0b2b3f}
\definecolor{ge-blue}{HTML}{27167e}
\definecolor{ge-green}{HTML}{1e795f}
\definecolor{ge-brown}{HTML}{844731}
\definecolor{ge-gray}{HTML}{4d4d4d}


% **********************************************
% Document shape
% **********************************************
% taken from manual: EDIT (see subsequent comments by the OP): adapted from the PGF manual p631 (v.2.10):
\makeatletter
\pgfdeclareshape{document}{
	\inheritsavedanchors[from=rectangle] % this is nearly a rectangle
	\inheritanchorborder[from=rectangle]
	\inheritanchor[from=rectangle]{center}
	\inheritanchor[from=rectangle]{north}
	\inheritanchor[from=rectangle]{south}
	\inheritanchor[from=rectangle]{west}
	\inheritanchor[from=rectangle]{east}
	% ... and possibly more
	\backgroundpath{% this is new
		% store lower right in xa/ya and upper right in xb/yb
		\southwest \pgf@xa=\pgf@x \pgf@ya=\pgf@y
		\northeast \pgf@xb=\pgf@x \pgf@yb=\pgf@y
		% compute corner of ‘‘flipped page’’
		\pgf@xc=\pgf@xb \advance\pgf@xc by-10pt % this should be a parameter
		\pgf@yc=\pgf@yb \advance\pgf@yc by-10pt
		% construct main path
		\pgfpathmoveto{\pgfpoint{\pgf@xa}{\pgf@ya}}
		\pgfpathlineto{\pgfpoint{\pgf@xa}{\pgf@yb}}
		\pgfpathlineto{\pgfpoint{\pgf@xc}{\pgf@yb}}
		\pgfpathlineto{\pgfpoint{\pgf@xb}{\pgf@yc}}
		\pgfpathlineto{\pgfpoint{\pgf@xb}{\pgf@ya}}
		\pgfpathclose
		% add little corner
		\pgfpathmoveto{\pgfpoint{\pgf@xc}{\pgf@yb}}
		\pgfpathlineto{\pgfpoint{\pgf@xc}{\pgf@yc}}
		\pgfpathlineto{\pgfpoint{\pgf@xb}{\pgf@yc}}
		\pgfpathlineto{\pgfpoint{\pgf@xc}{\pgf@yc}}
	}
}
\makeatother

% **********************************************
% Styles
% **********************************************

\tikzstyle{base-style} = [  draw, 
							ge-black,
							thick,
							minimum width=4em, 
							minimum height=2em,
							inner sep=0.7em,
							align=center,                    
							font=\sffamily
							]


\tikzstyle{entity} = [base-style, 
						rectangle, 					 
						fill=gf-gray,
						anchor=center,
						]

\tikzstyle{class} = [base-style, 
					 rectangle, 					 
                     rounded corners, 
                     fill=gf-yellow,
                     anchor=center,
                     ]

\tikzstyle{class-restriction} = [base-style,
								 rectangle, 
								 fill=gf-yellow-pale,
								 densely dotted, 
								 rounded corners, 
								 ]

\tikzstyle{datatype} = [base-style, 
					trapezium, 
					trapezium left angle=-110, 
					trapezium right angle=-70,
					fill=gf-green,
					]

\tikzstyle{datatype-restriction} = [base-style, 
									trapezium, 
									densely dotted,
									trapezium left angle=-110, 
									trapezium right angle=-70,
									fill=gf-green-pale,
									]

\tikzstyle{literal} = [ base-style, 
						draw=none,
						minimum width=0em, 
						minimum height=0em,
						inner sep=0.2em,
						align=center]

\tikzstyle{value} = [literal]


\tikzstyle{instance-circle} = [circle, minimum width=0.7em, fill=gf-pink,
minimum height=0.7em, draw=black, line width=1.5pt, label distance=0em]

\tikzstyle{instance-base} = [base-style, 
						draw=none, 					 
						rounded corners, 
						anchor=center,
						minimum width=0em, 
						minimum height=0em,
						inner sep=0.2em,						
						]

\tikzstyle{instance-r} = [instance-base, label={[instance-circle]right:}]
\tikzstyle{instance-l} = [instance-base, label={[instance-circle]left:}]
\tikzstyle{instance-a} = [instance-base, label={[instance-circle]above:}]
\tikzstyle{instance-b} = [instance-base, label={[instance-circle]below:}]

\tikzstyle{axiom} = [base-style, 
shape=document, 					 
fill=gf-teal,
anchor=center,
]

\tikzstyle{ashadow} = [opacity=.25, shadow xshift=0.07, shadow yshift=-0.07, color=gf-gray-dark]

\tikzstyle{pref} = [base-style, align=left, rectangle split, draw, 
	font=\ttfamily\footnotesize, drop shadow={ashadow},
	rectangle split parts=2,   
	rectangle split part align={right,left},
	rectangle split part fill={gf-gray-dark,gf-gray},
	]


\tikzstyle{base-style-edge} = [draw, ge-black, thick, align=center,font=\sffamily]


\tikzstyle{predicate} = [base-style-edge, arrows={-Stealth[angle=45:.7em,ge-blue,fill=ge-blue,scale=1, ] } ]

\tikzstyle{object-property} = [base-style-edge, ge-blue, arrows={Circle-Triangle[angle=45:.7em,ge-blue,fill=ge-blue,scale=1, ] } ]

\tikzstyle{data-property} = [base-style-edge, ge-green, arrows={o-Triangle[angle=45:.7em,ge-green,fill=white,scale=1, ] } ]

\tikzstyle{annotation-property} = [base-style-edge, ge-brown, arrows={-angle 60[ge-brown,scale=1]}, postaction={decorate,-}, 
decoration={
	markings,
	mark=at position .01 with {
		\arrow{Bar[slant=-0.5]};
	}
}]

\tikzstyle{link} = [base-style-edge, ge-gray, densely dashed]


% **********************************************
% Macros for drawing Graffoo nodes and connections
% **********************************************

% create a literal node
% usage: \gLiteral{TikZ parameters}{Id}{Content text}
\newcommand{\gLiteral}[3]{\node[literal,#1](#2){#3};}

% create a class node
% usage: \gClass{TikZ parameters}{Id}{Content text}
\newcommand{\gClass}[3]{\node[class,#1](#2){#3};}

% create a class restriction node
% usage: \gGlassRestriction{TikZ parameters}{Id}{Content text}
\newcommand{\gGlassRestriction}[3]{\node[class-restriction,#1](#2){#3};}

% create a datatype node
% usage: \gDatatype{TikZ parameters}{Id}{Content text}
\newcommand{\gDatatype}[3]{\node[datatype,#1](#2){#3};}

% create a datatype restriction
% usage: \gDatatypeRestriction{TikZ parameters}{Id}{Content text}
\newcommand{\gDatatypeRestriction}[3]{\node[datatype-restriction,#1](#2){#3};}

% create an instance node
% usage: \gInstance{TikZ parameters}{dot position:below|abiove|left|right}{Id}{Content text}
\newcommand{\gInstance}[4]{\node[instance-base,#1, label={[instance-circle]#2:}](#3){#4};}

% create an arbitrary entity node
% usage: \gEntity{TikZ parameters}{Id}{Content text}
\newcommand{\gEntity}[3]{\node[entity,#1](#2){#3};}

% create a node with additional axioms
% usage: \gAxiom{TikZ parameters}{Id}{Content text}
\newcommand{\gAxiom}[3]{\node[axiom,#1](#2){#3};}

% create a prefix definition node
% usage: \gPrefixes{TikZ parameters}{Id}{Content text}
\newcommand{\gPrefixes}[3]{\node[pref,#1](#2){\textbf{\sffamily Prefixes:}\nodepart{two}#3};}

% create a predicate edge between two nodes
% usage: \gPredicate{subject node}{object node}{predicate}
\newcommand{\gPredicate}[3]{\draw[predicate] (#1) -- (#2) node[midway,fill=white,] {#3};}

% create an object proporty edge between two nodes
% usage: \gObjectProperty{subject node}{object node}{predicate}
\newcommand{\gObjectProperty}[3]{\draw[object-property] (#1) -- (#2) node[midway,fill=white,] {#3};}

% create a datatype property edge between two nodes
% usage: \gDataProperty{subject node}{object node}{predicate}
\newcommand{\gDataProperty}[3]{\draw[data-property] (#1) -- (#2) node[midway,fill=white,] {#3};}

% create an annotation property edge between two nodes
% usage: \gAnnotationProperty{subject node}{object node}{predicate}
\newcommand{\gAnnotationProperty}[3]{\draw[annotation-property] (#1) -- (#2) node[midway,fill=white,] {#3};}

% create a link edge between two nodes
% usage: \gLink{subject node}{object node}
\newcommand{\gLink}[2]{\draw[link] (#1) -- (#2);}

% **********************************************
% Macros for literal values
% **********************************************

% create an untyped literal
% usage: \valuePlain{value}
\newcommand{\valuePlain}[2][xsd:string]{\textquotedbl{#2}\textquotedbl\^{}\^{}{#1}}

% create a typed literal
% usage: \valueTyped[datatype]{value} - ''value''^^datatype
% usage: \valueTyped{value} with defaulty xsd:string datatype - ''value''^^xsd:string
\newcommand{\valueTyped}[2][xsd:string]{\textquotedbl{#2}\textquotedbl\^{}\^{}{#1}}

% create a linguistic literal
% usage: \valueLang[lang]{value} - ''value''@lang
% usage: \valueLang{value} with default 'en' language - ''value''@en
\newcommand{\valueLang}[2][en]{\textquotedbl{#2}\textquotedbl @{#1}}
